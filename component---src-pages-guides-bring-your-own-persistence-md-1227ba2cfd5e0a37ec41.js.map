{"version":3,"sources":["webpack:///./src/pages/guides/BringYourOwnPersistence.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-guides-bring-your-own-persistence-md-1227ba2cfd5e0a37ec41.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/FHIR/FHIR/fhir/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Overview`}</h2>\n    <p>{`The IBM FHIR Server is a modular Java implementation of the HL7 FHIR specification with a focus on performance and configurability. The IBM FHIR Server ships with a JDBC persistence layer that works with IBM Db2, PostgreSQL and Apache Derby. With this modular design, it’s possible to add support for other relational databases and/or plug in any other persistence layer.`}</p>\n    <p>{`This document outlines the interfaces that need to be implemented and the behaviors required for the related methods to work with the IBM FHIR Server.`}</p>\n    <h3>{`Interfaces`}</h3>\n    <p>{`Persistence layer interfaces are defined in the `}<inlineCode parentName=\"p\">{`fhir-persistence`}</inlineCode>{` module.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/IBM/FHIR/blob/main/fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistence.java\"\n        }}>{`FHIRPersistence`}</a>{` defines the contract between the REST layer and the persistence layer.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/IBM/FHIR/blob/main/fhir-persistence/src/main/java/com/ibm/fhir/persistence/FHIRPersistenceFactory.java\"\n        }}>{`FHIRPersistenceFactory`}</a>{` is the interface for providing instances of FHIRPersistence to the server.`}</li>\n    </ul>\n    <h3>{`Configuration`}</h3>\n    <p>{`Which persistence layer is used by the server is determined by the `}<inlineCode parentName=\"p\">{`/fhirServer/persistence/factoryClassname`}</inlineCode>{` property in `}<inlineCode parentName=\"p\">{`fhir-server-config.json`}</inlineCode>{`. There is more detail on the configuration in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#33-persistence-layer-configuration\"\n      }}>{`IBM FHIR Server’s User Guide`}</a></p>\n    <p>{`When the default `}<inlineCode parentName=\"p\">{`com.ibm.fhir.persistence.jdbc.FHIRPersistenceJDBCFactory`}</inlineCode>{` is used, the returned FHIRPersistenceJDBCImpl instance will look up a corresponding datasource, by JNDI name, using the combination of the tenant id and datastore id from the request context. Specifically, the connection strategy will use the `}<inlineCode parentName=\"p\">{`fhirServer/persistence/<datasourceId>/jndiName`}</inlineCode>{` property in the tenant config, or — if the property is omitted —it will construct the name via the following pattern:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`jdbc/fhir_<tenantId>_<datasourceId>[_ro]\n`}</code></pre>\n    <p>{`Note, the `}<inlineCode parentName=\"p\">{`_ro`}</inlineCode>{` postfix means the datasource is ‘Read Only’.`}</p>\n    <h2>{`Adding support for another relational database`}</h2>\n    <p>{`Adding a new relational database type is not for the faint of heart, but the IBM FHIR Server team is here to help!\nTo add support for an alternative relational database, there are multiple modules to consider:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`fhir-database-utils`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`fhir-persistence-schema`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`fhir-persistence-jdbc`}</inlineCode></li>\n    </ol>\n    <p>{`The `}<inlineCode parentName=\"p\">{`fhir-database-utils`}</inlineCode>{` module provides generic utilities for defining a PhysicalDataModel and applying it to a target database via the IDatabaseAdapter and IVersionHistoryService interfaces. Check out the `}<inlineCode parentName=\"p\">{`com.ibm.fhir.database.utils.db2`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`com.ibm.fhir.database.utils.postgres`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`com.ibm.fhir.database.utils.derby`}</inlineCode>{` packages to understand how you might extend the framework with support for a new database type.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`fhir-persistence-schema`}</inlineCode>{` module is used to programmatically construct DDL statements and execute them against a target database. This module uses the generic utilities in `}<inlineCode parentName=\"p\">{`fhir-database-utils`}</inlineCode>{` to deploy both an admin schema (used for tenant provisioning and schema versioning) and an application schema for the FHIR data.`}</p>\n    <p>{`Presently, the `}<inlineCode parentName=\"p\">{`fhir-persistence-schema`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fhir-persistence-jdbc`}</inlineCode>{` modules work with Postgres, Derby and Db2 databases, but it should be possible to either:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Print the DDL and manually tweak it for your desired database; or`}</li>\n      <li parentName=\"ol\">{`Add configuration to control which IDatabaseAdapter and IDatabaseTranslator are used.`}</li>\n    </ol>\n    <p>{`Note, the Db2 implementation uses stored procedures, the Postgres implementation uses Functions, and the Derby implementation is JDBC.`}</p>\n    <p>{`Finally, the `}<inlineCode parentName=\"p\">{`fhir-persistence-jdbc`}</inlineCode>{` module provides the default implementation of the `}<inlineCode parentName=\"p\">{`FHIRPersistence`}</inlineCode>{` interface.`}</p>\n    <p>{`The module makes heavy use of Data Access Objects (DAO) and Data Transfer Objects (DTO) to abstract the details of the database. Most of the code is common across database types, but there is a branch in `}<inlineCode parentName=\"p\">{`ResourceDAOImpl.insert`}</inlineCode>{` which corresponds to the differences between the IBM Db2/Postgres flavors and Apache Derby (pure JDBC) flavor of implementation.`}</p>\n    <h2>{`Building your own persistence layer`}</h2>\n    <p>{`Most FHIR projects are interoperability projects—the data already exists in some datastore.`}</p>\n    <p>{`Due to performance considerations and the complexities of the FHIR API (especially search), we generally recommend converting that data to FHIR and storing the binary representation in the IBM FHIR Server’s database. However, in some cases, it might be better to configure the IBM FHIR Server to work directly with an existing datastore or APIs.`}</p>\n    <p>{`If you are using Maven, add the following dependencies to your persistence layer module (replacing the version variables with your desired version):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<dependency>\n    <groupId>com.ibm.fhir</groupId>\n    <artifactId>fhir-persistence</artifactId>\n    <version>\\${fhir.persistence.version}</version>\n</dependency>\n<dependency>\n    <groupId>com.ibm.fhir</groupId>\n    <artifactId>fhir-persistence</artifactId>\n    <version>\\${fhir.persistence.version}</version>\n    <type>test-jar</type>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>com.ibm.fhir</groupId>\n    <artifactId>fhir-examples</artifactId>\n    <version>\\${fhir.examples.version}</version>\n    <scope>test</scope>\n</dependency>\n`}</code></pre>\n    <p>{`You might also want to set up `}<inlineCode parentName=\"p\">{`fhir-persistence-jdbc`}</inlineCode>{` to use an example.`}</p>\n    <h3>{`Implementing the FHIRPersistence Interface`}</h3>\n    <p>{`As described `}<a parentName=\"p\" {...{\n        \"href\": \"#interfaces\"\n      }}>{`above`}</a>{`, implementing your own persistence layer boils down to configuring the server to use your own FHIRPersistenceFactory and returning your own implementation of FHIRPersistence. The REST layer processes HTTP requests and distills them into one or more calls to this instance. Parameters are passed via a combination of the passed FHIRPersistenceContext and the ThreadLocal FHIRRequestContext.`}</p>\n    <p>{`Although the HL7 FHIR specification `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hl7.org/fhir/R4/http.html#versions\"\n      }}>{`doesn’t strictly require all servers to support versioning`}</a>{`, the IBM FHIR Server is built to be version-aware. This means that all FHIRPersistence implementations should implement the `}<inlineCode parentName=\"p\">{`vread`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`history`}</inlineCode>{` interactions.\nSimilarly, the IBM FHIR Server was written for read/write datastores and so `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` should be supported as well.\nIf you have a use case for a read-only or non-version-aware server, please contact us and consider contributing the necessary modifications to the server to make this supported.`}</p>\n    <p>{`The IBM FHIR Server does support persistence implementations which do not support `}<inlineCode parentName=\"p\">{`delete`}</inlineCode>{` or transactions (e.g. for transaction bundles), so please implement `}<inlineCode parentName=\"p\">{`FHIRPersistence.isTransactional()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`isDeleteSupported()`}</inlineCode>{` accordingly.`}</p>\n    <h4>{`Create`}</h4>\n    <p>{`Create requests include a FHIRPersistenceContext and an already-validated instance of the resource to create. FHIRPersistence implementations are responsible for adding the `}<inlineCode parentName=\"p\">{`Resource.id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Resource.meta.lastUpdate`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`Resource.meta.versionId`}</inlineCode>{` elements to the resource before storing it. Implementations must return a SingleResourceResult with the result of the interaction.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`SingleResourceResult.success`}</inlineCode>{` is set to true, the `}<inlineCode parentName=\"p\">{`SingleResourceResult.resource`}</inlineCode>{` should be a copy of the saved resource (with the added fields included).`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`SingleResourceResult.success`}</inlineCode>{` is set to false, the `}<inlineCode parentName=\"p\">{`SingleResourceResult.outcome`}</inlineCode>{` should be an OperationOutcome with a list of one or more issues that prevented the success of the operation.`}</p>\n    <p>{`Note that a `}<inlineCode parentName=\"p\">{`generateResourceId`}</inlineCode>{` implementation is required to generate server-assigned resource ids. For performance reasons, recommend the use of `}<inlineCode parentName=\"p\">{`TimestampPrefixedUUID`}</inlineCode>{`.`}</p>\n    <h4>{`Read`}</h4>\n    <p>{`Read requests include a FHIRPersistenceContext, a Class object for the resource type being read, and the logical id of the resource to read.\nImplementations should check the FHIRSearchContext of the FHIRPersistenceContext to determine whether the caller would like the full resource back, the resource text or data, or just a summary (see `}<inlineCode parentName=\"p\">{`FHIRSearchContext.getSummaryParameter()`}</inlineCode>{`).`}</p>\n    <p>{`For successful requests, `}<inlineCode parentName=\"p\">{`SingleResourceResult.success`}</inlineCode>{` must be set to true and `}<inlineCode parentName=\"p\">{`SingleResourceResult.resource`}</inlineCode>{` must include a `}{`[potentially filtered]`}{` resource of the type passed in the request.`}</p>\n    <p>{`For unsuccessful requests, the implementation should return an appropriate Exception:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`FHIRPersistenceResourceNotFoundException if the resource with this id could not be found for the passed resource type`}</li>\n      <li parentName=\"ul\">{`FHIRPersistenceResourceDeletedException if the latest version of this resource is marked as deleted`}</li>\n    </ul>\n    <p>{`For all other errors, the implementation should return a `}<inlineCode parentName=\"p\">{`SingleResourceResult`}</inlineCode>{` with a success status of false and a non-null outcome with one or more issues to indicate the failure.`}</p>\n    <p>{`Note: we plan to deprecate these exceptions and use only `}<inlineCode parentName=\"p\">{`SingleResourceResult`}</inlineCode>{` as part of `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/FHIR/issues/194\"\n      }}>{`https://github.com/IBM/FHIR/issues/194`}</a>{`.`}</p>\n    <h4>{`Version read`}</h4>\n    <p>{`Version read requests work just like read requests except that the caller passes a version identifier and the persistence implementation must return that specific version of the resource.`}</p>\n    <h4>{`Update`}</h4>\n    <p>{`Update requests include a FHIRPersistenceContext, a resource logical id, and an updated version of the resource to save. FHIRPersistence implementations must set the `}<inlineCode parentName=\"p\">{`Resource.meta.lastUpdate`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Resource.meta.versionId`}</inlineCode>{` elements before storing it. Typically, implementations set the version of the updated resource based on the previous version of the resource which can be found in the FHIRPersistenceEvent (`}<inlineCode parentName=\"p\">{`FHIRPersistenceEvent.getPrevFhirResource()`}</inlineCode>{`) of the FHIRPersistenceContext.`}</p>\n    <p>{`Note: at the REST layer, an update request will first invoke read and then invoke update. Similarly, PATCH requests are converted to normal updates before reaching the persistence layer’s update implementation.`}</p>\n    <p>{`FHIRPersistence implementations SHOULD use the value of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#45-updatecreate-feature\"\n      }}><inlineCode parentName=\"a\">{`fhirServer/persistence/common/updateCreateEnabled`}</inlineCode></a>{` property to determine whether they should allow an update to a resource that doesn’t exist yet.`}</p>\n    <h4>{`Delete`}</h4>\n    <p>{`Delete requests include a FHIRPersistenceContext, a Class object for the resource type being deleted, and the logical id of the resource to delete.\nFHIRPersistence implementations are expected to be version-aware and therefore must perform a “soft” delete, handling the delete like an update by setting the `}<inlineCode parentName=\"p\">{`Resource.meta.lastUpdate`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Resource.meta.versionId`}</inlineCode>{` elements along with some marker flag to indicate that this resource has been deleted at this version.`}</p>\n    <p>{`For implementations that do not implement delete, FHIRPersistence includes a default implementation which throws a FHIRPersistenceNotSupportedException.`}</p>\n    <h4>{`History`}</h4>\n    <p>{`The IBM FHIR Server currently only supports history at the resource instance level. History requests include a FHIRPersistenceContext with an embedded FHIRHistoryContext, a Class object for the resource type being requested, and the logical id of the resource for which to show the history. Implementations should also check the FHIRSearchContext of the FHIRPersistenceContext to determine whether the caller would like the full resources back, the resource text or data, or just a summary (see `}<inlineCode parentName=\"p\">{`FHIRSearchContext.getSummaryParameter()`}</inlineCode>{`).`}</p>\n    <p>{`FHIRHistoryContext extends FHIRPagingContext and provides the requested page size and page number to return.\nSimilarly, FHIRPersistence implementations should check and honor the the `}<inlineCode parentName=\"p\">{`since`}</inlineCode>{` attribute (when valued).`}</p>\n    <p>{`In addition to setting the MultiResourceResult success indicator and the resource version instances for the requested page, FHIRPersistence implementations must set the total number of versions for the requested resource (`}<inlineCode parentName=\"p\">{`FHIRPagingContext.setTotalCount(int)`}</inlineCode>{`) and a map of deleted resource versions (`}<inlineCode parentName=\"p\">{`FHIRHistoryContext.setDeletedResources()`}</inlineCode>{`) for the REST layer to properly construct the response bundle and accurately reflect which versions are deletes (rather than updates).`}</p>\n    <p>{`The FHIRPersistence also supports whole system `}<inlineCode parentName=\"p\">{`_history`}</inlineCode>{`. If supported, `}<inlineCode parentName=\"p\">{`isChangesSupported`}</inlineCode>{` must return true, and `}<inlineCode parentName=\"p\">{`changes`}</inlineCode>{` must be implemented to return a list of ResourceChangeLogRecord DTOs.`}</p>\n    <h4>{`Search`}</h4>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hl7.org/fhir/R4/search.html\"\n      }}>{`FHIR Search specification`}</a>{` is sprawling and difficult to implement in its entirety. At the persistence layer, search requests will include a FHIRPersistenceContext with an embedded FHIRSearchContext and a Class object to indicate the resource type(s) to search on.\nA Class of `}<inlineCode parentName=\"p\">{`com.ibm.fhir.model.type.Resource`}</inlineCode>{` is passed for searches performed at the “whole-system” level.`}</p>\n    <p>{`The query parameters passed in the HTTP request are parsed at the REST layer and passed to the persistence layer in the form of a FHIRSearchContext.\nThe FHIRSearchContext separates “return” parameters (like `}<inlineCode parentName=\"p\">{`_include`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`_revinclude`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`_sort`}</inlineCode>{`, etc.) from search parameters and makes them available through dedicated getters.\nEach search parameter is parsed into a QueryParameter and a QueryParameterValue. `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hl7.org/fhir/R4/compartmentdefinition.html\"\n      }}>{`Compartment`}</a>{` searches are converted into `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hl7.org/fhir/R4/search.html#chaining\"\n      }}>{`chained parameters`}</a>{`, which are represented through nested QueryParameter objects within the outermost QueryParameter.\nCheck `}<inlineCode parentName=\"p\">{`com.ibm.fhir.search.util.SearchUtil.parseQueryParameters()`}</inlineCode>{` for more information.`}</p>\n    <p>{`FHIRSearchContext extends FHIRPagingContext and provides the requested page size and page number to return.\nFHIRPersistence implementations are responsible for setting the total number of search results (`}<inlineCode parentName=\"p\">{`FHIRPagingContext.setTotalCount(int)`}</inlineCode>{`) for the given query.`}</p>\n    <p>{`On success, set `}<inlineCode parentName=\"p\">{`MultiResourceResult.success`}</inlineCode>{` to true and set `}<inlineCode parentName=\"p\">{`MultiResourceResult.resource`}</inlineCode>{` to the list of resources `}{`[or resource summaries]`}{` for the requested page.`}</p>\n    <p>{`On failure, set `}<inlineCode parentName=\"p\">{`MultiResourceResult.success`}</inlineCode>{` to false and set `}<inlineCode parentName=\"p\">{`MultiResourceResult.outcome`}</inlineCode>{` to an OperationOutcome with one or more issues which indicate the failure.`}</p>\n    <h4>{`Extended Operations`}</h4>\n    <p>{`The IBM FHIR Server supports `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.hl7.org/fhir/operations.html\"\n      }}>{`extended operations`}</a>{`. The IBM FHIR Server has some operations which use custom persistence interactions: `}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Operation Name`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Interfaces to implement`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$healthcheck`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`getHealth`}</inlineCode>{` must be implemented to indicate if the persistence layer is in a healthy state and can access the data store`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$erase`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`erase`}</inlineCode>{` must be implemented so that ResourceEraseRecord is returned for each Erase operation.  If not implemented it throws an exception`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$export`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`fetchResourcePayloads`}</inlineCode>{` must be implemented so that the ResourcePayload is returned as a BinaryStream`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`$reindex`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`isReindexSupported`}</inlineCode>{` must be true and, if true, `}<inlineCode parentName=\"td\">{`reindex`}</inlineCode>{` must be implemented so that users can apply the latest search configuration to a resource after it is already ingested`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2>{`Testing your persistence layer`}</h2>\n    <p>{`In addition to defining the interfaces, the `}<inlineCode parentName=\"p\">{`fhir-persistence`}</inlineCode>{` module includes a set of tests that you can extend to test your implementation.`}</p>\n    <p>{`Most of the tests defined in this module relate to search, but they also exercise the create, update, and delete interactions in the process.\nThe tests in the `}<inlineCode parentName=\"p\">{`com.ibm.fhir.persistence.search.test`}</inlineCode>{` package are organized by search parameter type and they utilize tenant-specific search parameter definitions from the `}<inlineCode parentName=\"p\">{`fhir-persistence/src/test/resources/config`}</inlineCode>{` directory and search for fields on the generated example resources at `}<inlineCode parentName=\"p\">{`fhir-examples/src/main/resources/json/ibm/basic`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`fhir-examples`}</inlineCode>{` module is available on Maven Central `}<a parentName=\"p\" {...{\n        \"href\": \"https://repo1.maven.org/maven2/com/ibm/fhir/fhir-examples/\"\n      }}>{`link`}</a>{`.`}</p>\n    <p>{`For an example of how to extend these tests, see the `}<inlineCode parentName=\"p\">{`com.ibm.fhir.persistence.jdbc.search.test`}</inlineCode>{` package under `}<inlineCode parentName=\"p\">{`fhir-persistence-jdbc/src/test/java`}</inlineCode>{`.`}</p>\n    <p>{`Finally, the IBM FHIR Server contains a number of end-to-end (e2e) integration tests under the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/FHIR/tree/main/fhir-server-test\"\n      }}><inlineCode parentName=\"a\">{`fhir-server-test`}</inlineCode></a>{` module. These tests can be executed against a running server that is configured with your persistence layer to provide further confidence in your implementation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}