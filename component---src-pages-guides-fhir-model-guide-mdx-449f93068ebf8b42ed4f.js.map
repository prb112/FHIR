{"version":3,"sources":["webpack:///./src/pages/guides/FHIRModelGuide.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAQaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kCACA,ikBACA,0TAAyS,0BAAYC,WAAW,KAAvB,eAAzS,yBAA0X,0BAAYA,WAAW,KAAvB,aAA1X,4BAA4c,0BAAYA,WAAW,KAAvB,WAA5c,6BAA6hB,0BAAYA,WAAW,KAAvB,YAA7hB,8LACA,isBACA,sEACA,+GACA,uBAAK,oBAAMA,WAAW,OAAjB,+8BA4BL,8FACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,wBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,qBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,4BACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAEtB,oMACA,gFACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,iBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAApB,yBAEF,+FACA,iHAAgG,0BAAYA,WAAW,KAAvB,eAAhG,YACA,uBAAK,oBAAMA,WAAW,OAAjB,8KAML,0EACA,uBAAK,oBAAMA,WAAW,OAAjB,oTAQL,kFACA,uBAAK,oBAAMA,WAAW,OAAjB,uMAML,4BAAW,0BAAYA,WAAW,KAAvB,iBAAX,uDAA4H,0BAAYA,WAAW,KAAvB,0BAA5H,oBACA,uBAAK,oBAAMA,WAAW,OAAjB,mIAGL,wDACA,6OAA4N,0BAAYA,WAAW,KAAvB,iBAA5N,WACA,uBAAK,oBAAMA,WAAW,OAAjB,0PAUL,gFACA,uBAAK,oBAAMA,WAAW,OAAjB,kQAIL,4BAAW,0BAAYA,WAAW,KAAvB,qBAAX,mBAA4F,0BAAYA,WAAW,KAAvB,gBAA5F,uCAA4L,0BAAYA,WAAW,KAAvB,gBAA5L,uGAA4V,0BAAYA,WAAW,KAAvB,qBAA5V,OAKJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-fhir-model-guide-mdx-449f93068ebf8b42ed4f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/FHIR/FHIR/fhir/docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Overview`}</h2>\n    <p>{`The FHIR model component provides Java APIs for parsing, building, generating and validating FHIR resources. Java model classes that represent FHIR resources and data types are generated directly from the structure definitions distributed with the spec. All model objects are thread-safe and immutable. Each model class implements the Java builder pattern (Effective Java, Joshua Bloch) and the visitor pattern (GoF). The classes also implement Java equals, hashCode and toString methods. All date/time processing is done using the Java 8 time library.`}</p>\n    <p>{`Many of the data type classes include additional factory methods to facilitate object construction for common use cases. The model includes generated Javadoc comments complete with excerpts taken directly from the specification. Model classes also include Java annotations for constraints (`}<inlineCode parentName=\"p\">{`@Constraint`}</inlineCode>{`), required elements (`}<inlineCode parentName=\"p\">{`@Required`}</inlineCode>{`), choice element types (`}<inlineCode parentName=\"p\">{`@Choice`}</inlineCode>{`) and value set bindings (`}<inlineCode parentName=\"p\">{`@Binding`}</inlineCode>{`). Value set bindings are implemented using Code subclasses with constant fields and nested enumerations. Backbone elements are implemented as Java nested classes to keep them organized.`}</p>\n    <p>{`All schema-level (structure, cardinality, value domain) and global (empty resource, empty element) constraint validation is happens during object construction. This means that it is virtually impossible to build a schema invalid FHIR resource using the APIs. Additional constraint validation (invariants, profile, terminology) is performed using the FHIRValidator class. FHIRParser and FHIRGenerator classes are used to parse and generate both JSON and XML formats. FHIRPathEvaluator is a FHIRPath evaluation engine built on an ANTLR4 generated parser. It implements are large portion of the FHIRPath specification and is used for validation and search parameter value extraction.`}</p>\n    <h2>{`Building a Resource using the FHIR Model API`}</h2>\n    <p>{`The FHIR model API implements the Builder pattern for constructing Resource instances.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Observation bodyWeight = Observation.builder()\n    .meta(Meta.builder()\n        .profile(Canonical.of(\"http://hl7.org/fhir/StructureDefinition/bodyweight\"))\n        .build())\n    .status(ObservationStatus.FINAL)\n    .effective(DateTime.builder()\n        .value(\"2019-01-01\")\n        .build())\n    .category(CodeableConcept.builder()\n        .coding(Coding.builder()\n            .system(Uri.of(\"http://terminology.hl7.org/CodeSystem/observation-category\"))\n            .code(Code.of(\"vital-signs\"))\n            .build())\n        .build())\n    .code(CodeableConcept.builder()\n        .coding(Coding.builder()\n            .system(Uri.of(\"http://loinc.org\"))\n            .code(Code.of(\"29463-7\"))\n            .build())\n        .build())\n    .value(Quantity.builder()\n        .value(Decimal.of(200))\n        .system(Uri.of(\"http://unitsofmeasure.org\"))\n        .code(Code.of(\"[lb_av]\"))\n        .unit(string(\"lbs\"))\n        .build())\n    .build();\n`}</code></pre>\n    <p>{`In the example above, a number of different builder classes are used:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Observation.Builder`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DateTime.Builder`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CodeableConcept.Builder`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Quantity.Builder`}</inlineCode></li>\n    </ul>\n    <p>{`Every type in the model that represents a FHIR resource or element has a corresponding nested, static Builder class used for constructing thread-safe, immutable instances.`}</p>\n    <p>{`Several static factory / utility methods are also used:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Canonical.of(...)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Uri.of(...)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Code.of(...)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`String.string(...)`}</inlineCode>{` (via static import)`}</li>\n    </ul>\n    <p>{`Many of the primitive data types contain this type of “helper” method.`}</p>\n    <p>{`Fields from an immutable model object may be copied back into a builder object using the `}<inlineCode parentName=\"p\">{`toBuilder()`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`bodyWeight = bodyWeight.toBuilder()\n    .value(bodyWeight.getValue().as(Quantity.class).toBuilder()\n        .value(Decimal.of(210))\n        .build())\n    .build();\n`}</code></pre>\n    <h2>{`Parsing a Resource from an InputStream or Reader`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// Parse from InputStream\nInputStream in = getInputStream(\"JSON/bodyweight.json\");\nObservation observation = FHIRParser.parser(Format.JSON).parse(in);\n\n// Parse from Reader\nReader reader = getReader(\"JSON/bodyweight.json\");\nObservation observation = FHIRParser.parser(Format.JSON).parse(reader);\n`}</code></pre>\n    <h2>{`Generating JSON and XML formats from a Resource instance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`// Generate JSON format\nFHIRGenerator.generator(Format.JSON).generate(bodyWeight, System.out);\n\n// Generate XML format\nFHIRGenerator.generator(Format.XML).generate(bodyWeight, System.out);\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`FHIRGenerator`}</inlineCode>{` interface has a separate factory method that takes `}<inlineCode parentName=\"p\">{`boolean prettyPrinting`}</inlineCode>{` as a parameter:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// Generate JSON format (with pretty printing)\nFHIRGenerator.generator(Format.JSON, true).generate(bodyWeight, System.out);\n`}</code></pre>\n    <h2>{`Validating a Resource instance`}</h2>\n    <p>{`Schema-level validation occurs during object construction. This includes validation of cardinality constraints and value domains. Additional validation of constraints specified in the model is performed using the `}<inlineCode parentName=\"p\">{`FHIRValidator`}</inlineCode>{` class.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Observation observation = getObservation();\n\nList<Issue> issues = FHIRValidator.validator().validate(observation);\n\nfor (Issue issue : issues) {\n    if (IssueSeverity.ERROR.equals(issue.getSeverity())) {\n        // handle error\n    }\n}\n`}</code></pre>\n    <h2>{`Evaluating FHIRPath expressions on a Resource instance`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`EvaluationContext evaluationContext = new EvaluationContext(bodyWeight);\nCollection<FHIRPathNode> result = FHIRPathEvaluator.evaluator().evaluate(evaluationContext, \"Observation.value.as(Quantity).value >= 200\");\nassert(FHIRPathUtil.isTrue(result));\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`EvaluationContext`}</inlineCode>{` class builds a `}<inlineCode parentName=\"p\">{`FHIRPathTree`}</inlineCode>{` from a FHIR resource or element. A `}<inlineCode parentName=\"p\">{`FHIRPathTree`}</inlineCode>{` is a tree of labeled nodes that wrap FHIR elements and are used by the FHIRPath evaluation engine (`}<inlineCode parentName=\"p\">{`FHIRPathEvaluator`}</inlineCode>{`).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}