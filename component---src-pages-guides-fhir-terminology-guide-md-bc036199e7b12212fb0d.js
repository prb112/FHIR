(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{jIPd:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return p})),a.d(t,"default",(function(){return l}));var r=a("wx14"),n=a("zLVn"),o=(a("q1tI"),a("7ljp")),i=a("013z"),p=(a("qKvR"),{}),m={_frontmatter:p},c=i.a;function l(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)(c,Object(r.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Overview"),Object(o.b)("p",null,"The IBM FHIR Server Terminology module (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/fhir-term"},"fhir-term"),") provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using ",Object(o.b)("inlineCode",{parentName:"p"},"CodeSystem"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ValueSet"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"ConceptMap")," resources that have been made available through the FHIR registry module (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/fhir-registry"},"fhir-registry"),")."),Object(o.b)("h2",null,"FHIR Terminology Service Provider Interface (SPI)"),Object(o.b)("p",null,"The FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for ",Object(o.b)("inlineCode",{parentName:"p"},"closure"),", ",Object(o.b)("inlineCode",{parentName:"p"},"getConcept"),", ",Object(o.b)("inlineCode",{parentName:"p"},"getConcepts"),", ",Object(o.b)("inlineCode",{parentName:"p"},"hasConcept"),", ",Object(o.b)("inlineCode",{parentName:"p"},"isSupported")," and ",Object(o.b)("inlineCode",{parentName:"p"},"subsumes"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"public interface FHIRTermServiceProvider {\n    Set<Concept> closure(CodeSystem codeSystem, Code code);\n    Concept getConcept(CodeSystem codeSystem, Code code);\n    Set<Concept> getConcepts(CodeSystem codeSystem);\n    Set<Concept> getConcepts(CodeSystem codeSystem, List<Filter> filters);\n    boolean hasConcept(CodeSystem codeSystem, Code code);\n    boolean isSupported(CodeSystem codeSystem);\n    boolean subsumes(CodeSystem codeSystem, Code codeA, Code codeB);\n}\n")),Object(o.b)("h2",null,"Default Terminology Service Provider Implementation"),Object(o.b)("p",null,"The default implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"FHIRTermServiceProvider")," (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/DefaultTermServiceProvider.java"},"DefaultTermServiceProvider"),") leverages terminology resources (",Object(o.b)("inlineCode",{parentName:"p"},"CodeSystem"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ValueSet"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"ConceptMap"),") that have been made available through the FHIR registry module (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/fhir-registry"},"fhir-registry"),"). It supports ",Object(o.b)("inlineCode",{parentName:"p"},"CodeSystem")," resources with ",Object(o.b)("em",{parentName:"p"},"complete")," content (",Object(o.b)("inlineCode",{parentName:"p"},"CodeSystem.content = 'complete'"),") and ",Object(o.b)("inlineCode",{parentName:"p"},"ValueSet")," resources that reference ",Object(o.b)("inlineCode",{parentName:"p"},"CodeSystem")," resources that have complete content."),Object(o.b)("h2",null,"FHIR Terminology Service Singleton facade"),Object(o.b)("p",null,"The FHIR Terminology Service Singleton facade (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java"},"FHIRTermService"),") loads a list of ",Object(o.b)("inlineCode",{parentName:"p"},"FHIRTermServiceProvider")," instances from the ServiceLoader and includes an instance of the ",Object(o.b)("inlineCode",{parentName:"p"},"DefaultTermServiceProvider"),". Client code (Java) that requires terminology capabilities should access them via the ",Object(o.b)("inlineCode",{parentName:"p"},"FHIRTermService")," singleton facade. Here is an example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'ValueSet valueSet = ValueSetSupport.getValueSet("http://ibm.com/fhir/ValueSet/vs1");\nCoding coding = Coding.builder()\n        .system(Uri.of("http://ibm.com/fhir/CodeSystem/cs1"))\n        .version(string("1.0.0"))\n        .code(Code.of("a")\n        .display(string("concept a")\n        .build();\nValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n')),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"expand "),", ",Object(o.b)("inlineCode",{parentName:"p"},"lookup"),", ",Object(o.b)("inlineCode",{parentName:"p"},"validateCode")," (CodeSystem), ",Object(o.b)("inlineCode",{parentName:"p"},"validateCode")," (ValueSet), and ",Object(o.b)("inlineCode",{parentName:"p"},"translate")," methods support the passing of optional parameters (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"ExpansionParameters"),", ",Object(o.b)("inlineCode",{parentName:"p"},"LookupParameters"),", etc.). Many of the methods also return an “outcome” object. These “parameter” and “outcome” objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: ",Object(o.b)("a",{parentName:"p",href:"http://hl7.org/fhir/terminology-module.html"},"http://hl7.org/fhir/terminology-module.html"),"."),Object(o.b)("p",null,"The “parameter” objects can be created from a ",Object(o.b)("inlineCode",{parentName:"p"},"Parameters")," resource:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"Parameters parameters = ...;\nExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n")),Object(o.b)("p",null,"The “outcome” objects can be converted to a Parameters resource:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},"LookupOutcome outcome = ...;\nParameters parameters = outcome.toParameters();\n")),Object(o.b)("p",null,"This bridge to/from the ",Object(o.b)("inlineCode",{parentName:"p"},"Parameters")," resource enables implementers to build both native implementations of the SPI and implementations that access an existing external terminology service."),Object(o.b)("p",null,"NOTE: The current implementation does not support for optional parameters (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"ExpansionParameters"),", ",Object(o.b)("inlineCode",{parentName:"p"},"TranslationParameters"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ValidationParameters"),", etc.)."),Object(o.b)("h2",null,"FHIR Server Terminology Extended Operations"),Object(o.b)("p",null,"The FHIR terminology operations module (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/operation/fhir-operation-term"},"fhir-operation-term"),") connects the FHIR Server REST layer to the FHIR terminology module via the operations framework. This module implements the terminology operations as defined in the FHIR terminology service specification ",Object(o.b)("a",{parentName:"p",href:"http://hl7.org/fhir/terminology-service.html"},"http://hl7.org/fhir/terminology-service.html"),". One exception is the ",Object(o.b)("inlineCode",{parentName:"p"},"$closure")," operation. The ",Object(o.b)("inlineCode",{parentName:"p"},"$closure")," operation is experimental and does not support versioning or replay. This means that the ",Object(o.b)("inlineCode",{parentName:"p"},"$closure")," operation will always return the set of closure table entries for the given input concepts and does not store client state."),Object(o.b)("h2",null,"FHIRPath Terminology Functions"),Object(o.b)("p",null,"The FHIRPath module (",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/fhir-path"},"fhir-path"),") has been updated to support implementations of the draft FHIRPath terminology function specification: ",Object(o.b)("a",{parentName:"p",href:"http://hl7.org/fhir/fhirpath.html#txapi"},"http://hl7.org/fhir/fhirpath.html#txapi"),". Support for the following functions (accessed through the ",Object(o.b)("inlineCode",{parentName:"p"},"%terminologies")," constant) has been implemented:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"%terminologies.expand(valueSet, params) : ValueSet\n%terminologies.lookup(coded, params) : Parameters\n%terminologies.validateVS(valueSet, coded, params) : Parameters\n%terminologies.validateCS(codeSystem, coded, params) : Parameters\n%terminologies.subsumes(system, coded1, coded2, params) : code\n%terminologies.translate(conceptMap, code, params) : Parameters\n")),Object(o.b)("p",null,"Here is the same example from above but going through the FHIRPath evaluator:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-java"},'Coding coding = Coding.builder()\n        .system(Uri.of("http://ibm.com/fhir/CodeSystem/cs1"))\n        .version(string("1.0.0"))\n        .code(Code.of("a")\n        .display(string("concept a")\n        .build();\nCollection<FHIRPathNode> initialContext = singleton(FHIRPathElementNode.elementNode(coding));\nFHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\nCollection<FHIRPathNode> result = evaluator.evaluate("%terminologies.validateCode(\'http://ibm.com/fhir/ValueSet/vs1\', %context)");\n\n')),Object(o.b)("p",null,"Additionally, the FHIRPath functions ",Object(o.b)("inlineCode",{parentName:"p"},"subsumedBy")," and ",Object(o.b)("inlineCode",{parentName:"p"},"subsumes")," have been implemented per: ",Object(o.b)("a",{parentName:"p",href:"http://hl7.org/fhir/fhirpath.html#functions"},"http://hl7.org/fhir/fhirpath.html#functions")),Object(o.b)("h2",null,"Graph Terminology Service Provider Implementation (experimental)"),Object(o.b)("p",null,"The FHIR term graph module ",Object(o.b)("a",{parentName:"p",href:"https://github.com/IBM/FHIR/tree/main/fhir-term-graph"},"fhir-term-graph")," provides an implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"FHIRTermServiceProvider")," that is backed by a graph database (",Object(o.b)("a",{parentName:"p",href:"https://janusgraph.org"},"JanusGraph"),"). The module also contains term graph loaders for SNOMED-CT Release Format 2 (RF2) files (SnomedTermGraphLoader), UMLS Rich Release Format (RRF) files (UMLSTermGraphLoader), and FHIR CodeSystem resources (CodeSystemTermGraphLoader). The GraphTermServiceProvider can be enabled through the ",Object(o.b)("inlineCode",{parentName:"p"},"fhir-server-config.json")," file per the configuration properties specified in the ",Object(o.b)("a",{parentName:"p",href:"https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference"},"FHIR Server User’s Guide"),". Example configuration:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-json"},'        "term": {\n            "graphTermServiceProvider": {\n                "enabled": true,\n                "timeLimit": 30000,\n                "configuration": {\n                    "storage.backend": "cql",\n                    "storage.hostname": "127.0.0.1",\n                    "index.search.backend": "elasticsearch",\n                    "index.search.hostname": "127.0.0.1:9200",\n                    "storage.read-only": true,\n                    "query.batch": true,\n                    "query.batch-property-prefetch": true,\n                    "query.fast-property": true\n                }\n            }\n        }\n')))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-fhir-terminology-guide-md-bc036199e7b12212fb0d.js.map