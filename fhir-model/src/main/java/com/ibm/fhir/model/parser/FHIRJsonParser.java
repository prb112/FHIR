/*
 * (C) Copyright IBM Corp. 2019, 2021
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.ibm.fhir.model.parser;

import static com.ibm.fhir.model.util.JsonSupport.checkForUnrecognizedElements;
import static com.ibm.fhir.model.util.JsonSupport.getJsonArray;
import static com.ibm.fhir.model.util.JsonSupport.getJsonValue;
import static com.ibm.fhir.model.util.JsonSupport.getResourceType;
import static com.ibm.fhir.model.util.JsonSupport.nonClosingInputStream;
import static com.ibm.fhir.model.util.JsonSupport.nonClosingReader;
import static com.ibm.fhir.model.util.ModelSupport.getChoiceElementName;

import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.Stack;
import java.util.StringJoiner;

import javax.annotation.Generated;
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonNumber;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonReaderFactory;
import javax.json.JsonString;
import javax.json.JsonValue;

import com.ibm.fhir.model.parser.FHIRParser;
import com.ibm.fhir.model.parser.FHIRAbstractParser;
import com.ibm.fhir.model.parser.exception.FHIRParserException;
import com.ibm.fhir.model.resource.*;
import com.ibm.fhir.model.type.*;
import com.ibm.fhir.model.type.code.*;
import com.ibm.fhir.model.type.Boolean;
import com.ibm.fhir.model.type.Integer;
import com.ibm.fhir.model.type.String;
import com.ibm.fhir.model.util.ElementFilter;

import net.jcip.annotations.NotThreadSafe;

@NotThreadSafe
@Generated("com.ibm.fhir.tools.CodeGenerator")
public class FHIRJsonParser extends FHIRAbstractParser {
    public static boolean DEBUG = false;
    private static final JsonReaderFactory JSON_READER_FACTORY = Json.createReaderFactory(null);

    private final Stack<java.lang.String> stack = new Stack<>();

    FHIRJsonParser() {
        // only visible to subclasses or classes/interfaces in the same package (e.g. FHIRParser)
    }

    @Override
    public <T extends Resource> T parse(InputStream in) throws FHIRParserException {
        return parseAndFilter(in, null);
    }

    public <T extends Resource> T parseAndFilter(InputStream in, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try (JsonReader jsonReader = JSON_READER_FACTORY.createReader(nonClosingInputStream(in), StandardCharsets.UTF_8)) {
            JsonObject jsonObject = jsonReader.readObject();
            return parseAndFilter(jsonObject, elementsToInclude);
        } catch (FHIRParserException e) {
            throw e;
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @Override
    public <T extends Resource> T parse(Reader reader) throws FHIRParserException {
        return parseAndFilter(reader, null);
    }

    public <T extends Resource> T parseAndFilter(Reader reader, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try (JsonReader jsonReader = JSON_READER_FACTORY.createReader(nonClosingReader(reader))) {
            JsonObject jsonObject = jsonReader.readObject();
            return parseAndFilter(jsonObject, elementsToInclude);
        } catch (FHIRParserException e) {
            throw e;
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    public <T extends Resource> T parse(JsonObject jsonObject) throws FHIRParserException {
        return parseAndFilter(jsonObject, null);
    }

    @SuppressWarnings("unchecked")
    public <T extends Resource> T parseAndFilter(JsonObject jsonObject, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try {
            reset();
            Class<?> resourceType = getResourceType(jsonObject);
            if (elementsToInclude != null) {
                ElementFilter elementFilter = new ElementFilter(resourceType, elementsToInclude);
                jsonObject = elementFilter.apply(jsonObject);
            }
            return (T) parseResource(resourceType.getSimpleName(), jsonObject, -1);
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    private void reset() {
        stack.clear();
    }

    @Override
    public boolean isPropertySupported(java.lang.String name) {
        if (FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS.equals(name)) {
            return true;
        }
        return false;
    }

    private Resource parseResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        Class<?> resourceType = getResourceType(jsonObject);
        switch (resourceType.getSimpleName()) {
        case "Account":
            return parseAccount(elementName, jsonObject, elementIndex);
        case "ActivityDefinition":
            return parseActivityDefinition(elementName, jsonObject, elementIndex);
        case "AdverseEvent":
            return parseAdverseEvent(elementName, jsonObject, elementIndex);
        case "AllergyIntolerance":
            return parseAllergyIntolerance(elementName, jsonObject, elementIndex);
        case "Appointment":
            return parseAppointment(elementName, jsonObject, elementIndex);
        case "AppointmentResponse":
            return parseAppointmentResponse(elementName, jsonObject, elementIndex);
        case "AuditEvent":
            return parseAuditEvent(elementName, jsonObject, elementIndex);
        case "Basic":
            return parseBasic(elementName, jsonObject, elementIndex);
        case "Binary":
            return parseBinary(elementName, jsonObject, elementIndex);
        case "BiologicallyDerivedProduct":
            return parseBiologicallyDerivedProduct(elementName, jsonObject, elementIndex);
        case "BodyStructure":
            return parseBodyStructure(elementName, jsonObject, elementIndex);
        case "Bundle":
            return parseBundle(elementName, jsonObject, elementIndex);
        case "CapabilityStatement":
            return parseCapabilityStatement(elementName, jsonObject, elementIndex);
        case "CarePlan":
            return parseCarePlan(elementName, jsonObject, elementIndex);
        case "CareTeam":
            return parseCareTeam(elementName, jsonObject, elementIndex);
        case "CatalogEntry":
            return parseCatalogEntry(elementName, jsonObject, elementIndex);
        case "ChargeItem":
            return parseChargeItem(elementName, jsonObject, elementIndex);
        case "ChargeItemDefinition":
            return parseChargeItemDefinition(elementName, jsonObject, elementIndex);
        case "Claim":
            return parseClaim(elementName, jsonObject, elementIndex);
        case "ClaimResponse":
            return parseClaimResponse(elementName, jsonObject, elementIndex);
        case "ClinicalImpression":
            return parseClinicalImpression(elementName, jsonObject, elementIndex);
        case "CodeSystem":
            return parseCodeSystem(elementName, jsonObject, elementIndex);
        case "Communication":
            return parseCommunication(elementName, jsonObject, elementIndex);
        case "CommunicationRequest":
            return parseCommunicationRequest(elementName, jsonObject, elementIndex);
        case "CompartmentDefinition":
            return parseCompartmentDefinition(elementName, jsonObject, elementIndex);
        case "Composition":
            return parseComposition(elementName, jsonObject, elementIndex);
        case "ConceptMap":
            return parseConceptMap(elementName, jsonObject, elementIndex);
        case "Condition":
            return parseCondition(elementName, jsonObject, elementIndex);
        case "Consent":
            return parseConsent(elementName, jsonObject, elementIndex);
        case "Contract":
            return parseContract(elementName, jsonObject, elementIndex);
        case "Coverage":
            return parseCoverage(elementName, jsonObject, elementIndex);
        case "CoverageEligibilityRequest":
            return parseCoverageEligibilityRequest(elementName, jsonObject, elementIndex);
        case "CoverageEligibilityResponse":
            return parseCoverageEligibilityResponse(elementName, jsonObject, elementIndex);
        case "DetectedIssue":
            return parseDetectedIssue(elementName, jsonObject, elementIndex);
        case "Device":
            return parseDevice(elementName, jsonObject, elementIndex);
        case "DeviceDefinition":
            return parseDeviceDefinition(elementName, jsonObject, elementIndex);
        case "DeviceMetric":
            return parseDeviceMetric(elementName, jsonObject, elementIndex);
        case "DeviceRequest":
            return parseDeviceRequest(elementName, jsonObject, elementIndex);
        case "DeviceUseStatement":
            return parseDeviceUseStatement(elementName, jsonObject, elementIndex);
        case "DiagnosticReport":
            return parseDiagnosticReport(elementName, jsonObject, elementIndex);
        case "DocumentManifest":
            return parseDocumentManifest(elementName, jsonObject, elementIndex);
        case "DocumentReference":
            return parseDocumentReference(elementName, jsonObject, elementIndex);
        case "EffectEvidenceSynthesis":
            return parseEffectEvidenceSynthesis(elementName, jsonObject, elementIndex);
        case "Encounter":
            return parseEncounter(elementName, jsonObject, elementIndex);
        case "Endpoint":
            return parseEndpoint(elementName, jsonObject, elementIndex);
        case "EnrollmentRequest":
            return parseEnrollmentRequest(elementName, jsonObject, elementIndex);
        case "EnrollmentResponse":
            return parseEnrollmentResponse(elementName, jsonObject, elementIndex);
        case "EpisodeOfCare":
            return parseEpisodeOfCare(elementName, jsonObject, elementIndex);
        case "EventDefinition":
            return parseEventDefinition(elementName, jsonObject, elementIndex);
        case "Evidence":
            return parseEvidence(elementName, jsonObject, elementIndex);
        case "EvidenceVariable":
            return parseEvidenceVariable(elementName, jsonObject, elementIndex);
        case "ExampleScenario":
            return parseExampleScenario(elementName, jsonObject, elementIndex);
        case "ExplanationOfBenefit":
            return parseExplanationOfBenefit(elementName, jsonObject, elementIndex);
        case "FamilyMemberHistory":
            return parseFamilyMemberHistory(elementName, jsonObject, elementIndex);
        case "Flag":
            return parseFlag(elementName, jsonObject, elementIndex);
        case "Goal":
            return parseGoal(elementName, jsonObject, elementIndex);
        case "GraphDefinition":
            return parseGraphDefinition(elementName, jsonObject, elementIndex);
        case "Group":
            return parseGroup(elementName, jsonObject, elementIndex);
        case "GuidanceResponse":
            return parseGuidanceResponse(elementName, jsonObject, elementIndex);
        case "HealthcareService":
            return parseHealthcareService(elementName, jsonObject, elementIndex);
        case "ImagingStudy":
            return parseImagingStudy(elementName, jsonObject, elementIndex);
        case "Immunization":
            return parseImmunization(elementName, jsonObject, elementIndex);
        case "ImmunizationEvaluation":
            return parseImmunizationEvaluation(elementName, jsonObject, elementIndex);
        case "ImmunizationRecommendation":
            return parseImmunizationRecommendation(elementName, jsonObject, elementIndex);
        case "ImplementationGuide":
            return parseImplementationGuide(elementName, jsonObject, elementIndex);
        case "InsurancePlan":
            return parseInsurancePlan(elementName, jsonObject, elementIndex);
        case "Invoice":
            return parseInvoice(elementName, jsonObject, elementIndex);
        case "Library":
            return parseLibrary(elementName, jsonObject, elementIndex);
        case "Linkage":
            return parseLinkage(elementName, jsonObject, elementIndex);
        case "List":
            return parseList(elementName, jsonObject, elementIndex);
        case "Location":
            return parseLocation(elementName, jsonObject, elementIndex);
        case "Measure":
            return parseMeasure(elementName, jsonObject, elementIndex);
        case "MeasureReport":
            return parseMeasureReport(elementName, jsonObject, elementIndex);
        case "Media":
            return parseMedia(elementName, jsonObject, elementIndex);
        case "Medication":
            return parseMedication(elementName, jsonObject, elementIndex);
        case "MedicationAdministration":
            return parseMedicationAdministration(elementName, jsonObject, elementIndex);
        case "MedicationDispense":
            return parseMedicationDispense(elementName, jsonObject, elementIndex);
        case "MedicationKnowledge":
            return parseMedicationKnowledge(elementName, jsonObject, elementIndex);
        case "MedicationRequest":
            return parseMedicationRequest(elementName, jsonObject, elementIndex);
        case "MedicationStatement":
            return parseMedicationStatement(elementName, jsonObject, elementIndex);
        case "MedicinalProduct":
            return parseMedicinalProduct(elementName, jsonObject, elementIndex);
        case "MedicinalProductAuthorization":
            return parseMedicinalProductAuthorization(elementName, jsonObject, elementIndex);
        case "MedicinalProductContraindication":
            return parseMedicinalProductContraindication(elementName, jsonObject, elementIndex);
        case "MedicinalProductIndication":
            return parseMedicinalProductIndication(elementName, jsonObject, elementIndex);
        case "MedicinalProductIngredient":
            return parseMedicinalProductIngredient(elementName, jsonObject, elementIndex);
        case "MedicinalProductInteraction":
            return parseMedicinalProductInteraction(elementName, jsonObject, elementIndex);
        case "MedicinalProductManufactured":
            return parseMedicinalProductManufactured(elementName, jsonObject, elementIndex);
        case "MedicinalProductPackaged":
            return parseMedicinalProductPackaged(elementName, jsonObject, elementIndex);
        case "MedicinalProductPharmaceutical":
            return parseMedicinalProductPharmaceutical(elementName, jsonObject, elementIndex);
        case "MedicinalProductUndesirableEffect":
            return parseMedicinalProductUndesirableEffect(elementName, jsonObject, elementIndex);
        case "MessageDefinition":
            return parseMessageDefinition(elementName, jsonObject, elementIndex);
        case "MessageHeader":
            return parseMessageHeader(elementName, jsonObject, elementIndex);
        case "MolecularSequence":
            return parseMolecularSequence(elementName, jsonObject, elementIndex);
        case "NamingSystem":
            return parseNamingSystem(elementName, jsonObject, elementIndex);
        case "NutritionOrder":
            return parseNutritionOrder(elementName, jsonObject, elementIndex);
        case "Observation":
            return parseObservation(elementName, jsonObject, elementIndex);
        case "ObservationDefinition":
            return parseObservationDefinition(elementName, jsonObject, elementIndex);
        case "OperationDefinition":
            return parseOperationDefinition(elementName, jsonObject, elementIndex);
        case "OperationOutcome":
            return parseOperationOutcome(elementName, jsonObject, elementIndex);
        case "Organization":
            return parseOrganization(elementName, jsonObject, elementIndex);
        case "OrganizationAffiliation":
            return parseOrganizationAffiliation(elementName, jsonObject, elementIndex);
        case "Parameters":
            return parseParameters(elementName, jsonObject, elementIndex);
        case "Patient":
            return parsePatient(elementName, jsonObject, elementIndex);
        case "PaymentNotice":
            return parsePaymentNotice(elementName, jsonObject, elementIndex);
        case "PaymentReconciliation":
            return parsePaymentReconciliation(elementName, jsonObject, elementIndex);
        case "Person":
            return parsePerson(elementName, jsonObject, elementIndex);
        case "PlanDefinition":
            return parsePlanDefinition(elementName, jsonObject, elementIndex);
        case "Practitioner":
            return parsePractitioner(elementName, jsonObject, elementIndex);
        case "PractitionerRole":
            return parsePractitionerRole(elementName, jsonObject, elementIndex);
        case "Procedure":
            return parseProcedure(elementName, jsonObject, elementIndex);
        case "Provenance":
            return parseProvenance(elementName, jsonObject, elementIndex);
        case "Questionnaire":
            return parseQuestionnaire(elementName, jsonObject, elementIndex);
        case "QuestionnaireResponse":
            return parseQuestionnaireResponse(elementName, jsonObject, elementIndex);
        case "RelatedPerson":
            return parseRelatedPerson(elementName, jsonObject, elementIndex);
        case "RequestGroup":
            return parseRequestGroup(elementName, jsonObject, elementIndex);
        case "ResearchDefinition":
            return parseResearchDefinition(elementName, jsonObject, elementIndex);
        case "ResearchElementDefinition":
            return parseResearchElementDefinition(elementName, jsonObject, elementIndex);
        case "ResearchStudy":
            return parseResearchStudy(elementName, jsonObject, elementIndex);
        case "ResearchSubject":
            return parseResearchSubject(elementName, jsonObject, elementIndex);
        case "RiskAssessment":
            return parseRiskAssessment(elementName, jsonObject, elementIndex);
        case "RiskEvidenceSynthesis":
            return parseRiskEvidenceSynthesis(elementName, jsonObject, elementIndex);
        case "Schedule":
            return parseSchedule(elementName, jsonObject, elementIndex);
        case "SearchParameter":
            return parseSearchParameter(elementName, jsonObject, elementIndex);
        case "ServiceRequest":
            return parseServiceRequest(elementName, jsonObject, elementIndex);
        case "Slot":
            return parseSlot(elementName, jsonObject, elementIndex);
        case "Specimen":
            return parseSpecimen(elementName, jsonObject, elementIndex);
        case "SpecimenDefinition":
            return parseSpecimenDefinition(elementName, jsonObject, elementIndex);
        case "StructureDefinition":
            return parseStructureDefinition(elementName, jsonObject, elementIndex);
        case "StructureMap":
            return parseStructureMap(elementName, jsonObject, elementIndex);
        case "Subscription":
            return parseSubscription(elementName, jsonObject, elementIndex);
        case "Substance":
            return parseSubstance(elementName, jsonObject, elementIndex);
        case "SubstanceNucleicAcid":
            return parseSubstanceNucleicAcid(elementName, jsonObject, elementIndex);
        case "SubstancePolymer":
            return parseSubstancePolymer(elementName, jsonObject, elementIndex);
        case "SubstanceProtein":
            return parseSubstanceProtein(elementName, jsonObject, elementIndex);
        case "SubstanceReferenceInformation":
            return parseSubstanceReferenceInformation(elementName, jsonObject, elementIndex);
        case "SubstanceSourceMaterial":
            return parseSubstanceSourceMaterial(elementName, jsonObject, elementIndex);
        case "SubstanceSpecification":
            return parseSubstanceSpecification(elementName, jsonObject, elementIndex);
        case "SupplyDelivery":
            return parseSupplyDelivery(elementName, jsonObject, elementIndex);
        case "SupplyRequest":
            return parseSupplyRequest(elementName, jsonObject, elementIndex);
        case "Task":
            return parseTask(elementName, jsonObject, elementIndex);
        case "TerminologyCapabilities":
            return parseTerminologyCapabilities(elementName, jsonObject, elementIndex);
        case "TestReport":
            return parseTestReport(elementName, jsonObject, elementIndex);
        case "TestScript":
            return parseTestScript(elementName, jsonObject, elementIndex);
        case "ValueSet":
            return parseValueSet(elementName, jsonObject, elementIndex);
        case "VerificationResult":
            return parseVerificationResult(elementName, jsonObject, elementIndex);
        case "VisionPrescription":
            return parseVisionPrescription(elementName, jsonObject, elementIndex);
        }
        return null;
    }

    private Account parseAccount(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Account.class, jsonObject);
        }
        Account.Builder builder = Account.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((AccountStatus) parseString(AccountStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.servicePeriod(parsePeriod("servicePeriod", getJsonValue(jsonObject, "servicePeriod", JsonObject.class), -1));
        JsonArray coverageArray = getJsonArray(jsonObject, "coverage");
        if (coverageArray != null) {
            for (int i = 0; i < coverageArray.size(); i++) {
                builder.coverage(parseAccountCoverage("coverage", coverageArray.getJsonObject(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray guarantorArray = getJsonArray(jsonObject, "guarantor");
        if (guarantorArray != null) {
            for (int i = 0; i < guarantorArray.size(); i++) {
                builder.guarantor(parseAccountGuarantor("guarantor", guarantorArray.getJsonObject(i), i));
            }
        }
        builder.partOf(parseReference("partOf", getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Account.Coverage parseAccountCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Account.Coverage.class, jsonObject);
        }
        Account.Coverage.Builder builder = Account.Coverage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        builder.priority((PositiveInt) parseInteger(PositiveInt.builder(), "priority", getJsonValue(jsonObject, "priority", JsonNumber.class), jsonObject.get("_priority"), -1));
        stackPop();
        return builder.build();
    }

    private Account.Guarantor parseAccountGuarantor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Account.Guarantor.class, jsonObject);
        }
        Account.Guarantor.Builder builder = Account.Guarantor.builder();
        parseBackboneElement(builder, jsonObject);
        builder.party(parseReference("party", getJsonValue(jsonObject, "party", JsonObject.class), -1));
        builder.onHold(parseBoolean("onHold", getJsonValue(jsonObject, "onHold", JsonValue.class), jsonObject.get("_onHold"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ActivityDefinition parseActivityDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ActivityDefinition.class, jsonObject);
        }
        ActivityDefinition.Builder builder = ActivityDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray libraryArray = getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonValue(_libraryArray, i), i));
            }
        }
        builder.kind((ActivityDefinitionKind) parseString(ActivityDefinitionKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, Timing.class, DateTime.class, Age.class, Period.class, Range.class, Duration.class));
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseActivityDefinitionParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, Reference.class, CodeableConcept.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray dosageArray = getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                builder.dosage(parseDosage("dosage", dosageArray.getJsonObject(i), i));
            }
        }
        JsonArray bodySiteArray = getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.getJsonObject(i), i));
            }
        }
        JsonArray specimenRequirementArray = getJsonArray(jsonObject, "specimenRequirement");
        if (specimenRequirementArray != null) {
            for (int i = 0; i < specimenRequirementArray.size(); i++) {
                builder.specimenRequirement(parseReference("specimenRequirement", specimenRequirementArray.getJsonObject(i), i));
            }
        }
        JsonArray observationRequirementArray = getJsonArray(jsonObject, "observationRequirement");
        if (observationRequirementArray != null) {
            for (int i = 0; i < observationRequirementArray.size(); i++) {
                builder.observationRequirement(parseReference("observationRequirement", observationRequirementArray.getJsonObject(i), i));
            }
        }
        JsonArray observationResultRequirementArray = getJsonArray(jsonObject, "observationResultRequirement");
        if (observationResultRequirementArray != null) {
            for (int i = 0; i < observationResultRequirementArray.size(); i++) {
                builder.observationResultRequirement(parseReference("observationResultRequirement", observationResultRequirementArray.getJsonObject(i), i));
            }
        }
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray dynamicValueArray = getJsonArray(jsonObject, "dynamicValue");
        if (dynamicValueArray != null) {
            for (int i = 0; i < dynamicValueArray.size(); i++) {
                builder.dynamicValue(parseActivityDefinitionDynamicValue("dynamicValue", dynamicValueArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ActivityDefinition.DynamicValue parseActivityDefinitionDynamicValue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ActivityDefinition.DynamicValue.class, jsonObject);
        }
        ActivityDefinition.DynamicValue.Builder builder = ActivityDefinition.DynamicValue.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.expression(parseExpression("expression", getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ActivityDefinition.Participant parseActivityDefinitionParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ActivityDefinition.Participant.class, jsonObject);
        }
        ActivityDefinition.Participant.Builder builder = ActivityDefinition.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ActivityParticipantType) parseString(ActivityParticipantType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Address parseAddress(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Address.class, jsonObject);
        }
        Address.Builder builder = Address.builder();
        parseElement(builder, jsonObject);
        builder.use((AddressUse) parseString(AddressUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.type((AddressType) parseString(AddressType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray lineArray = getJsonArray(jsonObject, "line", true);
        if (lineArray != null) {
            JsonArray _lineArray = jsonObject.getJsonArray("_line");
            for (int i = 0; i < lineArray.size(); i++) {
                builder.line(parseString("line", lineArray.get(i), getJsonValue(_lineArray, i), i));
            }
        }
        builder.city(parseString("city", getJsonValue(jsonObject, "city", JsonString.class), jsonObject.get("_city"), -1));
        builder.district(parseString("district", getJsonValue(jsonObject, "district", JsonString.class), jsonObject.get("_district"), -1));
        builder.state(parseString("state", getJsonValue(jsonObject, "state", JsonString.class), jsonObject.get("_state"), -1));
        builder.postalCode(parseString("postalCode", getJsonValue(jsonObject, "postalCode", JsonString.class), jsonObject.get("_postalCode"), -1));
        builder.country(parseString("country", getJsonValue(jsonObject, "country", JsonString.class), jsonObject.get("_country"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private AdverseEvent parseAdverseEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AdverseEvent.class, jsonObject);
        }
        AdverseEvent.Builder builder = AdverseEvent.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.actuality((AdverseEventActuality) parseString(AdverseEventActuality.builder(), "actuality", getJsonValue(jsonObject, "actuality", JsonString.class), jsonObject.get("_actuality"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.event(parseCodeableConcept("event", getJsonValue(jsonObject, "event", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.detected(parseDateTime("detected", getJsonValue(jsonObject, "detected", JsonString.class), jsonObject.get("_detected"), -1));
        builder.recordedDate(parseDateTime("recordedDate", getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        JsonArray resultingConditionArray = getJsonArray(jsonObject, "resultingCondition");
        if (resultingConditionArray != null) {
            for (int i = 0; i < resultingConditionArray.size(); i++) {
                builder.resultingCondition(parseReference("resultingCondition", resultingConditionArray.getJsonObject(i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.seriousness(parseCodeableConcept("seriousness", getJsonValue(jsonObject, "seriousness", JsonObject.class), -1));
        builder.severity(parseCodeableConcept("severity", getJsonValue(jsonObject, "severity", JsonObject.class), -1));
        builder.outcome(parseCodeableConcept("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.recorder(parseReference("recorder", getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        JsonArray contributorArray = getJsonArray(jsonObject, "contributor");
        if (contributorArray != null) {
            for (int i = 0; i < contributorArray.size(); i++) {
                builder.contributor(parseReference("contributor", contributorArray.getJsonObject(i), i));
            }
        }
        JsonArray suspectEntityArray = getJsonArray(jsonObject, "suspectEntity");
        if (suspectEntityArray != null) {
            for (int i = 0; i < suspectEntityArray.size(); i++) {
                builder.suspectEntity(parseAdverseEventSuspectEntity("suspectEntity", suspectEntityArray.getJsonObject(i), i));
            }
        }
        JsonArray subjectMedicalHistoryArray = getJsonArray(jsonObject, "subjectMedicalHistory");
        if (subjectMedicalHistoryArray != null) {
            for (int i = 0; i < subjectMedicalHistoryArray.size(); i++) {
                builder.subjectMedicalHistory(parseReference("subjectMedicalHistory", subjectMedicalHistoryArray.getJsonObject(i), i));
            }
        }
        JsonArray referenceDocumentArray = getJsonArray(jsonObject, "referenceDocument");
        if (referenceDocumentArray != null) {
            for (int i = 0; i < referenceDocumentArray.size(); i++) {
                builder.referenceDocument(parseReference("referenceDocument", referenceDocumentArray.getJsonObject(i), i));
            }
        }
        JsonArray studyArray = getJsonArray(jsonObject, "study");
        if (studyArray != null) {
            for (int i = 0; i < studyArray.size(); i++) {
                builder.study(parseReference("study", studyArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdverseEvent.SuspectEntity parseAdverseEventSuspectEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AdverseEvent.SuspectEntity.class, jsonObject);
        }
        AdverseEvent.SuspectEntity.Builder builder = AdverseEvent.SuspectEntity.builder();
        parseBackboneElement(builder, jsonObject);
        builder.instance(parseReference("instance", getJsonValue(jsonObject, "instance", JsonObject.class), -1));
        JsonArray causalityArray = getJsonArray(jsonObject, "causality");
        if (causalityArray != null) {
            for (int i = 0; i < causalityArray.size(); i++) {
                builder.causality(parseAdverseEventSuspectEntityCausality("causality", causalityArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AdverseEvent.SuspectEntity.Causality parseAdverseEventSuspectEntityCausality(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AdverseEvent.SuspectEntity.Causality.class, jsonObject);
        }
        AdverseEvent.SuspectEntity.Causality.Builder builder = AdverseEvent.SuspectEntity.Causality.builder();
        parseBackboneElement(builder, jsonObject);
        builder.assessment(parseCodeableConcept("assessment", getJsonValue(jsonObject, "assessment", JsonObject.class), -1));
        builder.productRelatedness(parseString("productRelatedness", getJsonValue(jsonObject, "productRelatedness", JsonString.class), jsonObject.get("_productRelatedness"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private AllergyIntolerance parseAllergyIntolerance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AllergyIntolerance.class, jsonObject);
        }
        AllergyIntolerance.Builder builder = AllergyIntolerance.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", getJsonValue(jsonObject, "clinicalStatus", JsonObject.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", getJsonValue(jsonObject, "verificationStatus", JsonObject.class), -1));
        builder.type((AllergyIntoleranceType) parseString(AllergyIntoleranceType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category", true);
        if (categoryArray != null) {
            JsonArray _categoryArray = jsonObject.getJsonArray("_category");
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category((AllergyIntoleranceCategory) parseString(AllergyIntoleranceCategory.builder(), "category", categoryArray.get(i), getJsonValue(_categoryArray, i), i));
            }
        }
        builder.criticality((AllergyIntoleranceCriticality) parseString(AllergyIntoleranceCriticality.builder(), "criticality", getJsonValue(jsonObject, "criticality", JsonString.class), jsonObject.get("_criticality"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.recordedDate(parseDateTime("recordedDate", getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        builder.lastOccurrence(parseDateTime("lastOccurrence", getJsonValue(jsonObject, "lastOccurrence", JsonString.class), jsonObject.get("_lastOccurrence"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray reactionArray = getJsonArray(jsonObject, "reaction");
        if (reactionArray != null) {
            for (int i = 0; i < reactionArray.size(); i++) {
                builder.reaction(parseAllergyIntoleranceReaction("reaction", reactionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AllergyIntolerance.Reaction parseAllergyIntoleranceReaction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AllergyIntolerance.Reaction.class, jsonObject);
        }
        AllergyIntolerance.Reaction.Builder builder = AllergyIntolerance.Reaction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseCodeableConcept("substance", getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        JsonArray manifestationArray = getJsonArray(jsonObject, "manifestation");
        if (manifestationArray != null) {
            for (int i = 0; i < manifestationArray.size(); i++) {
                builder.manifestation(parseCodeableConcept("manifestation", manifestationArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.onset(parseDateTime("onset", getJsonValue(jsonObject, "onset", JsonString.class), jsonObject.get("_onset"), -1));
        builder.severity((AllergyIntoleranceSeverity) parseString(AllergyIntoleranceSeverity.builder(), "severity", getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.exposureRoute(parseCodeableConcept("exposureRoute", getJsonValue(jsonObject, "exposureRoute", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Annotation parseAnnotation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Annotation.class, jsonObject);
        }
        Annotation.Builder builder = Annotation.builder();
        parseElement(builder, jsonObject);
        builder.author(parseChoiceElement("author", jsonObject, Reference.class, String.class));
        builder.time(parseDateTime("time", getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        builder.text((Markdown) parseString(Markdown.builder(), "text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Appointment parseAppointment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Appointment.class, jsonObject);
        }
        Appointment.Builder builder = Appointment.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((AppointmentStatus) parseString(AppointmentStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.cancelationReason(parseCodeableConcept("cancelationReason", getJsonValue(jsonObject, "cancelationReason", JsonObject.class), -1));
        JsonArray serviceCategoryArray = getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceTypeArray = getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", getJsonValue(jsonObject, "appointmentType", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        builder.priority((UnsignedInt) parseInteger(UnsignedInt.builder(), "priority", getJsonValue(jsonObject, "priority", JsonNumber.class), jsonObject.get("_priority"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray supportingInformationArray = getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.getJsonObject(i), i));
            }
        }
        builder.start(parseInstant("start", getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseInstant("end", getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        builder.minutesDuration((PositiveInt) parseInteger(PositiveInt.builder(), "minutesDuration", getJsonValue(jsonObject, "minutesDuration", JsonNumber.class), jsonObject.get("_minutesDuration"), -1));
        JsonArray slotArray = getJsonArray(jsonObject, "slot");
        if (slotArray != null) {
            for (int i = 0; i < slotArray.size(); i++) {
                builder.slot(parseReference("slot", slotArray.getJsonObject(i), i));
            }
        }
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.patientInstruction(parseString("patientInstruction", getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseAppointmentParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        JsonArray requestedPeriodArray = getJsonArray(jsonObject, "requestedPeriod");
        if (requestedPeriodArray != null) {
            for (int i = 0; i < requestedPeriodArray.size(); i++) {
                builder.requestedPeriod(parsePeriod("requestedPeriod", requestedPeriodArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Appointment.Participant parseAppointmentParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Appointment.Participant.class, jsonObject);
        }
        Appointment.Participant.Builder builder = Appointment.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        builder.required((ParticipantRequired) parseString(ParticipantRequired.builder(), "required", getJsonValue(jsonObject, "required", JsonString.class), jsonObject.get("_required"), -1));
        builder.status((ParticipationStatus) parseString(ParticipationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private AppointmentResponse parseAppointmentResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AppointmentResponse.class, jsonObject);
        }
        AppointmentResponse.Builder builder = AppointmentResponse.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.appointment(parseReference("appointment", getJsonValue(jsonObject, "appointment", JsonObject.class), -1));
        builder.start(parseInstant("start", getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseInstant("end", getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        JsonArray participantTypeArray = getJsonArray(jsonObject, "participantType");
        if (participantTypeArray != null) {
            for (int i = 0; i < participantTypeArray.size(); i++) {
                builder.participantType(parseCodeableConcept("participantType", participantTypeArray.getJsonObject(i), i));
            }
        }
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        builder.participantStatus((ParticipantStatus) parseString(ParticipantStatus.builder(), "participantStatus", getJsonValue(jsonObject, "participantStatus", JsonString.class), jsonObject.get("_participantStatus"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private Attachment parseAttachment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Attachment.class, jsonObject);
        }
        Attachment.Builder builder = Attachment.builder();
        parseElement(builder, jsonObject);
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.data(parseBase64Binary("data", getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.size((UnsignedInt) parseInteger(UnsignedInt.builder(), "size", getJsonValue(jsonObject, "size", JsonNumber.class), jsonObject.get("_size"), -1));
        builder.hash(parseBase64Binary("hash", getJsonValue(jsonObject, "hash", JsonString.class), jsonObject.get("_hash"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.creation(parseDateTime("creation", getJsonValue(jsonObject, "creation", JsonString.class), jsonObject.get("_creation"), -1));
        stackPop();
        return builder.build();
    }

    private AuditEvent parseAuditEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.class, jsonObject);
        }
        AuditEvent.Builder builder = AuditEvent.builder();
        parseDomainResource(builder, jsonObject);
        builder.type(parseCoding("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray subtypeArray = getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            for (int i = 0; i < subtypeArray.size(); i++) {
                builder.subtype(parseCoding("subtype", subtypeArray.getJsonObject(i), i));
            }
        }
        builder.action((AuditEventAction) parseString(AuditEventAction.builder(), "action", getJsonValue(jsonObject, "action", JsonString.class), jsonObject.get("_action"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.recorded(parseInstant("recorded", getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1));
        builder.outcome((AuditEventOutcome) parseString(AuditEventOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.outcomeDesc(parseString("outcomeDesc", getJsonValue(jsonObject, "outcomeDesc", JsonString.class), jsonObject.get("_outcomeDesc"), -1));
        JsonArray purposeOfEventArray = getJsonArray(jsonObject, "purposeOfEvent");
        if (purposeOfEventArray != null) {
            for (int i = 0; i < purposeOfEventArray.size(); i++) {
                builder.purposeOfEvent(parseCodeableConcept("purposeOfEvent", purposeOfEventArray.getJsonObject(i), i));
            }
        }
        JsonArray agentArray = getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                builder.agent(parseAuditEventAgent("agent", agentArray.getJsonObject(i), i));
            }
        }
        builder.source(parseAuditEventSource("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        JsonArray entityArray = getJsonArray(jsonObject, "entity");
        if (entityArray != null) {
            for (int i = 0; i < entityArray.size(); i++) {
                builder.entity(parseAuditEventEntity("entity", entityArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Agent parseAuditEventAgent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.Agent.class, jsonObject);
        }
        AuditEvent.Agent.Builder builder = AuditEvent.Agent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray roleArray = getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                builder.role(parseCodeableConcept("role", roleArray.getJsonObject(i), i));
            }
        }
        builder.who(parseReference("who", getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.altId(parseString("altId", getJsonValue(jsonObject, "altId", JsonString.class), jsonObject.get("_altId"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.requestor(parseBoolean("requestor", getJsonValue(jsonObject, "requestor", JsonValue.class), jsonObject.get("_requestor"), -1));
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray policyArray = getJsonArray(jsonObject, "policy", true);
        if (policyArray != null) {
            JsonArray _policyArray = jsonObject.getJsonArray("_policy");
            for (int i = 0; i < policyArray.size(); i++) {
                builder.policy(parseUri("policy", policyArray.get(i), getJsonValue(_policyArray, i), i));
            }
        }
        builder.media(parseCoding("media", getJsonValue(jsonObject, "media", JsonObject.class), -1));
        builder.network(parseAuditEventAgentNetwork("network", getJsonValue(jsonObject, "network", JsonObject.class), -1));
        JsonArray purposeOfUseArray = getJsonArray(jsonObject, "purposeOfUse");
        if (purposeOfUseArray != null) {
            for (int i = 0; i < purposeOfUseArray.size(); i++) {
                builder.purposeOfUse(parseCodeableConcept("purposeOfUse", purposeOfUseArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Agent.Network parseAuditEventAgentNetwork(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.Agent.Network.class, jsonObject);
        }
        AuditEvent.Agent.Network.Builder builder = AuditEvent.Agent.Network.builder();
        parseBackboneElement(builder, jsonObject);
        builder.address(parseString("address", getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1));
        builder.type((AuditEventAgentNetworkType) parseString(AuditEventAgentNetworkType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private AuditEvent.Entity parseAuditEventEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.Entity.class, jsonObject);
        }
        AuditEvent.Entity.Builder builder = AuditEvent.Entity.builder();
        parseBackboneElement(builder, jsonObject);
        builder.what(parseReference("what", getJsonValue(jsonObject, "what", JsonObject.class), -1));
        builder.type(parseCoding("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.role(parseCoding("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.lifecycle(parseCoding("lifecycle", getJsonValue(jsonObject, "lifecycle", JsonObject.class), -1));
        JsonArray securityLabelArray = getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                builder.securityLabel(parseCoding("securityLabel", securityLabelArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.query(parseBase64Binary("query", getJsonValue(jsonObject, "query", JsonString.class), jsonObject.get("_query"), -1));
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseAuditEventEntityDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private AuditEvent.Entity.Detail parseAuditEventEntityDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.Entity.Detail.class, jsonObject);
        }
        AuditEvent.Entity.Detail.Builder builder = AuditEvent.Entity.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseString("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.value(parseChoiceElement("value", jsonObject, String.class, Base64Binary.class));
        stackPop();
        return builder.build();
    }

    private AuditEvent.Source parseAuditEventSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(AuditEvent.Source.class, jsonObject);
        }
        AuditEvent.Source.Builder builder = AuditEvent.Source.builder();
        parseBackboneElement(builder, jsonObject);
        builder.site(parseString("site", getJsonValue(jsonObject, "site", JsonString.class), jsonObject.get("_site"), -1));
        builder.observer(parseReference("observer", getJsonValue(jsonObject, "observer", JsonObject.class), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCoding("type", typeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private void parseBackboneElement(BackboneElement.Builder builder, JsonObject jsonObject) {
        parseElement(builder, jsonObject);
        JsonArray modifierExtensionArray = getJsonArray(jsonObject, "modifierExtension");
        if (modifierExtensionArray != null) {
            for (int i = 0; i < modifierExtensionArray.size(); i++) {
                builder.modifierExtension(parseExtension("modifierExtension", modifierExtensionArray.getJsonObject(i), i));
            }
        }
    }

    private Base64Binary parseBase64Binary(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Base64Binary.Builder builder = Base64Binary.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Basic parseBasic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Basic.class, jsonObject);
        }
        Basic.Builder builder = Basic.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.created(parseDate("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Binary parseBinary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Binary.class, jsonObject);
        }
        Binary.Builder builder = Binary.builder();
        parseResource(builder, jsonObject);
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.securityContext(parseReference("securityContext", getJsonValue(jsonObject, "securityContext", JsonObject.class), -1));
        builder.data(parseBase64Binary("data", getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct parseBiologicallyDerivedProduct(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.class, jsonObject);
        }
        BiologicallyDerivedProduct.Builder builder = BiologicallyDerivedProduct.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.productCategory((BiologicallyDerivedProductCategory) parseString(BiologicallyDerivedProductCategory.builder(), "productCategory", getJsonValue(jsonObject, "productCategory", JsonString.class), jsonObject.get("_productCategory"), -1));
        builder.productCode(parseCodeableConcept("productCode", getJsonValue(jsonObject, "productCode", JsonObject.class), -1));
        builder.status((BiologicallyDerivedProductStatus) parseString(BiologicallyDerivedProductStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray requestArray = getJsonArray(jsonObject, "request");
        if (requestArray != null) {
            for (int i = 0; i < requestArray.size(); i++) {
                builder.request(parseReference("request", requestArray.getJsonObject(i), i));
            }
        }
        builder.quantity(parseInteger("quantity", getJsonValue(jsonObject, "quantity", JsonNumber.class), jsonObject.get("_quantity"), -1));
        JsonArray parentArray = getJsonArray(jsonObject, "parent");
        if (parentArray != null) {
            for (int i = 0; i < parentArray.size(); i++) {
                builder.parent(parseReference("parent", parentArray.getJsonObject(i), i));
            }
        }
        builder.collection(parseBiologicallyDerivedProductCollection("collection", getJsonValue(jsonObject, "collection", JsonObject.class), -1));
        JsonArray processingArray = getJsonArray(jsonObject, "processing");
        if (processingArray != null) {
            for (int i = 0; i < processingArray.size(); i++) {
                builder.processing(parseBiologicallyDerivedProductProcessing("processing", processingArray.getJsonObject(i), i));
            }
        }
        builder.manipulation(parseBiologicallyDerivedProductManipulation("manipulation", getJsonValue(jsonObject, "manipulation", JsonObject.class), -1));
        JsonArray storageArray = getJsonArray(jsonObject, "storage");
        if (storageArray != null) {
            for (int i = 0; i < storageArray.size(); i++) {
                builder.storage(parseBiologicallyDerivedProductStorage("storage", storageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Collection parseBiologicallyDerivedProductCollection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Collection.class, jsonObject);
        }
        BiologicallyDerivedProduct.Collection.Builder builder = BiologicallyDerivedProduct.Collection.builder();
        parseBackboneElement(builder, jsonObject);
        builder.collector(parseReference("collector", getJsonValue(jsonObject, "collector", JsonObject.class), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.collected(parseChoiceElement("collected", jsonObject, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Manipulation parseBiologicallyDerivedProductManipulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Manipulation.class, jsonObject);
        }
        BiologicallyDerivedProduct.Manipulation.Builder builder = BiologicallyDerivedProduct.Manipulation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.time(parseChoiceElement("time", jsonObject, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Processing parseBiologicallyDerivedProductProcessing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Processing.class, jsonObject);
        }
        BiologicallyDerivedProduct.Processing.Builder builder = BiologicallyDerivedProduct.Processing.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        builder.additive(parseReference("additive", getJsonValue(jsonObject, "additive", JsonObject.class), -1));
        builder.time(parseChoiceElement("time", jsonObject, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private BiologicallyDerivedProduct.Storage parseBiologicallyDerivedProductStorage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BiologicallyDerivedProduct.Storage.class, jsonObject);
        }
        BiologicallyDerivedProduct.Storage.Builder builder = BiologicallyDerivedProduct.Storage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.temperature(parseDecimal("temperature", getJsonValue(jsonObject, "temperature", JsonNumber.class), jsonObject.get("_temperature"), -1));
        builder.scale((BiologicallyDerivedProductStorageScale) parseString(BiologicallyDerivedProductStorageScale.builder(), "scale", getJsonValue(jsonObject, "scale", JsonString.class), jsonObject.get("_scale"), -1));
        builder.duration(parsePeriod("duration", getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private BodyStructure parseBodyStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(BodyStructure.class, jsonObject);
        }
        BodyStructure.Builder builder = BodyStructure.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.morphology(parseCodeableConcept("morphology", getJsonValue(jsonObject, "morphology", JsonObject.class), -1));
        builder.location(parseCodeableConcept("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray locationQualifierArray = getJsonArray(jsonObject, "locationQualifier");
        if (locationQualifierArray != null) {
            for (int i = 0; i < locationQualifierArray.size(); i++) {
                builder.locationQualifier(parseCodeableConcept("locationQualifier", locationQualifierArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray imageArray = getJsonArray(jsonObject, "image");
        if (imageArray != null) {
            for (int i = 0; i < imageArray.size(); i++) {
                builder.image(parseAttachment("image", imageArray.getJsonObject(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Boolean parseBoolean(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Boolean.Builder builder = Boolean.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (JsonValue.TRUE.equals(jsonValue) || JsonValue.FALSE.equals(jsonValue)) {
            builder.value(JsonValue.TRUE.equals(jsonValue) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE);
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: TRUE or FALSE but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Bundle parseBundle(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.class, jsonObject);
        }
        Bundle.Builder builder = Bundle.builder();
        parseResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.type((BundleType) parseString(BundleType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.timestamp(parseInstant("timestamp", getJsonValue(jsonObject, "timestamp", JsonString.class), jsonObject.get("_timestamp"), -1));
        builder.total((UnsignedInt) parseInteger(UnsignedInt.builder(), "total", getJsonValue(jsonObject, "total", JsonNumber.class), jsonObject.get("_total"), -1));
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseBundleLink("link", linkArray.getJsonObject(i), i));
            }
        }
        JsonArray entryArray = getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                builder.entry(parseBundleEntry("entry", entryArray.getJsonObject(i), i));
            }
        }
        builder.signature(parseSignature("signature", getJsonValue(jsonObject, "signature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry parseBundleEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.Entry.class, jsonObject);
        }
        Bundle.Entry.Builder builder = Bundle.Entry.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseBundleLink("link", linkArray.getJsonObject(i), i));
            }
        }
        builder.fullUrl(parseUri("fullUrl", getJsonValue(jsonObject, "fullUrl", JsonString.class), jsonObject.get("_fullUrl"), -1));
        builder.resource(parseResource("resource", getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        builder.search(parseBundleEntrySearch("search", getJsonValue(jsonObject, "search", JsonObject.class), -1));
        builder.request(parseBundleEntryRequest("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseBundleEntryResponse("response", getJsonValue(jsonObject, "response", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Request parseBundleEntryRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.Entry.Request.class, jsonObject);
        }
        Bundle.Entry.Request.Builder builder = Bundle.Entry.Request.builder();
        parseBackboneElement(builder, jsonObject);
        builder.method((HTTPVerb) parseString(HTTPVerb.builder(), "method", getJsonValue(jsonObject, "method", JsonString.class), jsonObject.get("_method"), -1));
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.ifNoneMatch(parseString("ifNoneMatch", getJsonValue(jsonObject, "ifNoneMatch", JsonString.class), jsonObject.get("_ifNoneMatch"), -1));
        builder.ifModifiedSince(parseInstant("ifModifiedSince", getJsonValue(jsonObject, "ifModifiedSince", JsonString.class), jsonObject.get("_ifModifiedSince"), -1));
        builder.ifMatch(parseString("ifMatch", getJsonValue(jsonObject, "ifMatch", JsonString.class), jsonObject.get("_ifMatch"), -1));
        builder.ifNoneExist(parseString("ifNoneExist", getJsonValue(jsonObject, "ifNoneExist", JsonString.class), jsonObject.get("_ifNoneExist"), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Response parseBundleEntryResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.Entry.Response.class, jsonObject);
        }
        Bundle.Entry.Response.Builder builder = Bundle.Entry.Response.builder();
        parseBackboneElement(builder, jsonObject);
        builder.status(parseString("status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.location(parseUri("location", getJsonValue(jsonObject, "location", JsonString.class), jsonObject.get("_location"), -1));
        builder.etag(parseString("etag", getJsonValue(jsonObject, "etag", JsonString.class), jsonObject.get("_etag"), -1));
        builder.lastModified(parseInstant("lastModified", getJsonValue(jsonObject, "lastModified", JsonString.class), jsonObject.get("_lastModified"), -1));
        builder.outcome(parseResource("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Entry.Search parseBundleEntrySearch(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.Entry.Search.class, jsonObject);
        }
        Bundle.Entry.Search.Builder builder = Bundle.Entry.Search.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((SearchEntryMode) parseString(SearchEntryMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.score(parseDecimal("score", getJsonValue(jsonObject, "score", JsonNumber.class), jsonObject.get("_score"), -1));
        stackPop();
        return builder.build();
    }

    private Bundle.Link parseBundleLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Bundle.Link.class, jsonObject);
        }
        Bundle.Link.Builder builder = Bundle.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.relation(parseString("relation", getJsonValue(jsonObject, "relation", JsonString.class), jsonObject.get("_relation"), -1));
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement parseCapabilityStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.class, jsonObject);
        }
        CapabilityStatement.Builder builder = CapabilityStatement.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        JsonArray instantiatesArray = getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates((Canonical) parseUri(Canonical.builder(), "instantiates", instantiatesArray.get(i), getJsonValue(_instantiatesArray, i), i));
            }
        }
        JsonArray importsArray = getJsonArray(jsonObject, "imports", true);
        if (importsArray != null) {
            JsonArray _importsArray = jsonObject.getJsonArray("_imports");
            for (int i = 0; i < importsArray.size(); i++) {
                builder.imports((Canonical) parseUri(Canonical.builder(), "imports", importsArray.get(i), getJsonValue(_importsArray, i), i));
            }
        }
        builder.software(parseCapabilityStatementSoftware("software", getJsonValue(jsonObject, "software", JsonObject.class), -1));
        builder.implementation(parseCapabilityStatementImplementation("implementation", getJsonValue(jsonObject, "implementation", JsonObject.class), -1));
        builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", getJsonValue(jsonObject, "fhirVersion", JsonString.class), jsonObject.get("_fhirVersion"), -1));
        JsonArray formatArray = getJsonArray(jsonObject, "format", true);
        if (formatArray != null) {
            JsonArray _formatArray = jsonObject.getJsonArray("_format");
            for (int i = 0; i < formatArray.size(); i++) {
                builder.format((Code) parseString(Code.builder(), "format", formatArray.get(i), getJsonValue(_formatArray, i), i));
            }
        }
        JsonArray patchFormatArray = getJsonArray(jsonObject, "patchFormat", true);
        if (patchFormatArray != null) {
            JsonArray _patchFormatArray = jsonObject.getJsonArray("_patchFormat");
            for (int i = 0; i < patchFormatArray.size(); i++) {
                builder.patchFormat((Code) parseString(Code.builder(), "patchFormat", patchFormatArray.get(i), getJsonValue(_patchFormatArray, i), i));
            }
        }
        JsonArray implementationGuideArray = getJsonArray(jsonObject, "implementationGuide", true);
        if (implementationGuideArray != null) {
            JsonArray _implementationGuideArray = jsonObject.getJsonArray("_implementationGuide");
            for (int i = 0; i < implementationGuideArray.size(); i++) {
                builder.implementationGuide((Canonical) parseUri(Canonical.builder(), "implementationGuide", implementationGuideArray.get(i), getJsonValue(_implementationGuideArray, i), i));
            }
        }
        JsonArray restArray = getJsonArray(jsonObject, "rest");
        if (restArray != null) {
            for (int i = 0; i < restArray.size(); i++) {
                builder.rest(parseCapabilityStatementRest("rest", restArray.getJsonObject(i), i));
            }
        }
        JsonArray messagingArray = getJsonArray(jsonObject, "messaging");
        if (messagingArray != null) {
            for (int i = 0; i < messagingArray.size(); i++) {
                builder.messaging(parseCapabilityStatementMessaging("messaging", messagingArray.getJsonObject(i), i));
            }
        }
        JsonArray documentArray = getJsonArray(jsonObject, "document");
        if (documentArray != null) {
            for (int i = 0; i < documentArray.size(); i++) {
                builder.document(parseCapabilityStatementDocument("document", documentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Document parseCapabilityStatementDocument(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Document.class, jsonObject);
        }
        CapabilityStatement.Document.Builder builder = CapabilityStatement.Document.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((DocumentMode) parseString(DocumentMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Implementation parseCapabilityStatementImplementation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Implementation.class, jsonObject);
        }
        CapabilityStatement.Implementation.Builder builder = CapabilityStatement.Implementation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.custodian(parseReference("custodian", getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging parseCapabilityStatementMessaging(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.class, jsonObject);
        }
        CapabilityStatement.Messaging.Builder builder = CapabilityStatement.Messaging.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseCapabilityStatementMessagingEndpoint("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        builder.reliableCache((UnsignedInt) parseInteger(UnsignedInt.builder(), "reliableCache", getJsonValue(jsonObject, "reliableCache", JsonNumber.class), jsonObject.get("_reliableCache"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        JsonArray supportedMessageArray = getJsonArray(jsonObject, "supportedMessage");
        if (supportedMessageArray != null) {
            for (int i = 0; i < supportedMessageArray.size(); i++) {
                builder.supportedMessage(parseCapabilityStatementMessagingSupportedMessage("supportedMessage", supportedMessageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging.Endpoint parseCapabilityStatementMessagingEndpoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.Endpoint.class, jsonObject);
        }
        CapabilityStatement.Messaging.Endpoint.Builder builder = CapabilityStatement.Messaging.Endpoint.builder();
        parseBackboneElement(builder, jsonObject);
        builder.protocol(parseCoding("protocol", getJsonValue(jsonObject, "protocol", JsonObject.class), -1));
        builder.address((Url) parseUri(Url.builder(), "address", getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Messaging.SupportedMessage parseCapabilityStatementMessagingSupportedMessage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Messaging.SupportedMessage.class, jsonObject);
        }
        CapabilityStatement.Messaging.SupportedMessage.Builder builder = CapabilityStatement.Messaging.SupportedMessage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((EventCapabilityMode) parseString(EventCapabilityMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest parseCapabilityStatementRest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.class, jsonObject);
        }
        CapabilityStatement.Rest.Builder builder = CapabilityStatement.Rest.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((RestfulCapabilityMode) parseString(RestfulCapabilityMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.security(parseCapabilityStatementRestSecurity("security", getJsonValue(jsonObject, "security", JsonObject.class), -1));
        JsonArray resourceArray = getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource(parseCapabilityStatementRestResource("resource", resourceArray.getJsonObject(i), i));
            }
        }
        JsonArray interactionArray = getJsonArray(jsonObject, "interaction");
        if (interactionArray != null) {
            for (int i = 0; i < interactionArray.size(); i++) {
                builder.interaction(parseCapabilityStatementRestInteraction("interaction", interactionArray.getJsonObject(i), i));
            }
        }
        JsonArray searchParamArray = getJsonArray(jsonObject, "searchParam");
        if (searchParamArray != null) {
            for (int i = 0; i < searchParamArray.size(); i++) {
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", searchParamArray.getJsonObject(i), i));
            }
        }
        JsonArray operationArray = getJsonArray(jsonObject, "operation");
        if (operationArray != null) {
            for (int i = 0; i < operationArray.size(); i++) {
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", operationArray.getJsonObject(i), i));
            }
        }
        JsonArray compartmentArray = getJsonArray(jsonObject, "compartment", true);
        if (compartmentArray != null) {
            JsonArray _compartmentArray = jsonObject.getJsonArray("_compartment");
            for (int i = 0; i < compartmentArray.size(); i++) {
                builder.compartment((Canonical) parseUri(Canonical.builder(), "compartment", compartmentArray.get(i), getJsonValue(_compartmentArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Interaction parseCapabilityStatementRestInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Interaction.class, jsonObject);
        }
        CapabilityStatement.Rest.Interaction.Builder builder = CapabilityStatement.Rest.Interaction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((SystemRestfulInteraction) parseString(SystemRestfulInteraction.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource parseCapabilityStatementRestResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.class, jsonObject);
        }
        CapabilityStatement.Rest.Resource.Builder builder = CapabilityStatement.Rest.Resource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ResourceType) parseString(ResourceType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray supportedProfileArray = getJsonArray(jsonObject, "supportedProfile", true);
        if (supportedProfileArray != null) {
            JsonArray _supportedProfileArray = jsonObject.getJsonArray("_supportedProfile");
            for (int i = 0; i < supportedProfileArray.size(); i++) {
                builder.supportedProfile((Canonical) parseUri(Canonical.builder(), "supportedProfile", supportedProfileArray.get(i), getJsonValue(_supportedProfileArray, i), i));
            }
        }
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        JsonArray interactionArray = getJsonArray(jsonObject, "interaction");
        if (interactionArray != null) {
            for (int i = 0; i < interactionArray.size(); i++) {
                builder.interaction(parseCapabilityStatementRestResourceInteraction("interaction", interactionArray.getJsonObject(i), i));
            }
        }
        builder.versioning((ResourceVersionPolicy) parseString(ResourceVersionPolicy.builder(), "versioning", getJsonValue(jsonObject, "versioning", JsonString.class), jsonObject.get("_versioning"), -1));
        builder.readHistory(parseBoolean("readHistory", getJsonValue(jsonObject, "readHistory", JsonValue.class), jsonObject.get("_readHistory"), -1));
        builder.updateCreate(parseBoolean("updateCreate", getJsonValue(jsonObject, "updateCreate", JsonValue.class), jsonObject.get("_updateCreate"), -1));
        builder.conditionalCreate(parseBoolean("conditionalCreate", getJsonValue(jsonObject, "conditionalCreate", JsonValue.class), jsonObject.get("_conditionalCreate"), -1));
        builder.conditionalRead((ConditionalReadStatus) parseString(ConditionalReadStatus.builder(), "conditionalRead", getJsonValue(jsonObject, "conditionalRead", JsonString.class), jsonObject.get("_conditionalRead"), -1));
        builder.conditionalUpdate(parseBoolean("conditionalUpdate", getJsonValue(jsonObject, "conditionalUpdate", JsonValue.class), jsonObject.get("_conditionalUpdate"), -1));
        builder.conditionalDelete((ConditionalDeleteStatus) parseString(ConditionalDeleteStatus.builder(), "conditionalDelete", getJsonValue(jsonObject, "conditionalDelete", JsonString.class), jsonObject.get("_conditionalDelete"), -1));
        JsonArray referencePolicyArray = getJsonArray(jsonObject, "referencePolicy", true);
        if (referencePolicyArray != null) {
            JsonArray _referencePolicyArray = jsonObject.getJsonArray("_referencePolicy");
            for (int i = 0; i < referencePolicyArray.size(); i++) {
                builder.referencePolicy((ReferenceHandlingPolicy) parseString(ReferenceHandlingPolicy.builder(), "referencePolicy", referencePolicyArray.get(i), getJsonValue(_referencePolicyArray, i), i));
            }
        }
        JsonArray searchIncludeArray = getJsonArray(jsonObject, "searchInclude", true);
        if (searchIncludeArray != null) {
            JsonArray _searchIncludeArray = jsonObject.getJsonArray("_searchInclude");
            for (int i = 0; i < searchIncludeArray.size(); i++) {
                builder.searchInclude(parseString("searchInclude", searchIncludeArray.get(i), getJsonValue(_searchIncludeArray, i), i));
            }
        }
        JsonArray searchRevIncludeArray = getJsonArray(jsonObject, "searchRevInclude", true);
        if (searchRevIncludeArray != null) {
            JsonArray _searchRevIncludeArray = jsonObject.getJsonArray("_searchRevInclude");
            for (int i = 0; i < searchRevIncludeArray.size(); i++) {
                builder.searchRevInclude(parseString("searchRevInclude", searchRevIncludeArray.get(i), getJsonValue(_searchRevIncludeArray, i), i));
            }
        }
        JsonArray searchParamArray = getJsonArray(jsonObject, "searchParam");
        if (searchParamArray != null) {
            for (int i = 0; i < searchParamArray.size(); i++) {
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", searchParamArray.getJsonObject(i), i));
            }
        }
        JsonArray operationArray = getJsonArray(jsonObject, "operation");
        if (operationArray != null) {
            for (int i = 0; i < operationArray.size(); i++) {
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", operationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.Interaction parseCapabilityStatementRestResourceInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.Interaction.class, jsonObject);
        }
        CapabilityStatement.Rest.Resource.Interaction.Builder builder = CapabilityStatement.Rest.Resource.Interaction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((TypeRestfulInteraction) parseString(TypeRestfulInteraction.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.Operation parseCapabilityStatementRestResourceOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.Operation.class, jsonObject);
        }
        CapabilityStatement.Rest.Resource.Operation.Builder builder = CapabilityStatement.Rest.Resource.Operation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Resource.SearchParam parseCapabilityStatementRestResourceSearchParam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Resource.SearchParam.class, jsonObject);
        }
        CapabilityStatement.Rest.Resource.SearchParam.Builder builder = CapabilityStatement.Rest.Resource.SearchParam.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Rest.Security parseCapabilityStatementRestSecurity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Rest.Security.class, jsonObject);
        }
        CapabilityStatement.Rest.Security.Builder builder = CapabilityStatement.Rest.Security.builder();
        parseBackboneElement(builder, jsonObject);
        builder.cors(parseBoolean("cors", getJsonValue(jsonObject, "cors", JsonValue.class), jsonObject.get("_cors"), -1));
        JsonArray serviceArray = getJsonArray(jsonObject, "service");
        if (serviceArray != null) {
            for (int i = 0; i < serviceArray.size(); i++) {
                builder.service(parseCodeableConcept("service", serviceArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private CapabilityStatement.Software parseCapabilityStatementSoftware(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CapabilityStatement.Software.class, jsonObject);
        }
        CapabilityStatement.Software.Builder builder = CapabilityStatement.Software.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.releaseDate(parseDateTime("releaseDate", getJsonValue(jsonObject, "releaseDate", JsonString.class), jsonObject.get("_releaseDate"), -1));
        stackPop();
        return builder.build();
    }

    private CarePlan parseCarePlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CarePlan.class, jsonObject);
        }
        CarePlan.Builder builder = CarePlan.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces(parseReference("replaces", replacesArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((CarePlanStatus) parseString(CarePlanStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.intent((CarePlanIntent) parseString(CarePlanIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray contributorArray = getJsonArray(jsonObject, "contributor");
        if (contributorArray != null) {
            for (int i = 0; i < contributorArray.size(); i++) {
                builder.contributor(parseReference("contributor", contributorArray.getJsonObject(i), i));
            }
        }
        JsonArray careTeamArray = getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                builder.careTeam(parseReference("careTeam", careTeamArray.getJsonObject(i), i));
            }
        }
        JsonArray addressesArray = getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                builder.addresses(parseReference("addresses", addressesArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray goalArray = getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                builder.goal(parseReference("goal", goalArray.getJsonObject(i), i));
            }
        }
        JsonArray activityArray = getJsonArray(jsonObject, "activity");
        if (activityArray != null) {
            for (int i = 0; i < activityArray.size(); i++) {
                builder.activity(parseCarePlanActivity("activity", activityArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CarePlan.Activity parseCarePlanActivity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CarePlan.Activity.class, jsonObject);
        }
        CarePlan.Activity.Builder builder = CarePlan.Activity.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray outcomeCodeableConceptArray = getJsonArray(jsonObject, "outcomeCodeableConcept");
        if (outcomeCodeableConceptArray != null) {
            for (int i = 0; i < outcomeCodeableConceptArray.size(); i++) {
                builder.outcomeCodeableConcept(parseCodeableConcept("outcomeCodeableConcept", outcomeCodeableConceptArray.getJsonObject(i), i));
            }
        }
        JsonArray outcomeReferenceArray = getJsonArray(jsonObject, "outcomeReference");
        if (outcomeReferenceArray != null) {
            for (int i = 0; i < outcomeReferenceArray.size(); i++) {
                builder.outcomeReference(parseReference("outcomeReference", outcomeReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray progressArray = getJsonArray(jsonObject, "progress");
        if (progressArray != null) {
            for (int i = 0; i < progressArray.size(); i++) {
                builder.progress(parseAnnotation("progress", progressArray.getJsonObject(i), i));
            }
        }
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        builder.detail(parseCarePlanActivityDetail("detail", getJsonValue(jsonObject, "detail", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private CarePlan.Activity.Detail parseCarePlanActivityDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CarePlan.Activity.Detail.class, jsonObject);
        }
        CarePlan.Activity.Detail.Builder builder = CarePlan.Activity.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.kind((CarePlanActivityKind) parseString(CarePlanActivityKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray goalArray = getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                builder.goal(parseReference("goal", goalArray.getJsonObject(i), i));
            }
        }
        builder.status((CarePlanActivityStatus) parseString(CarePlanActivityStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.scheduled(parseChoiceElement("scheduled", jsonObject, Timing.class, Period.class, String.class));
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseReference("performer", performerArray.getJsonObject(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, CodeableConcept.class, Reference.class));
        builder.dailyAmount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dailyAmount", getJsonValue(jsonObject, "dailyAmount", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private CareTeam parseCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CareTeam.class, jsonObject);
        }
        CareTeam.Builder builder = CareTeam.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((CareTeamStatus) parseString(CareTeamStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseCareTeamParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray managingOrganizationArray = getJsonArray(jsonObject, "managingOrganization");
        if (managingOrganizationArray != null) {
            for (int i = 0; i < managingOrganizationArray.size(); i++) {
                builder.managingOrganization(parseReference("managingOrganization", managingOrganizationArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CareTeam.Participant parseCareTeamParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CareTeam.Participant.class, jsonObject);
        }
        CareTeam.Participant.Builder builder = CareTeam.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray roleArray = getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                builder.role(parseCodeableConcept("role", roleArray.getJsonObject(i), i));
            }
        }
        builder.member(parseReference("member", getJsonValue(jsonObject, "member", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private CatalogEntry parseCatalogEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CatalogEntry.class, jsonObject);
        }
        CatalogEntry.Builder builder = CatalogEntry.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.orderable(parseBoolean("orderable", getJsonValue(jsonObject, "orderable", JsonValue.class), jsonObject.get("_orderable"), -1));
        builder.referencedItem(parseReference("referencedItem", getJsonValue(jsonObject, "referencedItem", JsonObject.class), -1));
        JsonArray additionalIdentifierArray = getJsonArray(jsonObject, "additionalIdentifier");
        if (additionalIdentifierArray != null) {
            for (int i = 0; i < additionalIdentifierArray.size(); i++) {
                builder.additionalIdentifier(parseIdentifier("additionalIdentifier", additionalIdentifierArray.getJsonObject(i), i));
            }
        }
        JsonArray classificationArray = getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                builder.classification(parseCodeableConcept("classification", classificationArray.getJsonObject(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.validTo(parseDateTime("validTo", getJsonValue(jsonObject, "validTo", JsonString.class), jsonObject.get("_validTo"), -1));
        builder.lastUpdated(parseDateTime("lastUpdated", getJsonValue(jsonObject, "lastUpdated", JsonString.class), jsonObject.get("_lastUpdated"), -1));
        JsonArray additionalCharacteristicArray = getJsonArray(jsonObject, "additionalCharacteristic");
        if (additionalCharacteristicArray != null) {
            for (int i = 0; i < additionalCharacteristicArray.size(); i++) {
                builder.additionalCharacteristic(parseCodeableConcept("additionalCharacteristic", additionalCharacteristicArray.getJsonObject(i), i));
            }
        }
        JsonArray additionalClassificationArray = getJsonArray(jsonObject, "additionalClassification");
        if (additionalClassificationArray != null) {
            for (int i = 0; i < additionalClassificationArray.size(); i++) {
                builder.additionalClassification(parseCodeableConcept("additionalClassification", additionalClassificationArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedEntryArray = getJsonArray(jsonObject, "relatedEntry");
        if (relatedEntryArray != null) {
            for (int i = 0; i < relatedEntryArray.size(); i++) {
                builder.relatedEntry(parseCatalogEntryRelatedEntry("relatedEntry", relatedEntryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CatalogEntry.RelatedEntry parseCatalogEntryRelatedEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CatalogEntry.RelatedEntry.class, jsonObject);
        }
        CatalogEntry.RelatedEntry.Builder builder = CatalogEntry.RelatedEntry.builder();
        parseBackboneElement(builder, jsonObject);
        builder.relationtype((CatalogEntryRelationType) parseString(CatalogEntryRelationType.builder(), "relationtype", getJsonValue(jsonObject, "relationtype", JsonString.class), jsonObject.get("_relationtype"), -1));
        builder.item(parseReference("item", getJsonValue(jsonObject, "item", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItem parseChargeItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItem.class, jsonObject);
        }
        ChargeItem.Builder builder = ChargeItem.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray definitionUriArray = getJsonArray(jsonObject, "definitionUri", true);
        if (definitionUriArray != null) {
            JsonArray _definitionUriArray = jsonObject.getJsonArray("_definitionUri");
            for (int i = 0; i < definitionUriArray.size(); i++) {
                builder.definitionUri(parseUri("definitionUri", definitionUriArray.get(i), getJsonValue(_definitionUriArray, i), i));
            }
        }
        JsonArray definitionCanonicalArray = getJsonArray(jsonObject, "definitionCanonical", true);
        if (definitionCanonicalArray != null) {
            JsonArray _definitionCanonicalArray = jsonObject.getJsonArray("_definitionCanonical");
            for (int i = 0; i < definitionCanonicalArray.size(); i++) {
                builder.definitionCanonical((Canonical) parseUri(Canonical.builder(), "definitionCanonical", definitionCanonicalArray.get(i), getJsonValue(_definitionCanonicalArray, i), i));
            }
        }
        builder.status((ChargeItemStatus) parseString(ChargeItemStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.context(parseReference("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseChargeItemPerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        builder.performingOrganization(parseReference("performingOrganization", getJsonValue(jsonObject, "performingOrganization", JsonObject.class), -1));
        builder.requestingOrganization(parseReference("requestingOrganization", getJsonValue(jsonObject, "requestingOrganization", JsonObject.class), -1));
        builder.costCenter(parseReference("costCenter", getJsonValue(jsonObject, "costCenter", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray bodysiteArray = getJsonArray(jsonObject, "bodysite");
        if (bodysiteArray != null) {
            for (int i = 0; i < bodysiteArray.size(); i++) {
                builder.bodysite(parseCodeableConcept("bodysite", bodysiteArray.getJsonObject(i), i));
            }
        }
        builder.factorOverride(parseDecimal("factorOverride", getJsonValue(jsonObject, "factorOverride", JsonNumber.class), jsonObject.get("_factorOverride"), -1));
        builder.priceOverride(parseMoney("priceOverride", getJsonValue(jsonObject, "priceOverride", JsonObject.class), -1));
        builder.overrideReason(parseString("overrideReason", getJsonValue(jsonObject, "overrideReason", JsonString.class), jsonObject.get("_overrideReason"), -1));
        builder.enterer(parseReference("enterer", getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.enteredDate(parseDateTime("enteredDate", getJsonValue(jsonObject, "enteredDate", JsonString.class), jsonObject.get("_enteredDate"), -1));
        JsonArray reasonArray = getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseCodeableConcept("reason", reasonArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceArray = getJsonArray(jsonObject, "service");
        if (serviceArray != null) {
            for (int i = 0; i < serviceArray.size(); i++) {
                builder.service(parseReference("service", serviceArray.getJsonObject(i), i));
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, Reference.class, CodeableConcept.class));
        JsonArray accountArray = getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                builder.account(parseReference("account", accountArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInformationArray = getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItem.Performer parseChargeItemPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItem.Performer.class, jsonObject);
        }
        ChargeItem.Performer.Builder builder = ChargeItem.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition parseChargeItemDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItemDefinition.class, jsonObject);
        }
        ChargeItemDefinition.Builder builder = ChargeItemDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray derivedFromUriArray = getJsonArray(jsonObject, "derivedFromUri", true);
        if (derivedFromUriArray != null) {
            JsonArray _derivedFromUriArray = jsonObject.getJsonArray("_derivedFromUri");
            for (int i = 0; i < derivedFromUriArray.size(); i++) {
                builder.derivedFromUri(parseUri("derivedFromUri", derivedFromUriArray.get(i), getJsonValue(_derivedFromUriArray, i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf", true);
        if (partOfArray != null) {
            JsonArray _partOfArray = jsonObject.getJsonArray("_partOf");
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf((Canonical) parseUri(Canonical.builder(), "partOf", partOfArray.get(i), getJsonValue(_partOfArray, i), i));
            }
        }
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces", true);
        if (replacesArray != null) {
            JsonArray _replacesArray = jsonObject.getJsonArray("_replaces");
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", replacesArray.get(i), getJsonValue(_replacesArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray instanceArray = getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                builder.instance(parseReference("instance", instanceArray.getJsonObject(i), i));
            }
        }
        JsonArray applicabilityArray = getJsonArray(jsonObject, "applicability");
        if (applicabilityArray != null) {
            for (int i = 0; i < applicabilityArray.size(); i++) {
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", applicabilityArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyGroupArray = getJsonArray(jsonObject, "propertyGroup");
        if (propertyGroupArray != null) {
            for (int i = 0; i < propertyGroupArray.size(); i++) {
                builder.propertyGroup(parseChargeItemDefinitionPropertyGroup("propertyGroup", propertyGroupArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.Applicability parseChargeItemDefinitionApplicability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItemDefinition.Applicability.class, jsonObject);
        }
        ChargeItemDefinition.Applicability.Builder builder = ChargeItemDefinition.Applicability.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.language(parseString("language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.PropertyGroup parseChargeItemDefinitionPropertyGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItemDefinition.PropertyGroup.class, jsonObject);
        }
        ChargeItemDefinition.PropertyGroup.Builder builder = ChargeItemDefinition.PropertyGroup.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray applicabilityArray = getJsonArray(jsonObject, "applicability");
        if (applicabilityArray != null) {
            for (int i = 0; i < applicabilityArray.size(); i++) {
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", applicabilityArray.getJsonObject(i), i));
            }
        }
        JsonArray priceComponentArray = getJsonArray(jsonObject, "priceComponent");
        if (priceComponentArray != null) {
            for (int i = 0; i < priceComponentArray.size(); i++) {
                builder.priceComponent(parseChargeItemDefinitionPropertyGroupPriceComponent("priceComponent", priceComponentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ChargeItemDefinition.PropertyGroup.PriceComponent parseChargeItemDefinitionPropertyGroupPriceComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ChargeItemDefinition.PropertyGroup.PriceComponent.class, jsonObject);
        }
        ChargeItemDefinition.PropertyGroup.PriceComponent.Builder builder = ChargeItemDefinition.PropertyGroup.PriceComponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ChargeItemDefinitionPriceComponentType) parseString(ChargeItemDefinitionPriceComponentType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim parseClaim(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.class, jsonObject);
        }
        Claim.Builder builder = Claim.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ClaimStatus) parseString(ClaimStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", getJsonValue(jsonObject, "billablePeriod", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        JsonArray relatedArray = getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                builder.related(parseClaimRelated("related", relatedArray.getJsonObject(i), i));
            }
        }
        builder.prescription(parseReference("prescription", getJsonValue(jsonObject, "prescription", JsonObject.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", getJsonValue(jsonObject, "originalPrescription", JsonObject.class), -1));
        builder.payee(parseClaimPayee("payee", getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.referral(parseReference("referral", getJsonValue(jsonObject, "referral", JsonObject.class), -1));
        builder.facility(parseReference("facility", getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray careTeamArray = getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                builder.careTeam(parseClaimCareTeam("careTeam", careTeamArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseClaimSupportingInfo("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray diagnosisArray = getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                builder.diagnosis(parseClaimDiagnosis("diagnosis", diagnosisArray.getJsonObject(i), i));
            }
        }
        JsonArray procedureArray = getJsonArray(jsonObject, "procedure");
        if (procedureArray != null) {
            for (int i = 0; i < procedureArray.size(); i++) {
                builder.procedure(parseClaimProcedure("procedure", procedureArray.getJsonObject(i), i));
            }
        }
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseClaimInsurance("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        builder.accident(parseClaimAccident("accident", getJsonValue(jsonObject, "accident", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseClaimItem("item", itemArray.getJsonObject(i), i));
            }
        }
        builder.total(parseMoney("total", getJsonValue(jsonObject, "total", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Accident parseClaimAccident(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Accident.class, jsonObject);
        }
        Claim.Accident.Builder builder = Claim.Accident.builder();
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.location(parseChoiceElement("location", jsonObject, Address.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Claim.CareTeam parseClaimCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.CareTeam.class, jsonObject);
        }
        Claim.CareTeam.Builder builder = Claim.CareTeam.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.responsible(parseBoolean("responsible", getJsonValue(jsonObject, "responsible", JsonValue.class), jsonObject.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.qualification(parseCodeableConcept("qualification", getJsonValue(jsonObject, "qualification", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Diagnosis parseClaimDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Diagnosis.class, jsonObject);
        }
        Claim.Diagnosis.Builder builder = Claim.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.diagnosis(parseChoiceElement("diagnosis", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", getJsonValue(jsonObject, "onAdmission", JsonObject.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", getJsonValue(jsonObject, "packageCode", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Insurance parseClaimInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Insurance.class, jsonObject);
        }
        Claim.Insurance.Builder builder = Claim.Insurance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.focal(parseBoolean("focal", getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        JsonArray preAuthRefArray = getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonValue(_preAuthRefArray, i), i));
            }
        }
        builder.claimResponse(parseReference("claimResponse", getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Item parseClaimItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Item.class, jsonObject);
        }
        Claim.Item.Builder builder = Claim.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        JsonArray careTeamSequenceArray = getJsonArray(jsonObject, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            JsonArray _careTeamSequenceArray = jsonObject.getJsonArray("_careTeamSequence");
            for (int i = 0; i < careTeamSequenceArray.size(); i++) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", careTeamSequenceArray.get(i), getJsonValue(_careTeamSequenceArray, i), i));
            }
        }
        JsonArray diagnosisSequenceArray = getJsonArray(jsonObject, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            JsonArray _diagnosisSequenceArray = jsonObject.getJsonArray("_diagnosisSequence");
            for (int i = 0; i < diagnosisSequenceArray.size(); i++) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", diagnosisSequenceArray.get(i), getJsonValue(_diagnosisSequenceArray, i), i));
            }
        }
        JsonArray procedureSequenceArray = getJsonArray(jsonObject, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            JsonArray _procedureSequenceArray = jsonObject.getJsonArray("_procedureSequence");
            for (int i = 0; i < procedureSequenceArray.size(); i++) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", procedureSequenceArray.get(i), getJsonValue(_procedureSequenceArray, i), i));
            }
        }
        JsonArray informationSequenceArray = getJsonArray(jsonObject, "informationSequence", true);
        if (informationSequenceArray != null) {
            JsonArray _informationSequenceArray = jsonObject.getJsonArray("_informationSequence");
            for (int i = 0; i < informationSequenceArray.size(); i++) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", informationSequenceArray.get(i), getJsonValue(_informationSequenceArray, i), i));
            }
        }
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonObject, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.getJsonObject(i), i));
            }
        }
        JsonArray encounterArray = getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                builder.encounter(parseReference("encounter", encounterArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseClaimItemDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Item.Detail parseClaimItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Item.Detail.class, jsonObject);
        }
        Claim.Item.Detail.Builder builder = Claim.Item.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        JsonArray subDetailArray = getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                builder.subDetail(parseClaimItemDetailSubDetail("subDetail", subDetailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Item.Detail.SubDetail parseClaimItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Item.Detail.SubDetail.class, jsonObject);
        }
        Claim.Item.Detail.SubDetail.Builder builder = Claim.Item.Detail.SubDetail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Payee parseClaimPayee(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Payee.class, jsonObject);
        }
        Claim.Payee.Builder builder = Claim.Payee.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.party(parseReference("party", getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.Procedure parseClaimProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Procedure.class, jsonObject);
        }
        Claim.Procedure.Builder builder = Claim.Procedure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.procedure(parseChoiceElement("procedure", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Claim.Related parseClaimRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.Related.class, jsonObject);
        }
        Claim.Related.Builder builder = Claim.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.claim(parseReference("claim", getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.reference(parseIdentifier("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Claim.SupportingInfo parseClaimSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Claim.SupportingInfo.class, jsonObject);
        }
        Claim.SupportingInfo.Builder builder = Claim.SupportingInfo.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, Date.class, Period.class));
        builder.value(parseChoiceElement("value", jsonObject, Boolean.class, String.class, Quantity.class, Attachment.class, Reference.class));
        builder.reason(parseCodeableConcept("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse parseClaimResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.class, jsonObject);
        }
        ClaimResponse.Builder builder = ClaimResponse.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ClaimResponseStatus) parseString(ClaimResponseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.requestor(parseReference("requestor", getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.preAuthRef(parseString("preAuthRef", getJsonValue(jsonObject, "preAuthRef", JsonString.class), jsonObject.get("_preAuthRef"), -1));
        builder.preAuthPeriod(parsePeriod("preAuthPeriod", getJsonValue(jsonObject, "preAuthPeriod", JsonObject.class), -1));
        builder.payeeType(parseCodeableConcept("payeeType", getJsonValue(jsonObject, "payeeType", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseClaimResponseItem("item", itemArray.getJsonObject(i), i));
            }
        }
        JsonArray addItemArray = getJsonArray(jsonObject, "addItem");
        if (addItemArray != null) {
            for (int i = 0; i < addItemArray.size(); i++) {
                builder.addItem(parseClaimResponseAddItem("addItem", addItemArray.getJsonObject(i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray totalArray = getJsonArray(jsonObject, "total");
        if (totalArray != null) {
            for (int i = 0; i < totalArray.size(); i++) {
                builder.total(parseClaimResponseTotal("total", totalArray.getJsonObject(i), i));
            }
        }
        builder.payment(parseClaimResponsePayment("payment", getJsonValue(jsonObject, "payment", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        builder.formCode(parseCodeableConcept("formCode", getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        builder.form(parseAttachment("form", getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray processNoteArray = getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                builder.processNote(parseClaimResponseProcessNote("processNote", processNoteArray.getJsonObject(i), i));
            }
        }
        JsonArray communicationRequestArray = getJsonArray(jsonObject, "communicationRequest");
        if (communicationRequestArray != null) {
            for (int i = 0; i < communicationRequestArray.size(); i++) {
                builder.communicationRequest(parseReference("communicationRequest", communicationRequestArray.getJsonObject(i), i));
            }
        }
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseClaimResponseInsurance("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray errorArray = getJsonArray(jsonObject, "error");
        if (errorArray != null) {
            for (int i = 0; i < errorArray.size(); i++) {
                builder.error(parseClaimResponseError("error", errorArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem parseClaimResponseAddItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.class, jsonObject);
        }
        ClaimResponse.AddItem.Builder builder = ClaimResponse.AddItem.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray itemSequenceArray = getJsonArray(jsonObject, "itemSequence", true);
        if (itemSequenceArray != null) {
            JsonArray _itemSequenceArray = jsonObject.getJsonArray("_itemSequence");
            for (int i = 0; i < itemSequenceArray.size(); i++) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", itemSequenceArray.get(i), getJsonValue(_itemSequenceArray, i), i));
            }
        }
        JsonArray detailSequenceArray = getJsonArray(jsonObject, "detailSequence", true);
        if (detailSequenceArray != null) {
            JsonArray _detailSequenceArray = jsonObject.getJsonArray("_detailSequence");
            for (int i = 0; i < detailSequenceArray.size(); i++) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", detailSequenceArray.get(i), getJsonValue(_detailSequenceArray, i), i));
            }
        }
        JsonArray subdetailSequenceArray = getJsonArray(jsonObject, "subdetailSequence", true);
        if (subdetailSequenceArray != null) {
            JsonArray _subdetailSequenceArray = jsonObject.getJsonArray("_subdetailSequence");
            for (int i = 0; i < subdetailSequenceArray.size(); i++) {
                builder.subdetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subdetailSequence", subdetailSequenceArray.get(i), getJsonValue(_subdetailSequenceArray, i), i));
            }
        }
        JsonArray providerArray = getJsonArray(jsonObject, "provider");
        if (providerArray != null) {
            for (int i = 0; i < providerArray.size(); i++) {
                builder.provider(parseReference("provider", providerArray.getJsonObject(i), i));
            }
        }
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonObject, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.getJsonObject(i), i));
            }
        }
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseClaimResponseAddItemDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem.Detail parseClaimResponseAddItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.Detail.class, jsonObject);
        }
        ClaimResponse.AddItem.Detail.Builder builder = ClaimResponse.AddItem.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray subDetailArray = getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                builder.subDetail(parseClaimResponseAddItemDetailSubDetail("subDetail", subDetailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.AddItem.Detail.SubDetail parseClaimResponseAddItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.AddItem.Detail.SubDetail.class, jsonObject);
        }
        ClaimResponse.AddItem.Detail.SubDetail.Builder builder = ClaimResponse.AddItem.Detail.SubDetail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Error parseClaimResponseError(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Error.class, jsonObject);
        }
        ClaimResponse.Error.Builder builder = ClaimResponse.Error.builder();
        parseBackboneElement(builder, jsonObject);
        builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", getJsonValue(jsonObject, "itemSequence", JsonNumber.class), jsonObject.get("_itemSequence"), -1));
        builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", getJsonValue(jsonObject, "detailSequence", JsonNumber.class), jsonObject.get("_detailSequence"), -1));
        builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", getJsonValue(jsonObject, "subDetailSequence", JsonNumber.class), jsonObject.get("_subDetailSequence"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Insurance parseClaimResponseInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Insurance.class, jsonObject);
        }
        ClaimResponse.Insurance.Builder builder = ClaimResponse.Insurance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.focal(parseBoolean("focal", getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        builder.claimResponse(parseReference("claimResponse", getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item parseClaimResponseItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Item.class, jsonObject);
        }
        ClaimResponse.Item.Builder builder = ClaimResponse.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", getJsonValue(jsonObject, "itemSequence", JsonNumber.class), jsonObject.get("_itemSequence"), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseClaimResponseItemDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Adjudication parseClaimResponseItemAdjudication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Item.Adjudication.class, jsonObject);
        }
        ClaimResponse.Item.Adjudication.Builder builder = ClaimResponse.Item.Adjudication.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Detail parseClaimResponseItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Item.Detail.class, jsonObject);
        }
        ClaimResponse.Item.Detail.Builder builder = ClaimResponse.Item.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", getJsonValue(jsonObject, "detailSequence", JsonNumber.class), jsonObject.get("_detailSequence"), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray subDetailArray = getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                builder.subDetail(parseClaimResponseItemDetailSubDetail("subDetail", subDetailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Item.Detail.SubDetail parseClaimResponseItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Item.Detail.SubDetail.class, jsonObject);
        }
        ClaimResponse.Item.Detail.SubDetail.Builder builder = ClaimResponse.Item.Detail.SubDetail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", getJsonValue(jsonObject, "subDetailSequence", JsonNumber.class), jsonObject.get("_subDetailSequence"), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Payment parseClaimResponsePayment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Payment.class, jsonObject);
        }
        ClaimResponse.Payment.Builder builder = ClaimResponse.Payment.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.adjustment(parseMoney("adjustment", getJsonValue(jsonObject, "adjustment", JsonObject.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", getJsonValue(jsonObject, "adjustmentReason", JsonObject.class), -1));
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.ProcessNote parseClaimResponseProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.ProcessNote.class, jsonObject);
        }
        ClaimResponse.ProcessNote.Builder builder = ClaimResponse.ProcessNote.builder();
        parseBackboneElement(builder, jsonObject);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.language(parseCodeableConcept("language", getJsonValue(jsonObject, "language", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClaimResponse.Total parseClaimResponseTotal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClaimResponse.Total.class, jsonObject);
        }
        ClaimResponse.Total.Builder builder = ClaimResponse.Total.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalImpression parseClinicalImpression(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClinicalImpression.class, jsonObject);
        }
        ClinicalImpression.Builder builder = ClinicalImpression.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ClinicalImpressionStatus) parseString(ClinicalImpressionStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, DateTime.class, Period.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.assessor(parseReference("assessor", getJsonValue(jsonObject, "assessor", JsonObject.class), -1));
        builder.previous(parseReference("previous", getJsonValue(jsonObject, "previous", JsonObject.class), -1));
        JsonArray problemArray = getJsonArray(jsonObject, "problem");
        if (problemArray != null) {
            for (int i = 0; i < problemArray.size(); i++) {
                builder.problem(parseReference("problem", problemArray.getJsonObject(i), i));
            }
        }
        JsonArray investigationArray = getJsonArray(jsonObject, "investigation");
        if (investigationArray != null) {
            for (int i = 0; i < investigationArray.size(); i++) {
                builder.investigation(parseClinicalImpressionInvestigation("investigation", investigationArray.getJsonObject(i), i));
            }
        }
        JsonArray protocolArray = getJsonArray(jsonObject, "protocol", true);
        if (protocolArray != null) {
            JsonArray _protocolArray = jsonObject.getJsonArray("_protocol");
            for (int i = 0; i < protocolArray.size(); i++) {
                builder.protocol(parseUri("protocol", protocolArray.get(i), getJsonValue(_protocolArray, i), i));
            }
        }
        builder.summary(parseString("summary", getJsonValue(jsonObject, "summary", JsonString.class), jsonObject.get("_summary"), -1));
        JsonArray findingArray = getJsonArray(jsonObject, "finding");
        if (findingArray != null) {
            for (int i = 0; i < findingArray.size(); i++) {
                builder.finding(parseClinicalImpressionFinding("finding", findingArray.getJsonObject(i), i));
            }
        }
        JsonArray prognosisCodeableConceptArray = getJsonArray(jsonObject, "prognosisCodeableConcept");
        if (prognosisCodeableConceptArray != null) {
            for (int i = 0; i < prognosisCodeableConceptArray.size(); i++) {
                builder.prognosisCodeableConcept(parseCodeableConcept("prognosisCodeableConcept", prognosisCodeableConceptArray.getJsonObject(i), i));
            }
        }
        JsonArray prognosisReferenceArray = getJsonArray(jsonObject, "prognosisReference");
        if (prognosisReferenceArray != null) {
            for (int i = 0; i < prognosisReferenceArray.size(); i++) {
                builder.prognosisReference(parseReference("prognosisReference", prognosisReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ClinicalImpression.Finding parseClinicalImpressionFinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClinicalImpression.Finding.class, jsonObject);
        }
        ClinicalImpression.Finding.Builder builder = ClinicalImpression.Finding.builder();
        parseBackboneElement(builder, jsonObject);
        builder.itemCodeableConcept(parseCodeableConcept("itemCodeableConcept", getJsonValue(jsonObject, "itemCodeableConcept", JsonObject.class), -1));
        builder.itemReference(parseReference("itemReference", getJsonValue(jsonObject, "itemReference", JsonObject.class), -1));
        builder.basis(parseString("basis", getJsonValue(jsonObject, "basis", JsonString.class), jsonObject.get("_basis"), -1));
        stackPop();
        return builder.build();
    }

    private ClinicalImpression.Investigation parseClinicalImpressionInvestigation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ClinicalImpression.Investigation.class, jsonObject);
        }
        ClinicalImpression.Investigation.Builder builder = ClinicalImpression.Investigation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseReference("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CodeSystem parseCodeSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.class, jsonObject);
        }
        CodeSystem.Builder builder = CodeSystem.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.caseSensitive(parseBoolean("caseSensitive", getJsonValue(jsonObject, "caseSensitive", JsonValue.class), jsonObject.get("_caseSensitive"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        builder.hierarchyMeaning((CodeSystemHierarchyMeaning) parseString(CodeSystemHierarchyMeaning.builder(), "hierarchyMeaning", getJsonValue(jsonObject, "hierarchyMeaning", JsonString.class), jsonObject.get("_hierarchyMeaning"), -1));
        builder.compositional(parseBoolean("compositional", getJsonValue(jsonObject, "compositional", JsonValue.class), jsonObject.get("_compositional"), -1));
        builder.versionNeeded(parseBoolean("versionNeeded", getJsonValue(jsonObject, "versionNeeded", JsonValue.class), jsonObject.get("_versionNeeded"), -1));
        builder.content((CodeSystemContentMode) parseString(CodeSystemContentMode.builder(), "content", getJsonValue(jsonObject, "content", JsonString.class), jsonObject.get("_content"), -1));
        builder.supplements((Canonical) parseUri(Canonical.builder(), "supplements", getJsonValue(jsonObject, "supplements", JsonString.class), jsonObject.get("_supplements"), -1));
        builder.count((UnsignedInt) parseInteger(UnsignedInt.builder(), "count", getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        JsonArray filterArray = getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                builder.filter(parseCodeSystemFilter("filter", filterArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property(parseCodeSystemProperty("property", propertyArray.getJsonObject(i), i));
            }
        }
        JsonArray conceptArray = getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                builder.concept(parseCodeSystemConcept("concept", conceptArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept parseCodeSystemConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.Concept.class, jsonObject);
        }
        CodeSystem.Concept.Builder builder = CodeSystem.Concept.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.definition(parseString("definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        JsonArray designationArray = getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                builder.designation(parseCodeSystemConceptDesignation("designation", designationArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property(parseCodeSystemConceptProperty("property", propertyArray.getJsonObject(i), i));
            }
        }
        JsonArray conceptArray = getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                builder.concept(parseCodeSystemConcept("concept", conceptArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept.Designation parseCodeSystemConceptDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.Concept.Designation.class, jsonObject);
        }
        CodeSystem.Concept.Designation.Builder builder = CodeSystem.Concept.Designation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.use(parseCoding("use", getJsonValue(jsonObject, "use", JsonObject.class), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Concept.Property parseCodeSystemConceptProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.Concept.Property.class, jsonObject);
        }
        CodeSystem.Concept.Property.Builder builder = CodeSystem.Concept.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.value(parseChoiceElement("value", jsonObject, Code.class, Coding.class, String.class, Integer.class, Boolean.class, DateTime.class, Decimal.class));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Filter parseCodeSystemFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.Filter.class, jsonObject);
        }
        CodeSystem.Filter.Builder builder = CodeSystem.Filter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray operatorArray = getJsonArray(jsonObject, "operator", true);
        if (operatorArray != null) {
            JsonArray _operatorArray = jsonObject.getJsonArray("_operator");
            for (int i = 0; i < operatorArray.size(); i++) {
                builder.operator((FilterOperator) parseString(FilterOperator.builder(), "operator", operatorArray.get(i), getJsonValue(_operatorArray, i), i));
            }
        }
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private CodeSystem.Property parseCodeSystemProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeSystem.Property.class, jsonObject);
        }
        CodeSystem.Property.Builder builder = CodeSystem.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.uri(parseUri("uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type((PropertyType) parseString(PropertyType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private CodeableConcept parseCodeableConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CodeableConcept.class, jsonObject);
        }
        CodeableConcept.Builder builder = CodeableConcept.builder();
        parseElement(builder, jsonObject);
        JsonArray codingArray = getJsonArray(jsonObject, "coding");
        if (codingArray != null) {
            for (int i = 0; i < codingArray.size(); i++) {
                builder.coding(parseCoding("coding", codingArray.getJsonObject(i), i));
            }
        }
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Coding parseCoding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Coding.class, jsonObject);
        }
        Coding.Builder builder = Coding.builder();
        parseElement(builder, jsonObject);
        builder.system(parseUri("system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.userSelected(parseBoolean("userSelected", getJsonValue(jsonObject, "userSelected", JsonValue.class), jsonObject.get("_userSelected"), -1));
        stackPop();
        return builder.build();
    }

    private Communication parseCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Communication.class, jsonObject);
        }
        Communication.Builder builder = Communication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        JsonArray inResponseToArray = getJsonArray(jsonObject, "inResponseTo");
        if (inResponseToArray != null) {
            for (int i = 0; i < inResponseToArray.size(); i++) {
                builder.inResponseTo(parseReference("inResponseTo", inResponseToArray.getJsonObject(i), i));
            }
        }
        builder.status((CommunicationStatus) parseString(CommunicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray mediumArray = getJsonArray(jsonObject, "medium");
        if (mediumArray != null) {
            for (int i = 0; i < mediumArray.size(); i++) {
                builder.medium(parseCodeableConcept("medium", mediumArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.topic(parseCodeableConcept("topic", getJsonValue(jsonObject, "topic", JsonObject.class), -1));
        JsonArray aboutArray = getJsonArray(jsonObject, "about");
        if (aboutArray != null) {
            for (int i = 0; i < aboutArray.size(); i++) {
                builder.about(parseReference("about", aboutArray.getJsonObject(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.sent(parseDateTime("sent", getJsonValue(jsonObject, "sent", JsonString.class), jsonObject.get("_sent"), -1));
        builder.received(parseDateTime("received", getJsonValue(jsonObject, "received", JsonString.class), jsonObject.get("_received"), -1));
        JsonArray recipientArray = getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                builder.recipient(parseReference("recipient", recipientArray.getJsonObject(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray payloadArray = getJsonArray(jsonObject, "payload");
        if (payloadArray != null) {
            for (int i = 0; i < payloadArray.size(); i++) {
                builder.payload(parseCommunicationPayload("payload", payloadArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Communication.Payload parseCommunicationPayload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Communication.Payload.class, jsonObject);
        }
        Communication.Payload.Builder builder = Communication.Payload.builder();
        parseBackboneElement(builder, jsonObject);
        builder.content(parseChoiceElement("content", jsonObject, String.class, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CommunicationRequest parseCommunicationRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CommunicationRequest.class, jsonObject);
        }
        CommunicationRequest.Builder builder = CommunicationRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces(parseReference("replaces", replacesArray.getJsonObject(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.status((CommunicationRequestStatus) parseString(CommunicationRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        JsonArray mediumArray = getJsonArray(jsonObject, "medium");
        if (mediumArray != null) {
            for (int i = 0; i < mediumArray.size(); i++) {
                builder.medium(parseCodeableConcept("medium", mediumArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray aboutArray = getJsonArray(jsonObject, "about");
        if (aboutArray != null) {
            for (int i = 0; i < aboutArray.size(); i++) {
                builder.about(parseReference("about", aboutArray.getJsonObject(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        JsonArray payloadArray = getJsonArray(jsonObject, "payload");
        if (payloadArray != null) {
            for (int i = 0; i < payloadArray.size(); i++) {
                builder.payload(parseCommunicationRequestPayload("payload", payloadArray.getJsonObject(i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray recipientArray = getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                builder.recipient(parseReference("recipient", recipientArray.getJsonObject(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CommunicationRequest.Payload parseCommunicationRequestPayload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CommunicationRequest.Payload.class, jsonObject);
        }
        CommunicationRequest.Payload.Builder builder = CommunicationRequest.Payload.builder();
        parseBackboneElement(builder, jsonObject);
        builder.content(parseChoiceElement("content", jsonObject, String.class, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CompartmentDefinition parseCompartmentDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CompartmentDefinition.class, jsonObject);
        }
        CompartmentDefinition.Builder builder = CompartmentDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.code((CompartmentType) parseString(CompartmentType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.search(parseBoolean("search", getJsonValue(jsonObject, "search", JsonValue.class), jsonObject.get("_search"), -1));
        JsonArray resourceArray = getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource(parseCompartmentDefinitionResource("resource", resourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CompartmentDefinition.Resource parseCompartmentDefinitionResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CompartmentDefinition.Resource.class, jsonObject);
        }
        CompartmentDefinition.Resource.Builder builder = CompartmentDefinition.Resource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((ResourceType) parseString(ResourceType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        JsonArray paramArray = getJsonArray(jsonObject, "param", true);
        if (paramArray != null) {
            JsonArray _paramArray = jsonObject.getJsonArray("_param");
            for (int i = 0; i < paramArray.size(); i++) {
                builder.param(parseString("param", paramArray.get(i), getJsonValue(_paramArray, i), i));
            }
        }
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private Composition parseComposition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Composition.class, jsonObject);
        }
        Composition.Builder builder = Composition.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.status((CompositionStatus) parseString(CompositionStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseReference("author", authorArray.getJsonObject(i), i));
            }
        }
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.confidentiality((DocumentConfidentiality) parseString(DocumentConfidentiality.builder(), "confidentiality", getJsonValue(jsonObject, "confidentiality", JsonString.class), jsonObject.get("_confidentiality"), -1));
        JsonArray attesterArray = getJsonArray(jsonObject, "attester");
        if (attesterArray != null) {
            for (int i = 0; i < attesterArray.size(); i++) {
                builder.attester(parseCompositionAttester("attester", attesterArray.getJsonObject(i), i));
            }
        }
        builder.custodian(parseReference("custodian", getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        JsonArray relatesToArray = getJsonArray(jsonObject, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                builder.relatesTo(parseCompositionRelatesTo("relatesTo", relatesToArray.getJsonObject(i), i));
            }
        }
        JsonArray eventArray = getJsonArray(jsonObject, "event");
        if (eventArray != null) {
            for (int i = 0; i < eventArray.size(); i++) {
                builder.event(parseCompositionEvent("event", eventArray.getJsonObject(i), i));
            }
        }
        JsonArray sectionArray = getJsonArray(jsonObject, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                builder.section(parseCompositionSection("section", sectionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Composition.Attester parseCompositionAttester(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Composition.Attester.class, jsonObject);
        }
        Composition.Attester.Builder builder = Composition.Attester.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((CompositionAttestationMode) parseString(CompositionAttestationMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.time(parseDateTime("time", getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        builder.party(parseReference("party", getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Composition.Event parseCompositionEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Composition.Event.class, jsonObject);
        }
        Composition.Event.Builder builder = Composition.Event.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseReference("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Composition.RelatesTo parseCompositionRelatesTo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Composition.RelatesTo.class, jsonObject);
        }
        Composition.RelatesTo.Builder builder = Composition.RelatesTo.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.target(parseChoiceElement("target", jsonObject, Identifier.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Composition.Section parseCompositionSection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Composition.Section.class, jsonObject);
        }
        Composition.Section.Builder builder = Composition.Section.builder();
        parseBackboneElement(builder, jsonObject);
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseReference("author", authorArray.getJsonObject(i), i));
            }
        }
        builder.focus(parseReference("focus", getJsonValue(jsonObject, "focus", JsonObject.class), -1));
        builder.text(parseNarrative("text", getJsonValue(jsonObject, "text", JsonObject.class), -1));
        builder.mode((SectionMode) parseString(SectionMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", getJsonValue(jsonObject, "orderedBy", JsonObject.class), -1));
        JsonArray entryArray = getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                builder.entry(parseReference("entry", entryArray.getJsonObject(i), i));
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", getJsonValue(jsonObject, "emptyReason", JsonObject.class), -1));
        JsonArray sectionArray = getJsonArray(jsonObject, "section");
        if (sectionArray != null) {
            for (int i = 0; i < sectionArray.size(); i++) {
                builder.section(parseCompositionSection("section", sectionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap parseConceptMap(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.class, jsonObject);
        }
        ConceptMap.Builder builder = ConceptMap.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.source(parseChoiceElement("source", jsonObject, Uri.class, Canonical.class));
        builder.target(parseChoiceElement("target", jsonObject, Uri.class, Canonical.class));
        JsonArray groupArray = getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                builder.group(parseConceptMapGroup("group", groupArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group parseConceptMapGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.Group.class, jsonObject);
        }
        ConceptMap.Group.Builder builder = ConceptMap.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.source(parseUri("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.sourceVersion(parseString("sourceVersion", getJsonValue(jsonObject, "sourceVersion", JsonString.class), jsonObject.get("_sourceVersion"), -1));
        builder.target(parseUri("target", getJsonValue(jsonObject, "target", JsonString.class), jsonObject.get("_target"), -1));
        builder.targetVersion(parseString("targetVersion", getJsonValue(jsonObject, "targetVersion", JsonString.class), jsonObject.get("_targetVersion"), -1));
        JsonArray elementArray = getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                builder.element(parseConceptMapGroupElement("element", elementArray.getJsonObject(i), i));
            }
        }
        builder.unmapped(parseConceptMapGroupUnmapped("unmapped", getJsonValue(jsonObject, "unmapped", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element parseConceptMapGroupElement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.class, jsonObject);
        }
        ConceptMap.Group.Element.Builder builder = ConceptMap.Group.Element.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseConceptMapGroupElementTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element.Target parseConceptMapGroupElementTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.Target.class, jsonObject);
        }
        ConceptMap.Group.Element.Target.Builder builder = ConceptMap.Group.Element.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.equivalence((ConceptMapEquivalence) parseString(ConceptMapEquivalence.builder(), "equivalence", getJsonValue(jsonObject, "equivalence", JsonString.class), jsonObject.get("_equivalence"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray dependsOnArray = getJsonArray(jsonObject, "dependsOn");
        if (dependsOnArray != null) {
            for (int i = 0; i < dependsOnArray.size(); i++) {
                builder.dependsOn(parseConceptMapGroupElementTargetDependsOn("dependsOn", dependsOnArray.getJsonObject(i), i));
            }
        }
        JsonArray productArray = getJsonArray(jsonObject, "product");
        if (productArray != null) {
            for (int i = 0; i < productArray.size(); i++) {
                builder.product(parseConceptMapGroupElementTargetDependsOn("product", productArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Element.Target.DependsOn parseConceptMapGroupElementTargetDependsOn(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.Group.Element.Target.DependsOn.class, jsonObject);
        }
        ConceptMap.Group.Element.Target.DependsOn.Builder builder = ConceptMap.Group.Element.Target.DependsOn.builder();
        parseBackboneElement(builder, jsonObject);
        builder.property(parseUri("property", getJsonValue(jsonObject, "property", JsonString.class), jsonObject.get("_property"), -1));
        builder.system((Canonical) parseUri(Canonical.builder(), "system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private ConceptMap.Group.Unmapped parseConceptMapGroupUnmapped(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ConceptMap.Group.Unmapped.class, jsonObject);
        }
        ConceptMap.Group.Unmapped.Builder builder = ConceptMap.Group.Unmapped.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((ConceptMapGroupUnmappedMode) parseString(ConceptMapGroupUnmappedMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.url((Canonical) parseUri(Canonical.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private Condition parseCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Condition.class, jsonObject);
        }
        Condition.Builder builder = Condition.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", getJsonValue(jsonObject, "clinicalStatus", JsonObject.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", getJsonValue(jsonObject, "verificationStatus", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.severity(parseCodeableConcept("severity", getJsonValue(jsonObject, "severity", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray bodySiteArray = getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.abatement(parseChoiceElement("abatement", jsonObject, DateTime.class, Age.class, Period.class, Range.class, String.class));
        builder.recordedDate(parseDateTime("recordedDate", getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        JsonArray stageArray = getJsonArray(jsonObject, "stage");
        if (stageArray != null) {
            for (int i = 0; i < stageArray.size(); i++) {
                builder.stage(parseConditionStage("stage", stageArray.getJsonObject(i), i));
            }
        }
        JsonArray evidenceArray = getJsonArray(jsonObject, "evidence");
        if (evidenceArray != null) {
            for (int i = 0; i < evidenceArray.size(); i++) {
                builder.evidence(parseConditionEvidence("evidence", evidenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Condition.Evidence parseConditionEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Condition.Evidence.class, jsonObject);
        }
        Condition.Evidence.Builder builder = Condition.Evidence.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseReference("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Condition.Stage parseConditionStage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Condition.Stage.class, jsonObject);
        }
        Condition.Stage.Builder builder = Condition.Stage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.summary(parseCodeableConcept("summary", getJsonValue(jsonObject, "summary", JsonObject.class), -1));
        JsonArray assessmentArray = getJsonArray(jsonObject, "assessment");
        if (assessmentArray != null) {
            for (int i = 0; i < assessmentArray.size(); i++) {
                builder.assessment(parseReference("assessment", assessmentArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent parseConsent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.class, jsonObject);
        }
        Consent.Builder builder = Consent.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ConsentState) parseString(ConsentState.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.scope(parseCodeableConcept("scope", getJsonValue(jsonObject, "scope", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.dateTime(parseDateTime("dateTime", getJsonValue(jsonObject, "dateTime", JsonString.class), jsonObject.get("_dateTime"), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseReference("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray organizationArray = getJsonArray(jsonObject, "organization");
        if (organizationArray != null) {
            for (int i = 0; i < organizationArray.size(); i++) {
                builder.organization(parseReference("organization", organizationArray.getJsonObject(i), i));
            }
        }
        builder.source(parseChoiceElement("source", jsonObject, Attachment.class, Reference.class));
        JsonArray policyArray = getJsonArray(jsonObject, "policy");
        if (policyArray != null) {
            for (int i = 0; i < policyArray.size(); i++) {
                builder.policy(parseConsentPolicy("policy", policyArray.getJsonObject(i), i));
            }
        }
        builder.policyRule(parseCodeableConcept("policyRule", getJsonValue(jsonObject, "policyRule", JsonObject.class), -1));
        JsonArray verificationArray = getJsonArray(jsonObject, "verification");
        if (verificationArray != null) {
            for (int i = 0; i < verificationArray.size(); i++) {
                builder.verification(parseConsentVerification("verification", verificationArray.getJsonObject(i), i));
            }
        }
        builder.provision(parseConsentProvision("provision", getJsonValue(jsonObject, "provision", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Policy parseConsentPolicy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.Policy.class, jsonObject);
        }
        Consent.Policy.Builder builder = Consent.Policy.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authority(parseUri("authority", getJsonValue(jsonObject, "authority", JsonString.class), jsonObject.get("_authority"), -1));
        builder.uri(parseUri("uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Provision parseConsentProvision(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.Provision.class, jsonObject);
        }
        Consent.Provision.Builder builder = Consent.Provision.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ConsentProvisionType) parseString(ConsentProvisionType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray actorArray = getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                builder.actor(parseConsentProvisionActor("actor", actorArray.getJsonObject(i), i));
            }
        }
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseCodeableConcept("action", actionArray.getJsonObject(i), i));
            }
        }
        JsonArray securityLabelArray = getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                builder.securityLabel(parseCoding("securityLabel", securityLabelArray.getJsonObject(i), i));
            }
        }
        JsonArray purposeArray = getJsonArray(jsonObject, "purpose");
        if (purposeArray != null) {
            for (int i = 0; i < purposeArray.size(); i++) {
                builder.purpose(parseCoding("purpose", purposeArray.getJsonObject(i), i));
            }
        }
        JsonArray classArray = getJsonArray(jsonObject, "class");
        if (classArray != null) {
            for (int i = 0; i < classArray.size(); i++) {
                builder.clazz(parseCoding("class", classArray.getJsonObject(i), i));
            }
        }
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        builder.dataPeriod(parsePeriod("dataPeriod", getJsonValue(jsonObject, "dataPeriod", JsonObject.class), -1));
        JsonArray dataArray = getJsonArray(jsonObject, "data");
        if (dataArray != null) {
            for (int i = 0; i < dataArray.size(); i++) {
                builder.data(parseConsentProvisionData("data", dataArray.getJsonObject(i), i));
            }
        }
        JsonArray provisionArray = getJsonArray(jsonObject, "provision");
        if (provisionArray != null) {
            for (int i = 0; i < provisionArray.size(); i++) {
                builder.provision(parseConsentProvision("provision", provisionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Consent.Provision.Actor parseConsentProvisionActor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.Provision.Actor.class, jsonObject);
        }
        Consent.Provision.Actor.Builder builder = Consent.Provision.Actor.builder();
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Provision.Data parseConsentProvisionData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.Provision.Data.class, jsonObject);
        }
        Consent.Provision.Data.Builder builder = Consent.Provision.Data.builder();
        parseBackboneElement(builder, jsonObject);
        builder.meaning((ConsentDataMeaning) parseString(ConsentDataMeaning.builder(), "meaning", getJsonValue(jsonObject, "meaning", JsonString.class), jsonObject.get("_meaning"), -1));
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Consent.Verification parseConsentVerification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Consent.Verification.class, jsonObject);
        }
        Consent.Verification.Builder builder = Consent.Verification.builder();
        parseBackboneElement(builder, jsonObject);
        builder.verified(parseBoolean("verified", getJsonValue(jsonObject, "verified", JsonValue.class), jsonObject.get("_verified"), -1));
        builder.verifiedWith(parseReference("verifiedWith", getJsonValue(jsonObject, "verifiedWith", JsonObject.class), -1));
        builder.verificationDate(parseDateTime("verificationDate", getJsonValue(jsonObject, "verificationDate", JsonString.class), jsonObject.get("_verificationDate"), -1));
        stackPop();
        return builder.build();
    }

    private ContactDetail parseContactDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ContactDetail.class, jsonObject);
        }
        ContactDetail.Builder builder = ContactDetail.builder();
        parseElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ContactPoint parseContactPoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ContactPoint.class, jsonObject);
        }
        ContactPoint.Builder builder = ContactPoint.builder();
        parseElement(builder, jsonObject);
        builder.system((ContactPointSystem) parseString(ContactPointSystem.builder(), "system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.use((ContactPointUse) parseString(ContactPointUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract parseContract(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.class, jsonObject);
        }
        Contract.Builder builder = Contract.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.status((ContractStatus) parseString(ContractStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.legalState(parseCodeableConcept("legalState", getJsonValue(jsonObject, "legalState", JsonObject.class), -1));
        builder.instantiatesCanonical(parseReference("instantiatesCanonical", getJsonValue(jsonObject, "instantiatesCanonical", JsonObject.class), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", getJsonValue(jsonObject, "instantiatesUri", JsonString.class), jsonObject.get("_instantiatesUri"), -1));
        builder.contentDerivative(parseCodeableConcept("contentDerivative", getJsonValue(jsonObject, "contentDerivative", JsonObject.class), -1));
        builder.issued(parseDateTime("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.applies(parsePeriod("applies", getJsonValue(jsonObject, "applies", JsonObject.class), -1));
        builder.expirationType(parseCodeableConcept("expirationType", getJsonValue(jsonObject, "expirationType", JsonObject.class), -1));
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        JsonArray authorityArray = getJsonArray(jsonObject, "authority");
        if (authorityArray != null) {
            for (int i = 0; i < authorityArray.size(); i++) {
                builder.authority(parseReference("authority", authorityArray.getJsonObject(i), i));
            }
        }
        JsonArray domainArray = getJsonArray(jsonObject, "domain");
        if (domainArray != null) {
            for (int i = 0; i < domainArray.size(); i++) {
                builder.domain(parseReference("domain", domainArray.getJsonObject(i), i));
            }
        }
        JsonArray siteArray = getJsonArray(jsonObject, "site");
        if (siteArray != null) {
            for (int i = 0; i < siteArray.size(); i++) {
                builder.site(parseReference("site", siteArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        JsonArray aliasArray = getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonValue(_aliasArray, i), i));
            }
        }
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.scope(parseCodeableConcept("scope", getJsonValue(jsonObject, "scope", JsonObject.class), -1));
        builder.topic(parseChoiceElement("topic", jsonObject, CodeableConcept.class, Reference.class));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray subTypeArray = getJsonArray(jsonObject, "subType");
        if (subTypeArray != null) {
            for (int i = 0; i < subTypeArray.size(); i++) {
                builder.subType(parseCodeableConcept("subType", subTypeArray.getJsonObject(i), i));
            }
        }
        builder.contentDefinition(parseContractContentDefinition("contentDefinition", getJsonValue(jsonObject, "contentDefinition", JsonObject.class), -1));
        JsonArray termArray = getJsonArray(jsonObject, "term");
        if (termArray != null) {
            for (int i = 0; i < termArray.size(); i++) {
                builder.term(parseContractTerm("term", termArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray relevantHistoryArray = getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.getJsonObject(i), i));
            }
        }
        JsonArray signerArray = getJsonArray(jsonObject, "signer");
        if (signerArray != null) {
            for (int i = 0; i < signerArray.size(); i++) {
                builder.signer(parseContractSigner("signer", signerArray.getJsonObject(i), i));
            }
        }
        JsonArray friendlyArray = getJsonArray(jsonObject, "friendly");
        if (friendlyArray != null) {
            for (int i = 0; i < friendlyArray.size(); i++) {
                builder.friendly(parseContractFriendly("friendly", friendlyArray.getJsonObject(i), i));
            }
        }
        JsonArray legalArray = getJsonArray(jsonObject, "legal");
        if (legalArray != null) {
            for (int i = 0; i < legalArray.size(); i++) {
                builder.legal(parseContractLegal("legal", legalArray.getJsonObject(i), i));
            }
        }
        JsonArray ruleArray = getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                builder.rule(parseContractRule("rule", ruleArray.getJsonObject(i), i));
            }
        }
        builder.legallyBinding(parseChoiceElement("legallyBinding", jsonObject, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.ContentDefinition parseContractContentDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.ContentDefinition.class, jsonObject);
        }
        Contract.ContentDefinition.Builder builder = Contract.ContentDefinition.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.publisher(parseReference("publisher", getJsonValue(jsonObject, "publisher", JsonObject.class), -1));
        builder.publicationDate(parseDateTime("publicationDate", getJsonValue(jsonObject, "publicationDate", JsonString.class), jsonObject.get("_publicationDate"), -1));
        builder.publicationStatus((ContractPublicationStatus) parseString(ContractPublicationStatus.builder(), "publicationStatus", getJsonValue(jsonObject, "publicationStatus", JsonString.class), jsonObject.get("_publicationStatus"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Friendly parseContractFriendly(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Friendly.class, jsonObject);
        }
        Contract.Friendly.Builder builder = Contract.Friendly.builder();
        parseBackboneElement(builder, jsonObject);
        builder.content(parseChoiceElement("content", jsonObject, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Legal parseContractLegal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Legal.class, jsonObject);
        }
        Contract.Legal.Builder builder = Contract.Legal.builder();
        parseBackboneElement(builder, jsonObject);
        builder.content(parseChoiceElement("content", jsonObject, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Rule parseContractRule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Rule.class, jsonObject);
        }
        Contract.Rule.Builder builder = Contract.Rule.builder();
        parseBackboneElement(builder, jsonObject);
        builder.content(parseChoiceElement("content", jsonObject, Attachment.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Signer parseContractSigner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Signer.class, jsonObject);
        }
        Contract.Signer.Builder builder = Contract.Signer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCoding("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.party(parseReference("party", getJsonValue(jsonObject, "party", JsonObject.class), -1));
        JsonArray signatureArray = getJsonArray(jsonObject, "signature");
        if (signatureArray != null) {
            for (int i = 0; i < signatureArray.size(); i++) {
                builder.signature(parseSignature("signature", signatureArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term parseContractTerm(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.class, jsonObject);
        }
        Contract.Term.Builder builder = Contract.Term.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.issued(parseDateTime("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.applies(parsePeriod("applies", getJsonValue(jsonObject, "applies", JsonObject.class), -1));
        builder.topic(parseChoiceElement("topic", jsonObject, CodeableConcept.class, Reference.class));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray securityLabelArray = getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                builder.securityLabel(parseContractTermSecurityLabel("securityLabel", securityLabelArray.getJsonObject(i), i));
            }
        }
        builder.offer(parseContractTermOffer("offer", getJsonValue(jsonObject, "offer", JsonObject.class), -1));
        JsonArray assetArray = getJsonArray(jsonObject, "asset");
        if (assetArray != null) {
            for (int i = 0; i < assetArray.size(); i++) {
                builder.asset(parseContractTermAsset("asset", assetArray.getJsonObject(i), i));
            }
        }
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseContractTermAction("action", actionArray.getJsonObject(i), i));
            }
        }
        JsonArray groupArray = getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                builder.group(parseContractTerm("group", groupArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Action parseContractTermAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Action.class, jsonObject);
        }
        Contract.Term.Action.Builder builder = Contract.Term.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseContractTermActionSubject("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.intent(parseCodeableConcept("intent", getJsonValue(jsonObject, "intent", JsonObject.class), -1));
        JsonArray linkIdArray = getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonValue(_linkIdArray, i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.context(parseReference("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray contextLinkIdArray = getJsonArray(jsonObject, "contextLinkId", true);
        if (contextLinkIdArray != null) {
            JsonArray _contextLinkIdArray = jsonObject.getJsonArray("_contextLinkId");
            for (int i = 0; i < contextLinkIdArray.size(); i++) {
                builder.contextLinkId(parseString("contextLinkId", contextLinkIdArray.get(i), getJsonValue(_contextLinkIdArray, i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        JsonArray requesterArray = getJsonArray(jsonObject, "requester");
        if (requesterArray != null) {
            for (int i = 0; i < requesterArray.size(); i++) {
                builder.requester(parseReference("requester", requesterArray.getJsonObject(i), i));
            }
        }
        JsonArray requesterLinkIdArray = getJsonArray(jsonObject, "requesterLinkId", true);
        if (requesterLinkIdArray != null) {
            JsonArray _requesterLinkIdArray = jsonObject.getJsonArray("_requesterLinkId");
            for (int i = 0; i < requesterLinkIdArray.size(); i++) {
                builder.requesterLinkId(parseString("requesterLinkId", requesterLinkIdArray.get(i), getJsonValue(_requesterLinkIdArray, i), i));
            }
        }
        JsonArray performerTypeArray = getJsonArray(jsonObject, "performerType");
        if (performerTypeArray != null) {
            for (int i = 0; i < performerTypeArray.size(); i++) {
                builder.performerType(parseCodeableConcept("performerType", performerTypeArray.getJsonObject(i), i));
            }
        }
        builder.performerRole(parseCodeableConcept("performerRole", getJsonValue(jsonObject, "performerRole", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray performerLinkIdArray = getJsonArray(jsonObject, "performerLinkId", true);
        if (performerLinkIdArray != null) {
            JsonArray _performerLinkIdArray = jsonObject.getJsonArray("_performerLinkId");
            for (int i = 0; i < performerLinkIdArray.size(); i++) {
                builder.performerLinkId(parseString("performerLinkId", performerLinkIdArray.get(i), getJsonValue(_performerLinkIdArray, i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonArray = getJsonArray(jsonObject, "reason", true);
        if (reasonArray != null) {
            JsonArray _reasonArray = jsonObject.getJsonArray("_reason");
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseString("reason", reasonArray.get(i), getJsonValue(_reasonArray, i), i));
            }
        }
        JsonArray reasonLinkIdArray = getJsonArray(jsonObject, "reasonLinkId", true);
        if (reasonLinkIdArray != null) {
            JsonArray _reasonLinkIdArray = jsonObject.getJsonArray("_reasonLinkId");
            for (int i = 0; i < reasonLinkIdArray.size(); i++) {
                builder.reasonLinkId(parseString("reasonLinkId", reasonLinkIdArray.get(i), getJsonValue(_reasonLinkIdArray, i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray securityLabelNumberArray = getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonValue(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Action.Subject parseContractTermActionSubject(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Action.Subject.class, jsonObject);
        }
        Contract.Term.Action.Subject.Builder builder = Contract.Term.Action.Subject.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray referenceArray = getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                builder.reference(parseReference("reference", referenceArray.getJsonObject(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset parseContractTermAsset(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Asset.class, jsonObject);
        }
        Contract.Term.Asset.Builder builder = Contract.Term.Asset.builder();
        parseBackboneElement(builder, jsonObject);
        builder.scope(parseCodeableConcept("scope", getJsonValue(jsonObject, "scope", JsonObject.class), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray typeReferenceArray = getJsonArray(jsonObject, "typeReference");
        if (typeReferenceArray != null) {
            for (int i = 0; i < typeReferenceArray.size(); i++) {
                builder.typeReference(parseReference("typeReference", typeReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray subtypeArray = getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            for (int i = 0; i < subtypeArray.size(); i++) {
                builder.subtype(parseCodeableConcept("subtype", subtypeArray.getJsonObject(i), i));
            }
        }
        builder.relationship(parseCoding("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        JsonArray contextArray = getJsonArray(jsonObject, "context");
        if (contextArray != null) {
            for (int i = 0; i < contextArray.size(); i++) {
                builder.context(parseContractTermAssetContext("context", contextArray.getJsonObject(i), i));
            }
        }
        builder.condition(parseString("condition", getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        JsonArray periodTypeArray = getJsonArray(jsonObject, "periodType");
        if (periodTypeArray != null) {
            for (int i = 0; i < periodTypeArray.size(); i++) {
                builder.periodType(parseCodeableConcept("periodType", periodTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray periodArray = getJsonArray(jsonObject, "period");
        if (periodArray != null) {
            for (int i = 0; i < periodArray.size(); i++) {
                builder.period(parsePeriod("period", periodArray.getJsonObject(i), i));
            }
        }
        JsonArray usePeriodArray = getJsonArray(jsonObject, "usePeriod");
        if (usePeriodArray != null) {
            for (int i = 0; i < usePeriodArray.size(); i++) {
                builder.usePeriod(parsePeriod("usePeriod", usePeriodArray.getJsonObject(i), i));
            }
        }
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray linkIdArray = getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonValue(_linkIdArray, i), i));
            }
        }
        JsonArray answerArray = getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                builder.answer(parseContractTermOfferAnswer("answer", answerArray.getJsonObject(i), i));
            }
        }
        JsonArray securityLabelNumberArray = getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonValue(_securityLabelNumberArray, i), i));
            }
        }
        JsonArray valuedItemArray = getJsonArray(jsonObject, "valuedItem");
        if (valuedItemArray != null) {
            for (int i = 0; i < valuedItemArray.size(); i++) {
                builder.valuedItem(parseContractTermAssetValuedItem("valuedItem", valuedItemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset.Context parseContractTermAssetContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Asset.Context.class, jsonObject);
        }
        Contract.Term.Asset.Context.Builder builder = Contract.Term.Asset.Context.builder();
        parseBackboneElement(builder, jsonObject);
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Asset.ValuedItem parseContractTermAssetValuedItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Asset.ValuedItem.class, jsonObject);
        }
        Contract.Term.Asset.ValuedItem.Builder builder = Contract.Term.Asset.ValuedItem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.entity(parseChoiceElement("entity", jsonObject, CodeableConcept.class, Reference.class));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.effectiveTime(parseDateTime("effectiveTime", getJsonValue(jsonObject, "effectiveTime", JsonString.class), jsonObject.get("_effectiveTime"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.points(parseDecimal("points", getJsonValue(jsonObject, "points", JsonNumber.class), jsonObject.get("_points"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.payment(parseString("payment", getJsonValue(jsonObject, "payment", JsonString.class), jsonObject.get("_payment"), -1));
        builder.paymentDate(parseDateTime("paymentDate", getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1));
        builder.responsible(parseReference("responsible", getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.recipient(parseReference("recipient", getJsonValue(jsonObject, "recipient", JsonObject.class), -1));
        JsonArray linkIdArray = getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonValue(_linkIdArray, i), i));
            }
        }
        JsonArray securityLabelNumberArray = getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonValue(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer parseContractTermOffer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Offer.class, jsonObject);
        }
        Contract.Term.Offer.Builder builder = Contract.Term.Offer.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray partyArray = getJsonArray(jsonObject, "party");
        if (partyArray != null) {
            for (int i = 0; i < partyArray.size(); i++) {
                builder.party(parseContractTermOfferParty("party", partyArray.getJsonObject(i), i));
            }
        }
        builder.topic(parseReference("topic", getJsonValue(jsonObject, "topic", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.decision(parseCodeableConcept("decision", getJsonValue(jsonObject, "decision", JsonObject.class), -1));
        JsonArray decisionModeArray = getJsonArray(jsonObject, "decisionMode");
        if (decisionModeArray != null) {
            for (int i = 0; i < decisionModeArray.size(); i++) {
                builder.decisionMode(parseCodeableConcept("decisionMode", decisionModeArray.getJsonObject(i), i));
            }
        }
        JsonArray answerArray = getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                builder.answer(parseContractTermOfferAnswer("answer", answerArray.getJsonObject(i), i));
            }
        }
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray linkIdArray = getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (int i = 0; i < linkIdArray.size(); i++) {
                builder.linkId(parseString("linkId", linkIdArray.get(i), getJsonValue(_linkIdArray, i), i));
            }
        }
        JsonArray securityLabelNumberArray = getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (int i = 0; i < securityLabelNumberArray.size(); i++) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", securityLabelNumberArray.get(i), getJsonValue(_securityLabelNumberArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer.Answer parseContractTermOfferAnswer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Offer.Answer.class, jsonObject);
        }
        Contract.Term.Offer.Answer.Builder builder = Contract.Term.Offer.Answer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Contract.Term.Offer.Party parseContractTermOfferParty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.Offer.Party.class, jsonObject);
        }
        Contract.Term.Offer.Party.Builder builder = Contract.Term.Offer.Party.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray referenceArray = getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                builder.reference(parseReference("reference", referenceArray.getJsonObject(i), i));
            }
        }
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Contract.Term.SecurityLabel parseContractTermSecurityLabel(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contract.Term.SecurityLabel.class, jsonObject);
        }
        Contract.Term.SecurityLabel.Builder builder = Contract.Term.SecurityLabel.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray numberArray = getJsonArray(jsonObject, "number", true);
        if (numberArray != null) {
            JsonArray _numberArray = jsonObject.getJsonArray("_number");
            for (int i = 0; i < numberArray.size(); i++) {
                builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", numberArray.get(i), getJsonValue(_numberArray, i), i));
            }
        }
        builder.classification(parseCoding("classification", getJsonValue(jsonObject, "classification", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCoding("category", categoryArray.getJsonObject(i), i));
            }
        }
        JsonArray controlArray = getJsonArray(jsonObject, "control");
        if (controlArray != null) {
            for (int i = 0; i < controlArray.size(); i++) {
                builder.control(parseCoding("control", controlArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Contributor parseContributor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Contributor.class, jsonObject);
        }
        Contributor.Builder builder = Contributor.builder();
        parseElement(builder, jsonObject);
        builder.type((ContributorType) parseString(ContributorType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage parseCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Coverage.class, jsonObject);
        }
        Coverage.Builder builder = Coverage.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((CoverageStatus) parseString(CoverageStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.policyHolder(parseReference("policyHolder", getJsonValue(jsonObject, "policyHolder", JsonObject.class), -1));
        builder.subscriber(parseReference("subscriber", getJsonValue(jsonObject, "subscriber", JsonObject.class), -1));
        builder.subscriberId(parseString("subscriberId", getJsonValue(jsonObject, "subscriberId", JsonString.class), jsonObject.get("_subscriberId"), -1));
        builder.beneficiary(parseReference("beneficiary", getJsonValue(jsonObject, "beneficiary", JsonObject.class), -1));
        builder.dependent(parseString("dependent", getJsonValue(jsonObject, "dependent", JsonString.class), jsonObject.get("_dependent"), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray payorArray = getJsonArray(jsonObject, "payor");
        if (payorArray != null) {
            for (int i = 0; i < payorArray.size(); i++) {
                builder.payor(parseReference("payor", payorArray.getJsonObject(i), i));
            }
        }
        JsonArray classArray = getJsonArray(jsonObject, "class");
        if (classArray != null) {
            for (int i = 0; i < classArray.size(); i++) {
                builder.clazz(parseCoverageClass("class", classArray.getJsonObject(i), i));
            }
        }
        builder.order((PositiveInt) parseInteger(PositiveInt.builder(), "order", getJsonValue(jsonObject, "order", JsonNumber.class), jsonObject.get("_order"), -1));
        builder.network(parseString("network", getJsonValue(jsonObject, "network", JsonString.class), jsonObject.get("_network"), -1));
        JsonArray costToBeneficiaryArray = getJsonArray(jsonObject, "costToBeneficiary");
        if (costToBeneficiaryArray != null) {
            for (int i = 0; i < costToBeneficiaryArray.size(); i++) {
                builder.costToBeneficiary(parseCoverageCostToBeneficiary("costToBeneficiary", costToBeneficiaryArray.getJsonObject(i), i));
            }
        }
        builder.subrogation(parseBoolean("subrogation", getJsonValue(jsonObject, "subrogation", JsonValue.class), jsonObject.get("_subrogation"), -1));
        JsonArray contractArray = getJsonArray(jsonObject, "contract");
        if (contractArray != null) {
            for (int i = 0; i < contractArray.size(); i++) {
                builder.contract(parseReference("contract", contractArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage.Class parseCoverageClass(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Coverage.Class.class, jsonObject);
        }
        Coverage.Class.Builder builder = Coverage.Class.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    private Coverage.CostToBeneficiary parseCoverageCostToBeneficiary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Coverage.CostToBeneficiary.class, jsonObject);
        }
        Coverage.CostToBeneficiary.Builder builder = Coverage.CostToBeneficiary.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, SimpleQuantity.class, Money.class));
        JsonArray exceptionArray = getJsonArray(jsonObject, "exception");
        if (exceptionArray != null) {
            for (int i = 0; i < exceptionArray.size(); i++) {
                builder.exception(parseCoverageCostToBeneficiaryException("exception", exceptionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Coverage.CostToBeneficiary.Exception parseCoverageCostToBeneficiaryException(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Coverage.CostToBeneficiary.Exception.class, jsonObject);
        }
        Coverage.CostToBeneficiary.Exception.Builder builder = Coverage.CostToBeneficiary.Exception.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest parseCoverageEligibilityRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.class, jsonObject);
        }
        CoverageEligibilityRequest.Builder builder = CoverageEligibilityRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EligibilityRequestStatus) parseString(EligibilityRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        JsonArray purposeArray = getJsonArray(jsonObject, "purpose", true);
        if (purposeArray != null) {
            JsonArray _purposeArray = jsonObject.getJsonArray("_purpose");
            for (int i = 0; i < purposeArray.size(); i++) {
                builder.purpose((EligibilityRequestPurpose) parseString(EligibilityRequestPurpose.builder(), "purpose", purposeArray.get(i), getJsonValue(_purposeArray, i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.facility(parseReference("facility", getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseCoverageEligibilityRequestSupportingInfo("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseCoverageEligibilityRequestInsurance("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseCoverageEligibilityRequestItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Insurance parseCoverageEligibilityRequestInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Insurance.class, jsonObject);
        }
        CoverageEligibilityRequest.Insurance.Builder builder = CoverageEligibilityRequest.Insurance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.focal(parseBoolean("focal", getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        builder.businessArrangement(parseString("businessArrangement", getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Item parseCoverageEligibilityRequestItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Item.class, jsonObject);
        }
        CoverageEligibilityRequest.Item.Builder builder = CoverageEligibilityRequest.Item.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray supportingInfoSequenceArray = getJsonArray(jsonObject, "supportingInfoSequence", true);
        if (supportingInfoSequenceArray != null) {
            JsonArray _supportingInfoSequenceArray = jsonObject.getJsonArray("_supportingInfoSequence");
            for (int i = 0; i < supportingInfoSequenceArray.size(); i++) {
                builder.supportingInfoSequence((PositiveInt) parseInteger(PositiveInt.builder(), "supportingInfoSequence", supportingInfoSequenceArray.get(i), getJsonValue(_supportingInfoSequenceArray, i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.facility(parseReference("facility", getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray diagnosisArray = getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                builder.diagnosis(parseCoverageEligibilityRequestItemDiagnosis("diagnosis", diagnosisArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseReference("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.Item.Diagnosis parseCoverageEligibilityRequestItemDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.Item.Diagnosis.class, jsonObject);
        }
        CoverageEligibilityRequest.Item.Diagnosis.Builder builder = CoverageEligibilityRequest.Item.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.diagnosis(parseChoiceElement("diagnosis", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityRequest.SupportingInfo parseCoverageEligibilityRequestSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityRequest.SupportingInfo.class, jsonObject);
        }
        CoverageEligibilityRequest.SupportingInfo.Builder builder = CoverageEligibilityRequest.SupportingInfo.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.information(parseReference("information", getJsonValue(jsonObject, "information", JsonObject.class), -1));
        builder.appliesToAll(parseBoolean("appliesToAll", getJsonValue(jsonObject, "appliesToAll", JsonValue.class), jsonObject.get("_appliesToAll"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse parseCoverageEligibilityResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.class, jsonObject);
        }
        CoverageEligibilityResponse.Builder builder = CoverageEligibilityResponse.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EligibilityResponseStatus) parseString(EligibilityResponseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray purposeArray = getJsonArray(jsonObject, "purpose", true);
        if (purposeArray != null) {
            JsonArray _purposeArray = jsonObject.getJsonArray("_purpose");
            for (int i = 0; i < purposeArray.size(); i++) {
                builder.purpose((EligibilityResponsePurpose) parseString(EligibilityResponsePurpose.builder(), "purpose", purposeArray.get(i), getJsonValue(_purposeArray, i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.requestor(parseReference("requestor", getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseCoverageEligibilityResponseInsurance("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        builder.preAuthRef(parseString("preAuthRef", getJsonValue(jsonObject, "preAuthRef", JsonString.class), jsonObject.get("_preAuthRef"), -1));
        builder.form(parseCodeableConcept("form", getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray errorArray = getJsonArray(jsonObject, "error");
        if (errorArray != null) {
            for (int i = 0; i < errorArray.size(); i++) {
                builder.error(parseCoverageEligibilityResponseError("error", errorArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Error parseCoverageEligibilityResponseError(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Error.class, jsonObject);
        }
        CoverageEligibilityResponse.Error.Builder builder = CoverageEligibilityResponse.Error.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance parseCoverageEligibilityResponseInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.class, jsonObject);
        }
        CoverageEligibilityResponse.Insurance.Builder builder = CoverageEligibilityResponse.Insurance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        builder.inforce(parseBoolean("inforce", getJsonValue(jsonObject, "inforce", JsonValue.class), jsonObject.get("_inforce"), -1));
        builder.benefitPeriod(parsePeriod("benefitPeriod", getJsonValue(jsonObject, "benefitPeriod", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseCoverageEligibilityResponseInsuranceItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance.Item parseCoverageEligibilityResponseInsuranceItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.Item.class, jsonObject);
        }
        CoverageEligibilityResponse.Insurance.Item.Builder builder = CoverageEligibilityResponse.Insurance.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.excluded(parseBoolean("excluded", getJsonValue(jsonObject, "excluded", JsonValue.class), jsonObject.get("_excluded"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.network(parseCodeableConcept("network", getJsonValue(jsonObject, "network", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.term(parseCodeableConcept("term", getJsonValue(jsonObject, "term", JsonObject.class), -1));
        JsonArray benefitArray = getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                builder.benefit(parseCoverageEligibilityResponseInsuranceItemBenefit("benefit", benefitArray.getJsonObject(i), i));
            }
        }
        builder.authorizationRequired(parseBoolean("authorizationRequired", getJsonValue(jsonObject, "authorizationRequired", JsonValue.class), jsonObject.get("_authorizationRequired"), -1));
        JsonArray authorizationSupportingArray = getJsonArray(jsonObject, "authorizationSupporting");
        if (authorizationSupportingArray != null) {
            for (int i = 0; i < authorizationSupportingArray.size(); i++) {
                builder.authorizationSupporting(parseCodeableConcept("authorizationSupporting", authorizationSupportingArray.getJsonObject(i), i));
            }
        }
        builder.authorizationUrl(parseUri("authorizationUrl", getJsonValue(jsonObject, "authorizationUrl", JsonString.class), jsonObject.get("_authorizationUrl"), -1));
        stackPop();
        return builder.build();
    }

    private CoverageEligibilityResponse.Insurance.Item.Benefit parseCoverageEligibilityResponseInsuranceItemBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(CoverageEligibilityResponse.Insurance.Item.Benefit.class, jsonObject);
        }
        CoverageEligibilityResponse.Insurance.Item.Benefit.Builder builder = CoverageEligibilityResponse.Insurance.Item.Benefit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.allowed(parseChoiceElement("allowed", jsonObject, UnsignedInt.class, String.class, Money.class));
        builder.used(parseChoiceElement("used", jsonObject, UnsignedInt.class, String.class, Money.class));
        stackPop();
        return builder.build();
    }

    private DataRequirement parseDataRequirement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DataRequirement.class, jsonObject);
        }
        DataRequirement.Builder builder = DataRequirement.builder();
        parseElement(builder, jsonObject);
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray profileArray = getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonValue(_profileArray, i), i));
            }
        }
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray mustSupportArray = getJsonArray(jsonObject, "mustSupport", true);
        if (mustSupportArray != null) {
            JsonArray _mustSupportArray = jsonObject.getJsonArray("_mustSupport");
            for (int i = 0; i < mustSupportArray.size(); i++) {
                builder.mustSupport(parseString("mustSupport", mustSupportArray.get(i), getJsonValue(_mustSupportArray, i), i));
            }
        }
        JsonArray codeFilterArray = getJsonArray(jsonObject, "codeFilter");
        if (codeFilterArray != null) {
            for (int i = 0; i < codeFilterArray.size(); i++) {
                builder.codeFilter(parseDataRequirementCodeFilter("codeFilter", codeFilterArray.getJsonObject(i), i));
            }
        }
        JsonArray dateFilterArray = getJsonArray(jsonObject, "dateFilter");
        if (dateFilterArray != null) {
            for (int i = 0; i < dateFilterArray.size(); i++) {
                builder.dateFilter(parseDataRequirementDateFilter("dateFilter", dateFilterArray.getJsonObject(i), i));
            }
        }
        builder.limit((PositiveInt) parseInteger(PositiveInt.builder(), "limit", getJsonValue(jsonObject, "limit", JsonNumber.class), jsonObject.get("_limit"), -1));
        JsonArray sortArray = getJsonArray(jsonObject, "sort");
        if (sortArray != null) {
            for (int i = 0; i < sortArray.size(); i++) {
                builder.sort(parseDataRequirementSort("sort", sortArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DataRequirement.CodeFilter parseDataRequirementCodeFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DataRequirement.CodeFilter.class, jsonObject);
        }
        DataRequirement.CodeFilter.Builder builder = DataRequirement.CodeFilter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.searchParam(parseString("searchParam", getJsonValue(jsonObject, "searchParam", JsonString.class), jsonObject.get("_searchParam"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCoding("code", codeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DataRequirement.DateFilter parseDataRequirementDateFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DataRequirement.DateFilter.class, jsonObject);
        }
        DataRequirement.DateFilter.Builder builder = DataRequirement.DateFilter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.searchParam(parseString("searchParam", getJsonValue(jsonObject, "searchParam", JsonString.class), jsonObject.get("_searchParam"), -1));
        builder.value(parseChoiceElement("value", jsonObject, DateTime.class, Period.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private DataRequirement.Sort parseDataRequirementSort(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DataRequirement.Sort.class, jsonObject);
        }
        DataRequirement.Sort.Builder builder = DataRequirement.Sort.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.direction((SortDirection) parseString(SortDirection.builder(), "direction", getJsonValue(jsonObject, "direction", JsonString.class), jsonObject.get("_direction"), -1));
        stackPop();
        return builder.build();
    }

    private Date parseDate(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Date.Builder builder = Date.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private DateTime parseDateTime(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        DateTime.Builder builder = DateTime.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Decimal parseDecimal(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Decimal.Builder builder = Decimal.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.NUMBER) {
            JsonNumber jsonNumber = (JsonNumber) jsonValue;
            builder.value(jsonNumber.bigDecimalValue());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: NUMBER but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue parseDetectedIssue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DetectedIssue.class, jsonObject);
        }
        DetectedIssue.Builder builder = DetectedIssue.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((DetectedIssueStatus) parseString(DetectedIssueStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.severity((DetectedIssueSeverity) parseString(DetectedIssueSeverity.builder(), "severity", getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.identified(parseChoiceElement("identified", jsonObject, DateTime.class, Period.class));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray implicatedArray = getJsonArray(jsonObject, "implicated");
        if (implicatedArray != null) {
            for (int i = 0; i < implicatedArray.size(); i++) {
                builder.implicated(parseReference("implicated", implicatedArray.getJsonObject(i), i));
            }
        }
        JsonArray evidenceArray = getJsonArray(jsonObject, "evidence");
        if (evidenceArray != null) {
            for (int i = 0; i < evidenceArray.size(); i++) {
                builder.evidence(parseDetectedIssueEvidence("evidence", evidenceArray.getJsonObject(i), i));
            }
        }
        builder.detail(parseString("detail", getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        builder.reference(parseUri("reference", getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        JsonArray mitigationArray = getJsonArray(jsonObject, "mitigation");
        if (mitigationArray != null) {
            for (int i = 0; i < mitigationArray.size(); i++) {
                builder.mitigation(parseDetectedIssueMitigation("mitigation", mitigationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue.Evidence parseDetectedIssueEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DetectedIssue.Evidence.class, jsonObject);
        }
        DetectedIssue.Evidence.Builder builder = DetectedIssue.Evidence.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseReference("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DetectedIssue.Mitigation parseDetectedIssueMitigation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DetectedIssue.Mitigation.class, jsonObject);
        }
        DetectedIssue.Mitigation.Builder builder = DetectedIssue.Mitigation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.action(parseCodeableConcept("action", getJsonValue(jsonObject, "action", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Device parseDevice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.class, jsonObject);
        }
        Device.Builder builder = Device.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.definition(parseReference("definition", getJsonValue(jsonObject, "definition", JsonObject.class), -1));
        JsonArray udiCarrierArray = getJsonArray(jsonObject, "udiCarrier");
        if (udiCarrierArray != null) {
            for (int i = 0; i < udiCarrierArray.size(); i++) {
                builder.udiCarrier(parseDeviceUdiCarrier("udiCarrier", udiCarrierArray.getJsonObject(i), i));
            }
        }
        builder.status((FHIRDeviceStatus) parseString(FHIRDeviceStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusReasonArray = getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.getJsonObject(i), i));
            }
        }
        builder.distinctIdentifier(parseString("distinctIdentifier", getJsonValue(jsonObject, "distinctIdentifier", JsonString.class), jsonObject.get("_distinctIdentifier"), -1));
        builder.manufacturer(parseString("manufacturer", getJsonValue(jsonObject, "manufacturer", JsonString.class), jsonObject.get("_manufacturer"), -1));
        builder.manufactureDate(parseDateTime("manufactureDate", getJsonValue(jsonObject, "manufactureDate", JsonString.class), jsonObject.get("_manufactureDate"), -1));
        builder.expirationDate(parseDateTime("expirationDate", getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        builder.lotNumber(parseString("lotNumber", getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.serialNumber(parseString("serialNumber", getJsonValue(jsonObject, "serialNumber", JsonString.class), jsonObject.get("_serialNumber"), -1));
        JsonArray deviceNameArray = getJsonArray(jsonObject, "deviceName");
        if (deviceNameArray != null) {
            for (int i = 0; i < deviceNameArray.size(); i++) {
                builder.deviceName(parseDeviceDeviceName("deviceName", deviceNameArray.getJsonObject(i), i));
            }
        }
        builder.modelNumber(parseString("modelNumber", getJsonValue(jsonObject, "modelNumber", JsonString.class), jsonObject.get("_modelNumber"), -1));
        builder.partNumber(parseString("partNumber", getJsonValue(jsonObject, "partNumber", JsonString.class), jsonObject.get("_partNumber"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray specializationArray = getJsonArray(jsonObject, "specialization");
        if (specializationArray != null) {
            for (int i = 0; i < specializationArray.size(); i++) {
                builder.specialization(parseDeviceSpecialization("specialization", specializationArray.getJsonObject(i), i));
            }
        }
        JsonArray versionArray = getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                builder.version(parseDeviceVersion("version", versionArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property(parseDeviceProperty("property", propertyArray.getJsonObject(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.owner(parseReference("owner", getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactPoint("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray safetyArray = getJsonArray(jsonObject, "safety");
        if (safetyArray != null) {
            for (int i = 0; i < safetyArray.size(); i++) {
                builder.safety(parseCodeableConcept("safety", safetyArray.getJsonObject(i), i));
            }
        }
        builder.parent(parseReference("parent", getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Device.DeviceName parseDeviceDeviceName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.DeviceName.class, jsonObject);
        }
        Device.DeviceName.Builder builder = Device.DeviceName.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private Device.Property parseDeviceProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.Property.class, jsonObject);
        }
        Device.Property.Builder builder = Device.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray valueQuantityArray = getJsonArray(jsonObject, "valueQuantity");
        if (valueQuantityArray != null) {
            for (int i = 0; i < valueQuantityArray.size(); i++) {
                builder.valueQuantity(parseQuantity("valueQuantity", valueQuantityArray.getJsonObject(i), i));
            }
        }
        JsonArray valueCodeArray = getJsonArray(jsonObject, "valueCode");
        if (valueCodeArray != null) {
            for (int i = 0; i < valueCodeArray.size(); i++) {
                builder.valueCode(parseCodeableConcept("valueCode", valueCodeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Device.Specialization parseDeviceSpecialization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.Specialization.class, jsonObject);
        }
        Device.Specialization.Builder builder = Device.Specialization.builder();
        parseBackboneElement(builder, jsonObject);
        builder.systemType(parseCodeableConcept("systemType", getJsonValue(jsonObject, "systemType", JsonObject.class), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private Device.UdiCarrier parseDeviceUdiCarrier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.UdiCarrier.class, jsonObject);
        }
        Device.UdiCarrier.Builder builder = Device.UdiCarrier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.deviceIdentifier(parseString("deviceIdentifier", getJsonValue(jsonObject, "deviceIdentifier", JsonString.class), jsonObject.get("_deviceIdentifier"), -1));
        builder.issuer(parseUri("issuer", getJsonValue(jsonObject, "issuer", JsonString.class), jsonObject.get("_issuer"), -1));
        builder.jurisdiction(parseUri("jurisdiction", getJsonValue(jsonObject, "jurisdiction", JsonString.class), jsonObject.get("_jurisdiction"), -1));
        builder.carrierAIDC(parseBase64Binary("carrierAIDC", getJsonValue(jsonObject, "carrierAIDC", JsonString.class), jsonObject.get("_carrierAIDC"), -1));
        builder.carrierHRF(parseString("carrierHRF", getJsonValue(jsonObject, "carrierHRF", JsonString.class), jsonObject.get("_carrierHRF"), -1));
        builder.entryType((UDIEntryType) parseString(UDIEntryType.builder(), "entryType", getJsonValue(jsonObject, "entryType", JsonString.class), jsonObject.get("_entryType"), -1));
        stackPop();
        return builder.build();
    }

    private Device.Version parseDeviceVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Device.Version.class, jsonObject);
        }
        Device.Version.Builder builder = Device.Version.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.component(parseIdentifier("component", getJsonValue(jsonObject, "component", JsonObject.class), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition parseDeviceDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.class, jsonObject);
        }
        DeviceDefinition.Builder builder = DeviceDefinition.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray udiDeviceIdentifierArray = getJsonArray(jsonObject, "udiDeviceIdentifier");
        if (udiDeviceIdentifierArray != null) {
            for (int i = 0; i < udiDeviceIdentifierArray.size(); i++) {
                builder.udiDeviceIdentifier(parseDeviceDefinitionUdiDeviceIdentifier("udiDeviceIdentifier", udiDeviceIdentifierArray.getJsonObject(i), i));
            }
        }
        builder.manufacturer(parseChoiceElement("manufacturer", jsonObject, String.class, Reference.class));
        JsonArray deviceNameArray = getJsonArray(jsonObject, "deviceName");
        if (deviceNameArray != null) {
            for (int i = 0; i < deviceNameArray.size(); i++) {
                builder.deviceName(parseDeviceDefinitionDeviceName("deviceName", deviceNameArray.getJsonObject(i), i));
            }
        }
        builder.modelNumber(parseString("modelNumber", getJsonValue(jsonObject, "modelNumber", JsonString.class), jsonObject.get("_modelNumber"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray specializationArray = getJsonArray(jsonObject, "specialization");
        if (specializationArray != null) {
            for (int i = 0; i < specializationArray.size(); i++) {
                builder.specialization(parseDeviceDefinitionSpecialization("specialization", specializationArray.getJsonObject(i), i));
            }
        }
        JsonArray versionArray = getJsonArray(jsonObject, "version", true);
        if (versionArray != null) {
            JsonArray _versionArray = jsonObject.getJsonArray("_version");
            for (int i = 0; i < versionArray.size(); i++) {
                builder.version(parseString("version", versionArray.get(i), getJsonValue(_versionArray, i), i));
            }
        }
        JsonArray safetyArray = getJsonArray(jsonObject, "safety");
        if (safetyArray != null) {
            for (int i = 0; i < safetyArray.size(); i++) {
                builder.safety(parseCodeableConcept("safety", safetyArray.getJsonObject(i), i));
            }
        }
        JsonArray shelfLifeStorageArray = getJsonArray(jsonObject, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            for (int i = 0; i < shelfLifeStorageArray.size(); i++) {
                builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", shelfLifeStorageArray.getJsonObject(i), i));
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray languageCodeArray = getJsonArray(jsonObject, "languageCode");
        if (languageCodeArray != null) {
            for (int i = 0; i < languageCodeArray.size(); i++) {
                builder.languageCode(parseCodeableConcept("languageCode", languageCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray capabilityArray = getJsonArray(jsonObject, "capability");
        if (capabilityArray != null) {
            for (int i = 0; i < capabilityArray.size(); i++) {
                builder.capability(parseDeviceDefinitionCapability("capability", capabilityArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property(parseDeviceDefinitionProperty("property", propertyArray.getJsonObject(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactPoint("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.onlineInformation(parseUri("onlineInformation", getJsonValue(jsonObject, "onlineInformation", JsonString.class), jsonObject.get("_onlineInformation"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.parentDevice(parseReference("parentDevice", getJsonValue(jsonObject, "parentDevice", JsonObject.class), -1));
        JsonArray materialArray = getJsonArray(jsonObject, "material");
        if (materialArray != null) {
            for (int i = 0; i < materialArray.size(); i++) {
                builder.material(parseDeviceDefinitionMaterial("material", materialArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Capability parseDeviceDefinitionCapability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.Capability.class, jsonObject);
        }
        DeviceDefinition.Capability.Builder builder = DeviceDefinition.Capability.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray descriptionArray = getJsonArray(jsonObject, "description");
        if (descriptionArray != null) {
            for (int i = 0; i < descriptionArray.size(); i++) {
                builder.description(parseCodeableConcept("description", descriptionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.DeviceName parseDeviceDefinitionDeviceName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.DeviceName.class, jsonObject);
        }
        DeviceDefinition.DeviceName.Builder builder = DeviceDefinition.DeviceName.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Material parseDeviceDefinitionMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.Material.class, jsonObject);
        }
        DeviceDefinition.Material.Builder builder = DeviceDefinition.Material.builder();
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseCodeableConcept("substance", getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        builder.alternate(parseBoolean("alternate", getJsonValue(jsonObject, "alternate", JsonValue.class), jsonObject.get("_alternate"), -1));
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", getJsonValue(jsonObject, "allergenicIndicator", JsonValue.class), jsonObject.get("_allergenicIndicator"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Property parseDeviceDefinitionProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.Property.class, jsonObject);
        }
        DeviceDefinition.Property.Builder builder = DeviceDefinition.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray valueQuantityArray = getJsonArray(jsonObject, "valueQuantity");
        if (valueQuantityArray != null) {
            for (int i = 0; i < valueQuantityArray.size(); i++) {
                builder.valueQuantity(parseQuantity("valueQuantity", valueQuantityArray.getJsonObject(i), i));
            }
        }
        JsonArray valueCodeArray = getJsonArray(jsonObject, "valueCode");
        if (valueCodeArray != null) {
            for (int i = 0; i < valueCodeArray.size(); i++) {
                builder.valueCode(parseCodeableConcept("valueCode", valueCodeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.Specialization parseDeviceDefinitionSpecialization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.Specialization.class, jsonObject);
        }
        DeviceDefinition.Specialization.Builder builder = DeviceDefinition.Specialization.builder();
        parseBackboneElement(builder, jsonObject);
        builder.systemType(parseString("systemType", getJsonValue(jsonObject, "systemType", JsonString.class), jsonObject.get("_systemType"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceDefinition.UdiDeviceIdentifier parseDeviceDefinitionUdiDeviceIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceDefinition.UdiDeviceIdentifier.class, jsonObject);
        }
        DeviceDefinition.UdiDeviceIdentifier.Builder builder = DeviceDefinition.UdiDeviceIdentifier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.deviceIdentifier(parseString("deviceIdentifier", getJsonValue(jsonObject, "deviceIdentifier", JsonString.class), jsonObject.get("_deviceIdentifier"), -1));
        builder.issuer(parseUri("issuer", getJsonValue(jsonObject, "issuer", JsonString.class), jsonObject.get("_issuer"), -1));
        builder.jurisdiction(parseUri("jurisdiction", getJsonValue(jsonObject, "jurisdiction", JsonString.class), jsonObject.get("_jurisdiction"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceMetric parseDeviceMetric(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceMetric.class, jsonObject);
        }
        DeviceMetric.Builder builder = DeviceMetric.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.parent(parseReference("parent", getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        builder.operationalStatus((DeviceMetricOperationalStatus) parseString(DeviceMetricOperationalStatus.builder(), "operationalStatus", getJsonValue(jsonObject, "operationalStatus", JsonString.class), jsonObject.get("_operationalStatus"), -1));
        builder.color((DeviceMetricColor) parseString(DeviceMetricColor.builder(), "color", getJsonValue(jsonObject, "color", JsonString.class), jsonObject.get("_color"), -1));
        builder.category((DeviceMetricCategory) parseString(DeviceMetricCategory.builder(), "category", getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1));
        builder.measurementPeriod(parseTiming("measurementPeriod", getJsonValue(jsonObject, "measurementPeriod", JsonObject.class), -1));
        JsonArray calibrationArray = getJsonArray(jsonObject, "calibration");
        if (calibrationArray != null) {
            for (int i = 0; i < calibrationArray.size(); i++) {
                builder.calibration(parseDeviceMetricCalibration("calibration", calibrationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceMetric.Calibration parseDeviceMetricCalibration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceMetric.Calibration.class, jsonObject);
        }
        DeviceMetric.Calibration.Builder builder = DeviceMetric.Calibration.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((DeviceMetricCalibrationType) parseString(DeviceMetricCalibrationType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.state((DeviceMetricCalibrationState) parseString(DeviceMetricCalibrationState.builder(), "state", getJsonValue(jsonObject, "state", JsonString.class), jsonObject.get("_state"), -1));
        builder.time(parseInstant("time", getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        stackPop();
        return builder.build();
    }

    private DeviceRequest parseDeviceRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceRequest.class, jsonObject);
        }
        DeviceRequest.Builder builder = DeviceRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray priorRequestArray = getJsonArray(jsonObject, "priorRequest");
        if (priorRequestArray != null) {
            for (int i = 0; i < priorRequestArray.size(); i++) {
                builder.priorRequest(parseReference("priorRequest", priorRequestArray.getJsonObject(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.status((DeviceRequestStatus) parseString(DeviceRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.code(parseChoiceElement("code", jsonObject, Reference.class, CodeableConcept.class));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseDeviceRequestParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseReference("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray relevantHistoryArray = getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DeviceRequest.Parameter parseDeviceRequestParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceRequest.Parameter.class, jsonObject);
        }
        DeviceRequest.Parameter.Builder builder = DeviceRequest.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, CodeableConcept.class, Quantity.class, Range.class, Boolean.class));
        stackPop();
        return builder.build();
    }

    private DeviceUseStatement parseDeviceUseStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DeviceUseStatement.class, jsonObject);
        }
        DeviceUseStatement.Builder builder = DeviceUseStatement.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        builder.status((DeviceUseStatementStatus) parseString(DeviceUseStatementStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray derivedFromArray = getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.getJsonObject(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, Timing.class, Period.class, DateTime.class));
        builder.recordedOn(parseDateTime("recordedOn", getJsonValue(jsonObject, "recordedOn", JsonString.class), jsonObject.get("_recordedOn"), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.device(parseReference("device", getJsonValue(jsonObject, "device", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DiagnosticReport parseDiagnosticReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DiagnosticReport.class, jsonObject);
        }
        DiagnosticReport.Builder builder = DiagnosticReport.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        builder.status((DiagnosticReportStatus) parseString(DiagnosticReportStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, DateTime.class, Period.class));
        builder.issued(parseInstant("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseReference("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray resultsInterpreterArray = getJsonArray(jsonObject, "resultsInterpreter");
        if (resultsInterpreterArray != null) {
            for (int i = 0; i < resultsInterpreterArray.size(); i++) {
                builder.resultsInterpreter(parseReference("resultsInterpreter", resultsInterpreterArray.getJsonObject(i), i));
            }
        }
        JsonArray specimenArray = getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                builder.specimen(parseReference("specimen", specimenArray.getJsonObject(i), i));
            }
        }
        JsonArray resultArray = getJsonArray(jsonObject, "result");
        if (resultArray != null) {
            for (int i = 0; i < resultArray.size(); i++) {
                builder.result(parseReference("result", resultArray.getJsonObject(i), i));
            }
        }
        JsonArray imagingStudyArray = getJsonArray(jsonObject, "imagingStudy");
        if (imagingStudyArray != null) {
            for (int i = 0; i < imagingStudyArray.size(); i++) {
                builder.imagingStudy(parseReference("imagingStudy", imagingStudyArray.getJsonObject(i), i));
            }
        }
        JsonArray mediaArray = getJsonArray(jsonObject, "media");
        if (mediaArray != null) {
            for (int i = 0; i < mediaArray.size(); i++) {
                builder.media(parseDiagnosticReportMedia("media", mediaArray.getJsonObject(i), i));
            }
        }
        builder.conclusion(parseString("conclusion", getJsonValue(jsonObject, "conclusion", JsonString.class), jsonObject.get("_conclusion"), -1));
        JsonArray conclusionCodeArray = getJsonArray(jsonObject, "conclusionCode");
        if (conclusionCodeArray != null) {
            for (int i = 0; i < conclusionCodeArray.size(); i++) {
                builder.conclusionCode(parseCodeableConcept("conclusionCode", conclusionCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray presentedFormArray = getJsonArray(jsonObject, "presentedForm");
        if (presentedFormArray != null) {
            for (int i = 0; i < presentedFormArray.size(); i++) {
                builder.presentedForm(parseAttachment("presentedForm", presentedFormArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DiagnosticReport.Media parseDiagnosticReportMedia(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DiagnosticReport.Media.class, jsonObject);
        }
        DiagnosticReport.Media.Builder builder = DiagnosticReport.Media.builder();
        parseBackboneElement(builder, jsonObject);
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.link(parseReference("link", getJsonValue(jsonObject, "link", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentManifest parseDocumentManifest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentManifest.class, jsonObject);
        }
        DocumentManifest.Builder builder = DocumentManifest.builder();
        parseDomainResource(builder, jsonObject);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", getJsonValue(jsonObject, "masterIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseReference("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray recipientArray = getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                builder.recipient(parseReference("recipient", recipientArray.getJsonObject(i), i));
            }
        }
        builder.source(parseUri("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray contentArray = getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                builder.content(parseReference("content", contentArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArray = getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                builder.related(parseDocumentManifestRelated("related", relatedArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DocumentManifest.Related parseDocumentManifestRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentManifest.Related.class, jsonObject);
        }
        DocumentManifest.Related.Builder builder = DocumentManifest.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.ref(parseReference("ref", getJsonValue(jsonObject, "ref", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference parseDocumentReference(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentReference.class, jsonObject);
        }
        DocumentReference.Builder builder = DocumentReference.builder();
        parseDomainResource(builder, jsonObject);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", getJsonValue(jsonObject, "masterIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.docStatus((ReferredDocumentStatus) parseString(ReferredDocumentStatus.builder(), "docStatus", getJsonValue(jsonObject, "docStatus", JsonString.class), jsonObject.get("_docStatus"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.date(parseInstant("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseReference("author", authorArray.getJsonObject(i), i));
            }
        }
        builder.authenticator(parseReference("authenticator", getJsonValue(jsonObject, "authenticator", JsonObject.class), -1));
        builder.custodian(parseReference("custodian", getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        JsonArray relatesToArray = getJsonArray(jsonObject, "relatesTo");
        if (relatesToArray != null) {
            for (int i = 0; i < relatesToArray.size(); i++) {
                builder.relatesTo(parseDocumentReferenceRelatesTo("relatesTo", relatesToArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray securityLabelArray = getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            for (int i = 0; i < securityLabelArray.size(); i++) {
                builder.securityLabel(parseCodeableConcept("securityLabel", securityLabelArray.getJsonObject(i), i));
            }
        }
        JsonArray contentArray = getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                builder.content(parseDocumentReferenceContent("content", contentArray.getJsonObject(i), i));
            }
        }
        builder.context(parseDocumentReferenceContext("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference.Content parseDocumentReferenceContent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentReference.Content.class, jsonObject);
        }
        DocumentReference.Content.Builder builder = DocumentReference.Content.builder();
        parseBackboneElement(builder, jsonObject);
        builder.attachment(parseAttachment("attachment", getJsonValue(jsonObject, "attachment", JsonObject.class), -1));
        builder.format(parseCoding("format", getJsonValue(jsonObject, "format", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private DocumentReference.Context parseDocumentReferenceContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentReference.Context.class, jsonObject);
        }
        DocumentReference.Context.Builder builder = DocumentReference.Context.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray encounterArray = getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                builder.encounter(parseReference("encounter", encounterArray.getJsonObject(i), i));
            }
        }
        JsonArray eventArray = getJsonArray(jsonObject, "event");
        if (eventArray != null) {
            for (int i = 0; i < eventArray.size(); i++) {
                builder.event(parseCodeableConcept("event", eventArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.facilityType(parseCodeableConcept("facilityType", getJsonValue(jsonObject, "facilityType", JsonObject.class), -1));
        builder.practiceSetting(parseCodeableConcept("practiceSetting", getJsonValue(jsonObject, "practiceSetting", JsonObject.class), -1));
        builder.sourcePatientInfo(parseReference("sourcePatientInfo", getJsonValue(jsonObject, "sourcePatientInfo", JsonObject.class), -1));
        JsonArray relatedArray = getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                builder.related(parseReference("related", relatedArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private DocumentReference.RelatesTo parseDocumentReferenceRelatesTo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(DocumentReference.RelatesTo.class, jsonObject);
        }
        DocumentReference.RelatesTo.Builder builder = DocumentReference.RelatesTo.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.target(parseReference("target", getJsonValue(jsonObject, "target", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private void parseDomainResource(DomainResource.Builder builder, JsonObject jsonObject) {
        parseResource(builder, jsonObject);
        builder.text(parseNarrative("text", getJsonValue(jsonObject, "text", JsonObject.class), -1));
        JsonArray containedArray = getJsonArray(jsonObject, "contained");
        if (containedArray != null) {
            for (int i = 0; i < containedArray.size(); i++) {
                builder.contained(parseResource("contained", containedArray.getJsonObject(i), i));
            }
        }
        JsonArray extensionArray = getJsonArray(jsonObject, "extension");
        if (extensionArray != null) {
            for (int i = 0; i < extensionArray.size(); i++) {
                builder.extension(parseExtension("extension", extensionArray.getJsonObject(i), i));
            }
        }
        JsonArray modifierExtensionArray = getJsonArray(jsonObject, "modifierExtension");
        if (modifierExtensionArray != null) {
            for (int i = 0; i < modifierExtensionArray.size(); i++) {
                builder.modifierExtension(parseExtension("modifierExtension", modifierExtensionArray.getJsonObject(i), i));
            }
        }
    }

    private Dosage parseDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Dosage.class, jsonObject);
        }
        Dosage.Builder builder = Dosage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence(parseInteger("sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray additionalInstructionArray = getJsonArray(jsonObject, "additionalInstruction");
        if (additionalInstructionArray != null) {
            for (int i = 0; i < additionalInstructionArray.size(); i++) {
                builder.additionalInstruction(parseCodeableConcept("additionalInstruction", additionalInstructionArray.getJsonObject(i), i));
            }
        }
        builder.patientInstruction(parseString("patientInstruction", getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        builder.timing(parseTiming("timing", getJsonValue(jsonObject, "timing", JsonObject.class), -1));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonObject, Boolean.class, CodeableConcept.class));
        builder.site(parseCodeableConcept("site", getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        JsonArray doseAndRateArray = getJsonArray(jsonObject, "doseAndRate");
        if (doseAndRateArray != null) {
            for (int i = 0; i < doseAndRateArray.size(); i++) {
                builder.doseAndRate(parseDosageDoseAndRate("doseAndRate", doseAndRateArray.getJsonObject(i), i));
            }
        }
        builder.maxDosePerPeriod(parseRatio("maxDosePerPeriod", getJsonValue(jsonObject, "maxDosePerPeriod", JsonObject.class), -1));
        builder.maxDosePerAdministration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerAdministration", getJsonValue(jsonObject, "maxDosePerAdministration", JsonObject.class), -1));
        builder.maxDosePerLifetime((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerLifetime", getJsonValue(jsonObject, "maxDosePerLifetime", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Dosage.DoseAndRate parseDosageDoseAndRate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Dosage.DoseAndRate.class, jsonObject);
        }
        Dosage.DoseAndRate.Builder builder = Dosage.DoseAndRate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.dose(parseChoiceElement("dose", jsonObject, Range.class, SimpleQuantity.class));
        builder.rate(parseChoiceElement("rate", jsonObject, Ratio.class, Range.class, SimpleQuantity.class));
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis parseEffectEvidenceSynthesis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.class, jsonObject);
        }
        EffectEvidenceSynthesis.Builder builder = EffectEvidenceSynthesis.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        builder.synthesisType(parseCodeableConcept("synthesisType", getJsonValue(jsonObject, "synthesisType", JsonObject.class), -1));
        builder.studyType(parseCodeableConcept("studyType", getJsonValue(jsonObject, "studyType", JsonObject.class), -1));
        builder.population(parseReference("population", getJsonValue(jsonObject, "population", JsonObject.class), -1));
        builder.exposure(parseReference("exposure", getJsonValue(jsonObject, "exposure", JsonObject.class), -1));
        builder.exposureAlternative(parseReference("exposureAlternative", getJsonValue(jsonObject, "exposureAlternative", JsonObject.class), -1));
        builder.outcome(parseReference("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.sampleSize(parseEffectEvidenceSynthesisSampleSize("sampleSize", getJsonValue(jsonObject, "sampleSize", JsonObject.class), -1));
        JsonArray resultsByExposureArray = getJsonArray(jsonObject, "resultsByExposure");
        if (resultsByExposureArray != null) {
            for (int i = 0; i < resultsByExposureArray.size(); i++) {
                builder.resultsByExposure(parseEffectEvidenceSynthesisResultsByExposure("resultsByExposure", resultsByExposureArray.getJsonObject(i), i));
            }
        }
        JsonArray effectEstimateArray = getJsonArray(jsonObject, "effectEstimate");
        if (effectEstimateArray != null) {
            for (int i = 0; i < effectEstimateArray.size(); i++) {
                builder.effectEstimate(parseEffectEvidenceSynthesisEffectEstimate("effectEstimate", effectEstimateArray.getJsonObject(i), i));
            }
        }
        JsonArray certaintyArray = getJsonArray(jsonObject, "certainty");
        if (certaintyArray != null) {
            for (int i = 0; i < certaintyArray.size(); i++) {
                builder.certainty(parseEffectEvidenceSynthesisCertainty("certainty", certaintyArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.Certainty parseEffectEvidenceSynthesisCertainty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.Certainty.class, jsonObject);
        }
        EffectEvidenceSynthesis.Certainty.Builder builder = EffectEvidenceSynthesis.Certainty.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray ratingArray = getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            for (int i = 0; i < ratingArray.size(); i++) {
                builder.rating(parseCodeableConcept("rating", ratingArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray certaintySubcomponentArray = getJsonArray(jsonObject, "certaintySubcomponent");
        if (certaintySubcomponentArray != null) {
            for (int i = 0; i < certaintySubcomponentArray.size(); i++) {
                builder.certaintySubcomponent(parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", certaintySubcomponentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.Certainty.CertaintySubcomponent parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.class, jsonObject);
        }
        EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray ratingArray = getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            for (int i = 0; i < ratingArray.size(); i++) {
                builder.rating(parseCodeableConcept("rating", ratingArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.EffectEstimate parseEffectEvidenceSynthesisEffectEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.EffectEstimate.class, jsonObject);
        }
        EffectEvidenceSynthesis.EffectEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.variantState(parseCodeableConcept("variantState", getJsonValue(jsonObject, "variantState", JsonObject.class), -1));
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        JsonArray precisionEstimateArray = getJsonArray(jsonObject, "precisionEstimate");
        if (precisionEstimateArray != null) {
            for (int i = 0; i < precisionEstimateArray.size(); i++) {
                builder.precisionEstimate(parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate("precisionEstimate", precisionEstimateArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.class, jsonObject);
        }
        EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.level(parseDecimal("level", getJsonValue(jsonObject, "level", JsonNumber.class), jsonObject.get("_level"), -1));
        builder.from(parseDecimal("from", getJsonValue(jsonObject, "from", JsonNumber.class), jsonObject.get("_from"), -1));
        builder.to(parseDecimal("to", getJsonValue(jsonObject, "to", JsonNumber.class), jsonObject.get("_to"), -1));
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.ResultsByExposure parseEffectEvidenceSynthesisResultsByExposure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.ResultsByExposure.class, jsonObject);
        }
        EffectEvidenceSynthesis.ResultsByExposure.Builder builder = EffectEvidenceSynthesis.ResultsByExposure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.exposureState((ExposureState) parseString(ExposureState.builder(), "exposureState", getJsonValue(jsonObject, "exposureState", JsonString.class), jsonObject.get("_exposureState"), -1));
        builder.variantState(parseCodeableConcept("variantState", getJsonValue(jsonObject, "variantState", JsonObject.class), -1));
        builder.riskEvidenceSynthesis(parseReference("riskEvidenceSynthesis", getJsonValue(jsonObject, "riskEvidenceSynthesis", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private EffectEvidenceSynthesis.SampleSize parseEffectEvidenceSynthesisSampleSize(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EffectEvidenceSynthesis.SampleSize.class, jsonObject);
        }
        EffectEvidenceSynthesis.SampleSize.Builder builder = EffectEvidenceSynthesis.SampleSize.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfStudies(parseInteger("numberOfStudies", getJsonValue(jsonObject, "numberOfStudies", JsonNumber.class), jsonObject.get("_numberOfStudies"), -1));
        builder.numberOfParticipants(parseInteger("numberOfParticipants", getJsonValue(jsonObject, "numberOfParticipants", JsonNumber.class), jsonObject.get("_numberOfParticipants"), -1));
        stackPop();
        return builder.build();
    }

    private void parseElement(Element.Builder builder, JsonObject jsonObject) {
        builder.id(parseJavaString("id", getJsonValue(jsonObject, "id", JsonString.class), -1));
        JsonArray extensionArray = getJsonArray(jsonObject, "extension");
        if (extensionArray != null) {
            for (int i = 0; i < extensionArray.size(); i++) {
                builder.extension(parseExtension("extension", extensionArray.getJsonObject(i), i));
            }
        }
    }

    private ElementDefinition parseElementDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.class, jsonObject);
        }
        ElementDefinition.Builder builder = ElementDefinition.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        JsonArray representationArray = getJsonArray(jsonObject, "representation", true);
        if (representationArray != null) {
            JsonArray _representationArray = jsonObject.getJsonArray("_representation");
            for (int i = 0; i < representationArray.size(); i++) {
                builder.representation((PropertyRepresentation) parseString(PropertyRepresentation.builder(), "representation", representationArray.get(i), getJsonValue(_representationArray, i), i));
            }
        }
        builder.sliceName(parseString("sliceName", getJsonValue(jsonObject, "sliceName", JsonString.class), jsonObject.get("_sliceName"), -1));
        builder.sliceIsConstraining(parseBoolean("sliceIsConstraining", getJsonValue(jsonObject, "sliceIsConstraining", JsonValue.class), jsonObject.get("_sliceIsConstraining"), -1));
        builder.label(parseString("label", getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCoding("code", codeArray.getJsonObject(i), i));
            }
        }
        builder.slicing(parseElementDefinitionSlicing("slicing", getJsonValue(jsonObject, "slicing", JsonObject.class), -1));
        builder._short(parseString("short", getJsonValue(jsonObject, "short", JsonString.class), jsonObject.get("_short"), -1));
        builder.definition((Markdown) parseString(Markdown.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.requirements((Markdown) parseString(Markdown.builder(), "requirements", getJsonValue(jsonObject, "requirements", JsonString.class), jsonObject.get("_requirements"), -1));
        JsonArray aliasArray = getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonValue(_aliasArray, i), i));
            }
        }
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.base(parseElementDefinitionBase("base", getJsonValue(jsonObject, "base", JsonObject.class), -1));
        builder.contentReference(parseUri("contentReference", getJsonValue(jsonObject, "contentReference", JsonString.class), jsonObject.get("_contentReference"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseElementDefinitionType("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.defaultValue(parseChoiceElement("defaultValue", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.meaningWhenMissing((Markdown) parseString(Markdown.builder(), "meaningWhenMissing", getJsonValue(jsonObject, "meaningWhenMissing", JsonString.class), jsonObject.get("_meaningWhenMissing"), -1));
        builder.orderMeaning(parseString("orderMeaning", getJsonValue(jsonObject, "orderMeaning", JsonString.class), jsonObject.get("_orderMeaning"), -1));
        builder.fixed(parseChoiceElement("fixed", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.pattern(parseChoiceElement("pattern", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        JsonArray exampleArray = getJsonArray(jsonObject, "example");
        if (exampleArray != null) {
            for (int i = 0; i < exampleArray.size(); i++) {
                builder.example(parseElementDefinitionExample("example", exampleArray.getJsonObject(i), i));
            }
        }
        builder.minValue(parseChoiceElement("minValue", jsonObject, Date.class, DateTime.class, Instant.class, Time.class, Decimal.class, Integer.class, PositiveInt.class, UnsignedInt.class, Quantity.class));
        builder.maxValue(parseChoiceElement("maxValue", jsonObject, Date.class, DateTime.class, Instant.class, Time.class, Decimal.class, Integer.class, PositiveInt.class, UnsignedInt.class, Quantity.class));
        builder.maxLength(parseInteger("maxLength", getJsonValue(jsonObject, "maxLength", JsonNumber.class), jsonObject.get("_maxLength"), -1));
        JsonArray conditionArray = getJsonArray(jsonObject, "condition", true);
        if (conditionArray != null) {
            JsonArray _conditionArray = jsonObject.getJsonArray("_condition");
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition((Id) parseString(Id.builder(), "condition", conditionArray.get(i), getJsonValue(_conditionArray, i), i));
            }
        }
        JsonArray constraintArray = getJsonArray(jsonObject, "constraint");
        if (constraintArray != null) {
            for (int i = 0; i < constraintArray.size(); i++) {
                builder.constraint(parseElementDefinitionConstraint("constraint", constraintArray.getJsonObject(i), i));
            }
        }
        builder.mustSupport(parseBoolean("mustSupport", getJsonValue(jsonObject, "mustSupport", JsonValue.class), jsonObject.get("_mustSupport"), -1));
        builder.isModifier(parseBoolean("isModifier", getJsonValue(jsonObject, "isModifier", JsonValue.class), jsonObject.get("_isModifier"), -1));
        builder.isModifierReason(parseString("isModifierReason", getJsonValue(jsonObject, "isModifierReason", JsonString.class), jsonObject.get("_isModifierReason"), -1));
        builder.isSummary(parseBoolean("isSummary", getJsonValue(jsonObject, "isSummary", JsonValue.class), jsonObject.get("_isSummary"), -1));
        builder.binding(parseElementDefinitionBinding("binding", getJsonValue(jsonObject, "binding", JsonObject.class), -1));
        JsonArray mappingArray = getJsonArray(jsonObject, "mapping");
        if (mappingArray != null) {
            for (int i = 0; i < mappingArray.size(); i++) {
                builder.mapping(parseElementDefinitionMapping("mapping", mappingArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Base parseElementDefinitionBase(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Base.class, jsonObject);
        }
        ElementDefinition.Base.Builder builder = ElementDefinition.Base.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Binding parseElementDefinitionBinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Binding.class, jsonObject);
        }
        ElementDefinition.Binding.Builder builder = ElementDefinition.Binding.builder();
        parseBackboneElement(builder, jsonObject);
        builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", getJsonValue(jsonObject, "strength", JsonString.class), jsonObject.get("_strength"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Constraint parseElementDefinitionConstraint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Constraint.class, jsonObject);
        }
        ElementDefinition.Constraint.Builder builder = ElementDefinition.Constraint.builder();
        parseBackboneElement(builder, jsonObject);
        builder.key((Id) parseString(Id.builder(), "key", getJsonValue(jsonObject, "key", JsonString.class), jsonObject.get("_key"), -1));
        builder.requirements(parseString("requirements", getJsonValue(jsonObject, "requirements", JsonString.class), jsonObject.get("_requirements"), -1));
        builder.severity((ConstraintSeverity) parseString(ConstraintSeverity.builder(), "severity", getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.human(parseString("human", getJsonValue(jsonObject, "human", JsonString.class), jsonObject.get("_human"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.xpath(parseString("xpath", getJsonValue(jsonObject, "xpath", JsonString.class), jsonObject.get("_xpath"), -1));
        builder.source((Canonical) parseUri(Canonical.builder(), "source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Example parseElementDefinitionExample(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Example.class, jsonObject);
        }
        ElementDefinition.Example.Builder builder = ElementDefinition.Example.builder();
        parseBackboneElement(builder, jsonObject);
        builder.label(parseString("label", getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.value(parseChoiceElement("value", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Mapping parseElementDefinitionMapping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Mapping.class, jsonObject);
        }
        ElementDefinition.Mapping.Builder builder = ElementDefinition.Mapping.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identity((Id) parseString(Id.builder(), "identity", getJsonValue(jsonObject, "identity", JsonString.class), jsonObject.get("_identity"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.map(parseString("map", getJsonValue(jsonObject, "map", JsonString.class), jsonObject.get("_map"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Slicing parseElementDefinitionSlicing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Slicing.class, jsonObject);
        }
        ElementDefinition.Slicing.Builder builder = ElementDefinition.Slicing.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray discriminatorArray = getJsonArray(jsonObject, "discriminator");
        if (discriminatorArray != null) {
            for (int i = 0; i < discriminatorArray.size(); i++) {
                builder.discriminator(parseElementDefinitionSlicingDiscriminator("discriminator", discriminatorArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.ordered(parseBoolean("ordered", getJsonValue(jsonObject, "ordered", JsonValue.class), jsonObject.get("_ordered"), -1));
        builder.rules((SlicingRules) parseString(SlicingRules.builder(), "rules", getJsonValue(jsonObject, "rules", JsonString.class), jsonObject.get("_rules"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Slicing.Discriminator parseElementDefinitionSlicingDiscriminator(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Slicing.Discriminator.class, jsonObject);
        }
        ElementDefinition.Slicing.Discriminator.Builder builder = ElementDefinition.Slicing.Discriminator.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((DiscriminatorType) parseString(DiscriminatorType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        stackPop();
        return builder.build();
    }

    private ElementDefinition.Type parseElementDefinitionType(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ElementDefinition.Type.class, jsonObject);
        }
        ElementDefinition.Type.Builder builder = ElementDefinition.Type.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseUri("code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        JsonArray profileArray = getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonValue(_profileArray, i), i));
            }
        }
        JsonArray targetProfileArray = getJsonArray(jsonObject, "targetProfile", true);
        if (targetProfileArray != null) {
            JsonArray _targetProfileArray = jsonObject.getJsonArray("_targetProfile");
            for (int i = 0; i < targetProfileArray.size(); i++) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", targetProfileArray.get(i), getJsonValue(_targetProfileArray, i), i));
            }
        }
        JsonArray aggregationArray = getJsonArray(jsonObject, "aggregation", true);
        if (aggregationArray != null) {
            JsonArray _aggregationArray = jsonObject.getJsonArray("_aggregation");
            for (int i = 0; i < aggregationArray.size(); i++) {
                builder.aggregation((AggregationMode) parseString(AggregationMode.builder(), "aggregation", aggregationArray.get(i), getJsonValue(_aggregationArray, i), i));
            }
        }
        builder.versioning((ReferenceVersionRules) parseString(ReferenceVersionRules.builder(), "versioning", getJsonValue(jsonObject, "versioning", JsonString.class), jsonObject.get("_versioning"), -1));
        stackPop();
        return builder.build();
    }

    private Encounter parseEncounter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.class, jsonObject);
        }
        Encounter.Builder builder = Encounter.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusHistoryArray = getJsonArray(jsonObject, "statusHistory");
        if (statusHistoryArray != null) {
            for (int i = 0; i < statusHistoryArray.size(); i++) {
                builder.statusHistory(parseEncounterStatusHistory("statusHistory", statusHistoryArray.getJsonObject(i), i));
            }
        }
        builder.clazz(parseCoding("class", getJsonValue(jsonObject, "class", JsonObject.class), -1));
        JsonArray classHistoryArray = getJsonArray(jsonObject, "classHistory");
        if (classHistoryArray != null) {
            for (int i = 0; i < classHistoryArray.size(); i++) {
                builder.classHistory(parseEncounterClassHistory("classHistory", classHistoryArray.getJsonObject(i), i));
            }
        }
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.serviceType(parseCodeableConcept("serviceType", getJsonValue(jsonObject, "serviceType", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray episodeOfCareArray = getJsonArray(jsonObject, "episodeOfCare");
        if (episodeOfCareArray != null) {
            for (int i = 0; i < episodeOfCareArray.size(); i++) {
                builder.episodeOfCare(parseReference("episodeOfCare", episodeOfCareArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseEncounterParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        JsonArray appointmentArray = getJsonArray(jsonObject, "appointment");
        if (appointmentArray != null) {
            for (int i = 0; i < appointmentArray.size(); i++) {
                builder.appointment(parseReference("appointment", appointmentArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.length((Duration) parseQuantity(Duration.builder(), "length", getJsonValue(jsonObject, "length", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray diagnosisArray = getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                builder.diagnosis(parseEncounterDiagnosis("diagnosis", diagnosisArray.getJsonObject(i), i));
            }
        }
        JsonArray accountArray = getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                builder.account(parseReference("account", accountArray.getJsonObject(i), i));
            }
        }
        builder.hospitalization(parseEncounterHospitalization("hospitalization", getJsonValue(jsonObject, "hospitalization", JsonObject.class), -1));
        JsonArray locationArray = getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseEncounterLocation("location", locationArray.getJsonObject(i), i));
            }
        }
        builder.serviceProvider(parseReference("serviceProvider", getJsonValue(jsonObject, "serviceProvider", JsonObject.class), -1));
        builder.partOf(parseReference("partOf", getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.ClassHistory parseEncounterClassHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.ClassHistory.class, jsonObject);
        }
        Encounter.ClassHistory.Builder builder = Encounter.ClassHistory.builder();
        parseBackboneElement(builder, jsonObject);
        builder.clazz(parseCoding("class", getJsonValue(jsonObject, "class", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Diagnosis parseEncounterDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.Diagnosis.class, jsonObject);
        }
        Encounter.Diagnosis.Builder builder = Encounter.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.condition(parseReference("condition", getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        builder.use(parseCodeableConcept("use", getJsonValue(jsonObject, "use", JsonObject.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Hospitalization parseEncounterHospitalization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.Hospitalization.class, jsonObject);
        }
        Encounter.Hospitalization.Builder builder = Encounter.Hospitalization.builder();
        parseBackboneElement(builder, jsonObject);
        builder.preAdmissionIdentifier(parseIdentifier("preAdmissionIdentifier", getJsonValue(jsonObject, "preAdmissionIdentifier", JsonObject.class), -1));
        builder.origin(parseReference("origin", getJsonValue(jsonObject, "origin", JsonObject.class), -1));
        builder.admitSource(parseCodeableConcept("admitSource", getJsonValue(jsonObject, "admitSource", JsonObject.class), -1));
        builder.reAdmission(parseCodeableConcept("reAdmission", getJsonValue(jsonObject, "reAdmission", JsonObject.class), -1));
        JsonArray dietPreferenceArray = getJsonArray(jsonObject, "dietPreference");
        if (dietPreferenceArray != null) {
            for (int i = 0; i < dietPreferenceArray.size(); i++) {
                builder.dietPreference(parseCodeableConcept("dietPreference", dietPreferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray specialCourtesyArray = getJsonArray(jsonObject, "specialCourtesy");
        if (specialCourtesyArray != null) {
            for (int i = 0; i < specialCourtesyArray.size(); i++) {
                builder.specialCourtesy(parseCodeableConcept("specialCourtesy", specialCourtesyArray.getJsonObject(i), i));
            }
        }
        JsonArray specialArrangementArray = getJsonArray(jsonObject, "specialArrangement");
        if (specialArrangementArray != null) {
            for (int i = 0; i < specialArrangementArray.size(); i++) {
                builder.specialArrangement(parseCodeableConcept("specialArrangement", specialArrangementArray.getJsonObject(i), i));
            }
        }
        builder.destination(parseReference("destination", getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        builder.dischargeDisposition(parseCodeableConcept("dischargeDisposition", getJsonValue(jsonObject, "dischargeDisposition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Location parseEncounterLocation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.Location.class, jsonObject);
        }
        Encounter.Location.Builder builder = Encounter.Location.builder();
        parseBackboneElement(builder, jsonObject);
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.status((EncounterLocationStatus) parseString(EncounterLocationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.physicalType(parseCodeableConcept("physicalType", getJsonValue(jsonObject, "physicalType", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.Participant parseEncounterParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.Participant.class, jsonObject);
        }
        Encounter.Participant.Builder builder = Encounter.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.individual(parseReference("individual", getJsonValue(jsonObject, "individual", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Encounter.StatusHistory parseEncounterStatusHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Encounter.StatusHistory.class, jsonObject);
        }
        Encounter.StatusHistory.Builder builder = Encounter.StatusHistory.builder();
        parseBackboneElement(builder, jsonObject);
        builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Endpoint parseEndpoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Endpoint.class, jsonObject);
        }
        Endpoint.Builder builder = Endpoint.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EndpointStatus) parseString(EndpointStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.connectionType(parseCoding("connectionType", getJsonValue(jsonObject, "connectionType", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactPoint("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray payloadTypeArray = getJsonArray(jsonObject, "payloadType");
        if (payloadTypeArray != null) {
            for (int i = 0; i < payloadTypeArray.size(); i++) {
                builder.payloadType(parseCodeableConcept("payloadType", payloadTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray payloadMimeTypeArray = getJsonArray(jsonObject, "payloadMimeType", true);
        if (payloadMimeTypeArray != null) {
            JsonArray _payloadMimeTypeArray = jsonObject.getJsonArray("_payloadMimeType");
            for (int i = 0; i < payloadMimeTypeArray.size(); i++) {
                builder.payloadMimeType((Code) parseString(Code.builder(), "payloadMimeType", payloadMimeTypeArray.get(i), getJsonValue(_payloadMimeTypeArray, i), i));
            }
        }
        builder.address((Url) parseUri(Url.builder(), "address", getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1));
        JsonArray headerArray = getJsonArray(jsonObject, "header", true);
        if (headerArray != null) {
            JsonArray _headerArray = jsonObject.getJsonArray("_header");
            for (int i = 0; i < headerArray.size(); i++) {
                builder.header(parseString("header", headerArray.get(i), getJsonValue(_headerArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EnrollmentRequest parseEnrollmentRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EnrollmentRequest.class, jsonObject);
        }
        EnrollmentRequest.Builder builder = EnrollmentRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EnrollmentRequestStatus) parseString(EnrollmentRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.candidate(parseReference("candidate", getJsonValue(jsonObject, "candidate", JsonObject.class), -1));
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private EnrollmentResponse parseEnrollmentResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EnrollmentResponse.class, jsonObject);
        }
        EnrollmentResponse.Builder builder = EnrollmentResponse.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EnrollmentResponseStatus) parseString(EnrollmentResponseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.organization(parseReference("organization", getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.requestProvider(parseReference("requestProvider", getJsonValue(jsonObject, "requestProvider", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare parseEpisodeOfCare(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EpisodeOfCare.class, jsonObject);
        }
        EpisodeOfCare.Builder builder = EpisodeOfCare.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusHistoryArray = getJsonArray(jsonObject, "statusHistory");
        if (statusHistoryArray != null) {
            for (int i = 0; i < statusHistoryArray.size(); i++) {
                builder.statusHistory(parseEpisodeOfCareStatusHistory("statusHistory", statusHistoryArray.getJsonObject(i), i));
            }
        }
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray diagnosisArray = getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                builder.diagnosis(parseEpisodeOfCareDiagnosis("diagnosis", diagnosisArray.getJsonObject(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray referralRequestArray = getJsonArray(jsonObject, "referralRequest");
        if (referralRequestArray != null) {
            for (int i = 0; i < referralRequestArray.size(); i++) {
                builder.referralRequest(parseReference("referralRequest", referralRequestArray.getJsonObject(i), i));
            }
        }
        builder.careManager(parseReference("careManager", getJsonValue(jsonObject, "careManager", JsonObject.class), -1));
        JsonArray teamArray = getJsonArray(jsonObject, "team");
        if (teamArray != null) {
            for (int i = 0; i < teamArray.size(); i++) {
                builder.team(parseReference("team", teamArray.getJsonObject(i), i));
            }
        }
        JsonArray accountArray = getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            for (int i = 0; i < accountArray.size(); i++) {
                builder.account(parseReference("account", accountArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare.Diagnosis parseEpisodeOfCareDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EpisodeOfCare.Diagnosis.class, jsonObject);
        }
        EpisodeOfCare.Diagnosis.Builder builder = EpisodeOfCare.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.condition(parseReference("condition", getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    private EpisodeOfCare.StatusHistory parseEpisodeOfCareStatusHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EpisodeOfCare.StatusHistory.class, jsonObject);
        }
        EpisodeOfCare.StatusHistory.Builder builder = EpisodeOfCare.StatusHistory.builder();
        parseBackboneElement(builder, jsonObject);
        builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private EventDefinition parseEventDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EventDefinition.class, jsonObject);
        }
        EventDefinition.Builder builder = EventDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray triggerArray = getJsonArray(jsonObject, "trigger");
        if (triggerArray != null) {
            for (int i = 0; i < triggerArray.size(); i++) {
                builder.trigger(parseTriggerDefinition("trigger", triggerArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Evidence parseEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Evidence.class, jsonObject);
        }
        Evidence.Builder builder = Evidence.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        builder.exposureBackground(parseReference("exposureBackground", getJsonValue(jsonObject, "exposureBackground", JsonObject.class), -1));
        JsonArray exposureVariantArray = getJsonArray(jsonObject, "exposureVariant");
        if (exposureVariantArray != null) {
            for (int i = 0; i < exposureVariantArray.size(); i++) {
                builder.exposureVariant(parseReference("exposureVariant", exposureVariantArray.getJsonObject(i), i));
            }
        }
        JsonArray outcomeArray = getJsonArray(jsonObject, "outcome");
        if (outcomeArray != null) {
            for (int i = 0; i < outcomeArray.size(); i++) {
                builder.outcome(parseReference("outcome", outcomeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceVariable parseEvidenceVariable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EvidenceVariable.class, jsonObject);
        }
        EvidenceVariable.Builder builder = EvidenceVariable.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        builder.type((EvidenceVariableType) parseString(EvidenceVariableType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray characteristicArray = getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                builder.characteristic(parseEvidenceVariableCharacteristic("characteristic", characteristicArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private EvidenceVariable.Characteristic parseEvidenceVariableCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(EvidenceVariable.Characteristic.class, jsonObject);
        }
        EvidenceVariable.Characteristic.Builder builder = EvidenceVariable.Characteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.definition(parseChoiceElement("definition", jsonObject, Reference.class, Canonical.class, CodeableConcept.class, Expression.class, DataRequirement.class, TriggerDefinition.class));
        JsonArray usageContextArray = getJsonArray(jsonObject, "usageContext");
        if (usageContextArray != null) {
            for (int i = 0; i < usageContextArray.size(); i++) {
                builder.usageContext(parseUsageContext("usageContext", usageContextArray.getJsonObject(i), i));
            }
        }
        builder.exclude(parseBoolean("exclude", getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1));
        builder.participantEffective(parseChoiceElement("participantEffective", jsonObject, DateTime.class, Period.class, Duration.class, Timing.class));
        builder.timeFromStart((Duration) parseQuantity(Duration.builder(), "timeFromStart", getJsonValue(jsonObject, "timeFromStart", JsonObject.class), -1));
        builder.groupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "groupMeasure", getJsonValue(jsonObject, "groupMeasure", JsonString.class), jsonObject.get("_groupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario parseExampleScenario(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.class, jsonObject);
        }
        ExampleScenario.Builder builder = ExampleScenario.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        JsonArray actorArray = getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                builder.actor(parseExampleScenarioActor("actor", actorArray.getJsonObject(i), i));
            }
        }
        JsonArray instanceArray = getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                builder.instance(parseExampleScenarioInstance("instance", instanceArray.getJsonObject(i), i));
            }
        }
        JsonArray processArray = getJsonArray(jsonObject, "process");
        if (processArray != null) {
            for (int i = 0; i < processArray.size(); i++) {
                builder.process(parseExampleScenarioProcess("process", processArray.getJsonObject(i), i));
            }
        }
        JsonArray workflowArray = getJsonArray(jsonObject, "workflow", true);
        if (workflowArray != null) {
            JsonArray _workflowArray = jsonObject.getJsonArray("_workflow");
            for (int i = 0; i < workflowArray.size(); i++) {
                builder.workflow((Canonical) parseUri(Canonical.builder(), "workflow", workflowArray.get(i), getJsonValue(_workflowArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Actor parseExampleScenarioActor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Actor.class, jsonObject);
        }
        ExampleScenario.Actor.Builder builder = ExampleScenario.Actor.builder();
        parseBackboneElement(builder, jsonObject);
        builder.actorId(parseString("actorId", getJsonValue(jsonObject, "actorId", JsonString.class), jsonObject.get("_actorId"), -1));
        builder.type((ExampleScenarioActorType) parseString(ExampleScenarioActorType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance parseExampleScenarioInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Instance.class, jsonObject);
        }
        ExampleScenario.Instance.Builder builder = ExampleScenario.Instance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.resourceId(parseString("resourceId", getJsonValue(jsonObject, "resourceId", JsonString.class), jsonObject.get("_resourceId"), -1));
        builder.resourceType((FHIRResourceType) parseString(FHIRResourceType.builder(), "resourceType", getJsonValue(jsonObject, "resourceType", JsonString.class), jsonObject.get("_resourceType"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray versionArray = getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                builder.version(parseExampleScenarioInstanceVersion("version", versionArray.getJsonObject(i), i));
            }
        }
        JsonArray containedInstanceArray = getJsonArray(jsonObject, "containedInstance");
        if (containedInstanceArray != null) {
            for (int i = 0; i < containedInstanceArray.size(); i++) {
                builder.containedInstance(parseExampleScenarioInstanceContainedInstance("containedInstance", containedInstanceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance.ContainedInstance parseExampleScenarioInstanceContainedInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Instance.ContainedInstance.class, jsonObject);
        }
        ExampleScenario.Instance.ContainedInstance.Builder builder = ExampleScenario.Instance.ContainedInstance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.resourceId(parseString("resourceId", getJsonValue(jsonObject, "resourceId", JsonString.class), jsonObject.get("_resourceId"), -1));
        builder.versionId(parseString("versionId", getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Instance.Version parseExampleScenarioInstanceVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Instance.Version.class, jsonObject);
        }
        ExampleScenario.Instance.Version.Builder builder = ExampleScenario.Instance.Version.builder();
        parseBackboneElement(builder, jsonObject);
        builder.versionId(parseString("versionId", getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process parseExampleScenarioProcess(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Process.class, jsonObject);
        }
        ExampleScenario.Process.Builder builder = ExampleScenario.Process.builder();
        parseBackboneElement(builder, jsonObject);
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.preConditions((Markdown) parseString(Markdown.builder(), "preConditions", getJsonValue(jsonObject, "preConditions", JsonString.class), jsonObject.get("_preConditions"), -1));
        builder.postConditions((Markdown) parseString(Markdown.builder(), "postConditions", getJsonValue(jsonObject, "postConditions", JsonString.class), jsonObject.get("_postConditions"), -1));
        JsonArray stepArray = getJsonArray(jsonObject, "step");
        if (stepArray != null) {
            for (int i = 0; i < stepArray.size(); i++) {
                builder.step(parseExampleScenarioProcessStep("step", stepArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step parseExampleScenarioProcessStep(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.class, jsonObject);
        }
        ExampleScenario.Process.Step.Builder builder = ExampleScenario.Process.Step.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray processArray = getJsonArray(jsonObject, "process");
        if (processArray != null) {
            for (int i = 0; i < processArray.size(); i++) {
                builder.process(parseExampleScenarioProcess("process", processArray.getJsonObject(i), i));
            }
        }
        builder.pause(parseBoolean("pause", getJsonValue(jsonObject, "pause", JsonValue.class), jsonObject.get("_pause"), -1));
        builder.operation(parseExampleScenarioProcessStepOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        JsonArray alternativeArray = getJsonArray(jsonObject, "alternative");
        if (alternativeArray != null) {
            for (int i = 0; i < alternativeArray.size(); i++) {
                builder.alternative(parseExampleScenarioProcessStepAlternative("alternative", alternativeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step.Alternative parseExampleScenarioProcessStepAlternative(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.Alternative.class, jsonObject);
        }
        ExampleScenario.Process.Step.Alternative.Builder builder = ExampleScenario.Process.Step.Alternative.builder();
        parseBackboneElement(builder, jsonObject);
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray stepArray = getJsonArray(jsonObject, "step");
        if (stepArray != null) {
            for (int i = 0; i < stepArray.size(); i++) {
                builder.step(parseExampleScenarioProcessStep("step", stepArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExampleScenario.Process.Step.Operation parseExampleScenarioProcessStepOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExampleScenario.Process.Step.Operation.class, jsonObject);
        }
        ExampleScenario.Process.Step.Operation.Builder builder = ExampleScenario.Process.Step.Operation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.number(parseString("number", getJsonValue(jsonObject, "number", JsonString.class), jsonObject.get("_number"), -1));
        builder.type(parseString("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.initiator(parseString("initiator", getJsonValue(jsonObject, "initiator", JsonString.class), jsonObject.get("_initiator"), -1));
        builder.receiver(parseString("receiver", getJsonValue(jsonObject, "receiver", JsonString.class), jsonObject.get("_receiver"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.initiatorActive(parseBoolean("initiatorActive", getJsonValue(jsonObject, "initiatorActive", JsonValue.class), jsonObject.get("_initiatorActive"), -1));
        builder.receiverActive(parseBoolean("receiverActive", getJsonValue(jsonObject, "receiverActive", JsonValue.class), jsonObject.get("_receiverActive"), -1));
        builder.request(parseExampleScenarioInstanceContainedInstance("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseExampleScenarioInstanceContainedInstance("response", getJsonValue(jsonObject, "response", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit parseExplanationOfBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.class, jsonObject);
        }
        ExplanationOfBenefit.Builder builder = ExplanationOfBenefit.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ExplanationOfBenefitStatus) parseString(ExplanationOfBenefitStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.use((Use) parseString(Use.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", getJsonValue(jsonObject, "billablePeriod", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.enterer(parseReference("enterer", getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.insurer(parseReference("insurer", getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.fundsReserveRequested(parseCodeableConcept("fundsReserveRequested", getJsonValue(jsonObject, "fundsReserveRequested", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        JsonArray relatedArray = getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            for (int i = 0; i < relatedArray.size(); i++) {
                builder.related(parseExplanationOfBenefitRelated("related", relatedArray.getJsonObject(i), i));
            }
        }
        builder.prescription(parseReference("prescription", getJsonValue(jsonObject, "prescription", JsonObject.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", getJsonValue(jsonObject, "originalPrescription", JsonObject.class), -1));
        builder.payee(parseExplanationOfBenefitPayee("payee", getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.referral(parseReference("referral", getJsonValue(jsonObject, "referral", JsonObject.class), -1));
        builder.facility(parseReference("facility", getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        builder.claim(parseReference("claim", getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.claimResponse(parseReference("claimResponse", getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        JsonArray preAuthRefArray = getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonValue(_preAuthRefArray, i), i));
            }
        }
        JsonArray preAuthRefPeriodArray = getJsonArray(jsonObject, "preAuthRefPeriod");
        if (preAuthRefPeriodArray != null) {
            for (int i = 0; i < preAuthRefPeriodArray.size(); i++) {
                builder.preAuthRefPeriod(parsePeriod("preAuthRefPeriod", preAuthRefPeriodArray.getJsonObject(i), i));
            }
        }
        JsonArray careTeamArray = getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            for (int i = 0; i < careTeamArray.size(); i++) {
                builder.careTeam(parseExplanationOfBenefitCareTeam("careTeam", careTeamArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseExplanationOfBenefitSupportingInfo("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray diagnosisArray = getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            for (int i = 0; i < diagnosisArray.size(); i++) {
                builder.diagnosis(parseExplanationOfBenefitDiagnosis("diagnosis", diagnosisArray.getJsonObject(i), i));
            }
        }
        JsonArray procedureArray = getJsonArray(jsonObject, "procedure");
        if (procedureArray != null) {
            for (int i = 0; i < procedureArray.size(); i++) {
                builder.procedure(parseExplanationOfBenefitProcedure("procedure", procedureArray.getJsonObject(i), i));
            }
        }
        builder.precedence((PositiveInt) parseInteger(PositiveInt.builder(), "precedence", getJsonValue(jsonObject, "precedence", JsonNumber.class), jsonObject.get("_precedence"), -1));
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseExplanationOfBenefitInsurance("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        builder.accident(parseExplanationOfBenefitAccident("accident", getJsonValue(jsonObject, "accident", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseExplanationOfBenefitItem("item", itemArray.getJsonObject(i), i));
            }
        }
        JsonArray addItemArray = getJsonArray(jsonObject, "addItem");
        if (addItemArray != null) {
            for (int i = 0; i < addItemArray.size(); i++) {
                builder.addItem(parseExplanationOfBenefitAddItem("addItem", addItemArray.getJsonObject(i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray totalArray = getJsonArray(jsonObject, "total");
        if (totalArray != null) {
            for (int i = 0; i < totalArray.size(); i++) {
                builder.total(parseExplanationOfBenefitTotal("total", totalArray.getJsonObject(i), i));
            }
        }
        builder.payment(parseExplanationOfBenefitPayment("payment", getJsonValue(jsonObject, "payment", JsonObject.class), -1));
        builder.formCode(parseCodeableConcept("formCode", getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        builder.form(parseAttachment("form", getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray processNoteArray = getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                builder.processNote(parseExplanationOfBenefitProcessNote("processNote", processNoteArray.getJsonObject(i), i));
            }
        }
        builder.benefitPeriod(parsePeriod("benefitPeriod", getJsonValue(jsonObject, "benefitPeriod", JsonObject.class), -1));
        JsonArray benefitBalanceArray = getJsonArray(jsonObject, "benefitBalance");
        if (benefitBalanceArray != null) {
            for (int i = 0; i < benefitBalanceArray.size(); i++) {
                builder.benefitBalance(parseExplanationOfBenefitBenefitBalance("benefitBalance", benefitBalanceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Accident parseExplanationOfBenefitAccident(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Accident.class, jsonObject);
        }
        ExplanationOfBenefit.Accident.Builder builder = ExplanationOfBenefit.Accident.builder();
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.location(parseChoiceElement("location", jsonObject, Address.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem parseExplanationOfBenefitAddItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.class, jsonObject);
        }
        ExplanationOfBenefit.AddItem.Builder builder = ExplanationOfBenefit.AddItem.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray itemSequenceArray = getJsonArray(jsonObject, "itemSequence", true);
        if (itemSequenceArray != null) {
            JsonArray _itemSequenceArray = jsonObject.getJsonArray("_itemSequence");
            for (int i = 0; i < itemSequenceArray.size(); i++) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", itemSequenceArray.get(i), getJsonValue(_itemSequenceArray, i), i));
            }
        }
        JsonArray detailSequenceArray = getJsonArray(jsonObject, "detailSequence", true);
        if (detailSequenceArray != null) {
            JsonArray _detailSequenceArray = jsonObject.getJsonArray("_detailSequence");
            for (int i = 0; i < detailSequenceArray.size(); i++) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", detailSequenceArray.get(i), getJsonValue(_detailSequenceArray, i), i));
            }
        }
        JsonArray subDetailSequenceArray = getJsonArray(jsonObject, "subDetailSequence", true);
        if (subDetailSequenceArray != null) {
            JsonArray _subDetailSequenceArray = jsonObject.getJsonArray("_subDetailSequence");
            for (int i = 0; i < subDetailSequenceArray.size(); i++) {
                builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", subDetailSequenceArray.get(i), getJsonValue(_subDetailSequenceArray, i), i));
            }
        }
        JsonArray providerArray = getJsonArray(jsonObject, "provider");
        if (providerArray != null) {
            for (int i = 0; i < providerArray.size(); i++) {
                builder.provider(parseReference("provider", providerArray.getJsonObject(i), i));
            }
        }
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonObject, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.getJsonObject(i), i));
            }
        }
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseExplanationOfBenefitAddItemDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem.Detail parseExplanationOfBenefitAddItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.Detail.class, jsonObject);
        }
        ExplanationOfBenefit.AddItem.Detail.Builder builder = ExplanationOfBenefit.AddItem.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray subDetailArray = getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                builder.subDetail(parseExplanationOfBenefitAddItemDetailSubDetail("subDetail", subDetailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.AddItem.Detail.SubDetail parseExplanationOfBenefitAddItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.AddItem.Detail.SubDetail.class, jsonObject);
        }
        ExplanationOfBenefit.AddItem.Detail.SubDetail.Builder builder = ExplanationOfBenefit.AddItem.Detail.SubDetail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.BenefitBalance parseExplanationOfBenefitBenefitBalance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.BenefitBalance.class, jsonObject);
        }
        ExplanationOfBenefit.BenefitBalance.Builder builder = ExplanationOfBenefit.BenefitBalance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.excluded(parseBoolean("excluded", getJsonValue(jsonObject, "excluded", JsonValue.class), jsonObject.get("_excluded"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.network(parseCodeableConcept("network", getJsonValue(jsonObject, "network", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.term(parseCodeableConcept("term", getJsonValue(jsonObject, "term", JsonObject.class), -1));
        JsonArray financialArray = getJsonArray(jsonObject, "financial");
        if (financialArray != null) {
            for (int i = 0; i < financialArray.size(); i++) {
                builder.financial(parseExplanationOfBenefitBenefitBalanceFinancial("financial", financialArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.BenefitBalance.Financial parseExplanationOfBenefitBenefitBalanceFinancial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.BenefitBalance.Financial.class, jsonObject);
        }
        ExplanationOfBenefit.BenefitBalance.Financial.Builder builder = ExplanationOfBenefit.BenefitBalance.Financial.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.allowed(parseChoiceElement("allowed", jsonObject, UnsignedInt.class, String.class, Money.class));
        builder.used(parseChoiceElement("used", jsonObject, UnsignedInt.class, Money.class));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.CareTeam parseExplanationOfBenefitCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.CareTeam.class, jsonObject);
        }
        ExplanationOfBenefit.CareTeam.Builder builder = ExplanationOfBenefit.CareTeam.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.responsible(parseBoolean("responsible", getJsonValue(jsonObject, "responsible", JsonValue.class), jsonObject.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.qualification(parseCodeableConcept("qualification", getJsonValue(jsonObject, "qualification", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Diagnosis parseExplanationOfBenefitDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Diagnosis.class, jsonObject);
        }
        ExplanationOfBenefit.Diagnosis.Builder builder = ExplanationOfBenefit.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.diagnosis(parseChoiceElement("diagnosis", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", getJsonValue(jsonObject, "onAdmission", JsonObject.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", getJsonValue(jsonObject, "packageCode", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Insurance parseExplanationOfBenefitInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Insurance.class, jsonObject);
        }
        ExplanationOfBenefit.Insurance.Builder builder = ExplanationOfBenefit.Insurance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.focal(parseBoolean("focal", getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1));
        builder.coverage(parseReference("coverage", getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        JsonArray preAuthRefArray = getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (int i = 0; i < preAuthRefArray.size(); i++) {
                builder.preAuthRef(parseString("preAuthRef", preAuthRefArray.get(i), getJsonValue(_preAuthRefArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item parseExplanationOfBenefitItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.class, jsonObject);
        }
        ExplanationOfBenefit.Item.Builder builder = ExplanationOfBenefit.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        JsonArray careTeamSequenceArray = getJsonArray(jsonObject, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            JsonArray _careTeamSequenceArray = jsonObject.getJsonArray("_careTeamSequence");
            for (int i = 0; i < careTeamSequenceArray.size(); i++) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", careTeamSequenceArray.get(i), getJsonValue(_careTeamSequenceArray, i), i));
            }
        }
        JsonArray diagnosisSequenceArray = getJsonArray(jsonObject, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            JsonArray _diagnosisSequenceArray = jsonObject.getJsonArray("_diagnosisSequence");
            for (int i = 0; i < diagnosisSequenceArray.size(); i++) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", diagnosisSequenceArray.get(i), getJsonValue(_diagnosisSequenceArray, i), i));
            }
        }
        JsonArray procedureSequenceArray = getJsonArray(jsonObject, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            JsonArray _procedureSequenceArray = jsonObject.getJsonArray("_procedureSequence");
            for (int i = 0; i < procedureSequenceArray.size(); i++) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", procedureSequenceArray.get(i), getJsonValue(_procedureSequenceArray, i), i));
            }
        }
        JsonArray informationSequenceArray = getJsonArray(jsonObject, "informationSequence", true);
        if (informationSequenceArray != null) {
            JsonArray _informationSequenceArray = jsonObject.getJsonArray("_informationSequence");
            for (int i = 0; i < informationSequenceArray.size(); i++) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", informationSequenceArray.get(i), getJsonValue(_informationSequenceArray, i), i));
            }
        }
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, Date.class, Period.class));
        builder.location(parseChoiceElement("location", jsonObject, CodeableConcept.class, Address.class, Reference.class));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            for (int i = 0; i < subSiteArray.size(); i++) {
                builder.subSite(parseCodeableConcept("subSite", subSiteArray.getJsonObject(i), i));
            }
        }
        JsonArray encounterArray = getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            for (int i = 0; i < encounterArray.size(); i++) {
                builder.encounter(parseReference("encounter", encounterArray.getJsonObject(i), i));
            }
        }
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parseExplanationOfBenefitItemDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Adjudication parseExplanationOfBenefitItemAdjudication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Adjudication.class, jsonObject);
        }
        ExplanationOfBenefit.Item.Adjudication.Builder builder = ExplanationOfBenefit.Item.Adjudication.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Detail parseExplanationOfBenefitItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Detail.class, jsonObject);
        }
        ExplanationOfBenefit.Item.Detail.Builder builder = ExplanationOfBenefit.Item.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        JsonArray subDetailArray = getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            for (int i = 0; i < subDetailArray.size(); i++) {
                builder.subDetail(parseExplanationOfBenefitItemDetailSubDetail("subDetail", subDetailArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Item.Detail.SubDetail parseExplanationOfBenefitItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Item.Detail.SubDetail.class, jsonObject);
        }
        ExplanationOfBenefit.Item.Detail.SubDetail.Builder builder = ExplanationOfBenefit.Item.Detail.SubDetail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.revenue(parseCodeableConcept("revenue", getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier(parseCodeableConcept("modifier", modifierArray.getJsonObject(i), i));
            }
        }
        JsonArray programCodeArray = getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            for (int i = 0; i < programCodeArray.size(); i++) {
                builder.programCode(parseCodeableConcept("programCode", programCodeArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        JsonArray noteNumberArray = getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (int i = 0; i < noteNumberArray.size(); i++) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", noteNumberArray.get(i), getJsonValue(_noteNumberArray, i), i));
            }
        }
        JsonArray adjudicationArray = getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            for (int i = 0; i < adjudicationArray.size(); i++) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", adjudicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Payee parseExplanationOfBenefitPayee(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Payee.class, jsonObject);
        }
        ExplanationOfBenefit.Payee.Builder builder = ExplanationOfBenefit.Payee.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.party(parseReference("party", getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Payment parseExplanationOfBenefitPayment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Payment.class, jsonObject);
        }
        ExplanationOfBenefit.Payment.Builder builder = ExplanationOfBenefit.Payment.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.adjustment(parseMoney("adjustment", getJsonValue(jsonObject, "adjustment", JsonObject.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", getJsonValue(jsonObject, "adjustmentReason", JsonObject.class), -1));
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Procedure parseExplanationOfBenefitProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Procedure.class, jsonObject);
        }
        ExplanationOfBenefit.Procedure.Builder builder = ExplanationOfBenefit.Procedure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.procedure(parseChoiceElement("procedure", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray udiArray = getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            for (int i = 0; i < udiArray.size(); i++) {
                builder.udi(parseReference("udi", udiArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.ProcessNote parseExplanationOfBenefitProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.ProcessNote.class, jsonObject);
        }
        ExplanationOfBenefit.ProcessNote.Builder builder = ExplanationOfBenefit.ProcessNote.builder();
        parseBackboneElement(builder, jsonObject);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.language(parseCodeableConcept("language", getJsonValue(jsonObject, "language", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Related parseExplanationOfBenefitRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Related.class, jsonObject);
        }
        ExplanationOfBenefit.Related.Builder builder = ExplanationOfBenefit.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.claim(parseReference("claim", getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.reference(parseIdentifier("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.SupportingInfo parseExplanationOfBenefitSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.SupportingInfo.class, jsonObject);
        }
        ExplanationOfBenefit.SupportingInfo.Builder builder = ExplanationOfBenefit.SupportingInfo.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, Date.class, Period.class));
        builder.value(parseChoiceElement("value", jsonObject, Boolean.class, String.class, Quantity.class, Attachment.class, Reference.class));
        builder.reason(parseCoding("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ExplanationOfBenefit.Total parseExplanationOfBenefitTotal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ExplanationOfBenefit.Total.class, jsonObject);
        }
        ExplanationOfBenefit.Total.Builder builder = ExplanationOfBenefit.Total.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Expression parseExpression(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Expression.class, jsonObject);
        }
        Expression.Builder builder = Expression.builder();
        parseElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.name((Id) parseString(Id.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.reference(parseUri("reference", getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        stackPop();
        return builder.build();
    }

    private Extension parseExtension(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Extension.class, jsonObject);
        }
        Extension.Builder builder = Extension.builder();
        parseElement(builder, jsonObject);
        builder.url(parseJavaString("url", getJsonValue(jsonObject, "url", JsonString.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private FamilyMemberHistory parseFamilyMemberHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(FamilyMemberHistory.class, jsonObject);
        }
        FamilyMemberHistory.Builder builder = FamilyMemberHistory.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        builder.status((FamilyHistoryStatus) parseString(FamilyHistoryStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.relationship(parseCodeableConcept("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.sex(parseCodeableConcept("sex", getJsonValue(jsonObject, "sex", JsonObject.class), -1));
        builder.born(parseChoiceElement("born", jsonObject, Period.class, Date.class, String.class));
        builder.age(parseChoiceElement("age", jsonObject, Age.class, Range.class, String.class));
        builder.estimatedAge(parseBoolean("estimatedAge", getJsonValue(jsonObject, "estimatedAge", JsonValue.class), jsonObject.get("_estimatedAge"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonObject, Boolean.class, Age.class, Range.class, Date.class, String.class));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray conditionArray = getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition(parseFamilyMemberHistoryCondition("condition", conditionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private FamilyMemberHistory.Condition parseFamilyMemberHistoryCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(FamilyMemberHistory.Condition.class, jsonObject);
        }
        FamilyMemberHistory.Condition.Builder builder = FamilyMemberHistory.Condition.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.outcome(parseCodeableConcept("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.contributedToDeath(parseBoolean("contributedToDeath", getJsonValue(jsonObject, "contributedToDeath", JsonValue.class), jsonObject.get("_contributedToDeath"), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, Age.class, Range.class, Period.class, String.class));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Flag parseFlag(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Flag.class, jsonObject);
        }
        Flag.Builder builder = Flag.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((FlagStatus) parseString(FlagStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Goal parseGoal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Goal.class, jsonObject);
        }
        Goal.Builder builder = Goal.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.lifecycleStatus((GoalLifecycleStatus) parseString(GoalLifecycleStatus.builder(), "lifecycleStatus", getJsonValue(jsonObject, "lifecycleStatus", JsonString.class), jsonObject.get("_lifecycleStatus"), -1));
        builder.achievementStatus(parseCodeableConcept("achievementStatus", getJsonValue(jsonObject, "achievementStatus", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.description(parseCodeableConcept("description", getJsonValue(jsonObject, "description", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.start(parseChoiceElement("start", jsonObject, Date.class, CodeableConcept.class));
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseGoalTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        builder.statusDate(parseDate("statusDate", getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.statusReason(parseString("statusReason", getJsonValue(jsonObject, "statusReason", JsonString.class), jsonObject.get("_statusReason"), -1));
        builder.expressedBy(parseReference("expressedBy", getJsonValue(jsonObject, "expressedBy", JsonObject.class), -1));
        JsonArray addressesArray = getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                builder.addresses(parseReference("addresses", addressesArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray outcomeCodeArray = getJsonArray(jsonObject, "outcomeCode");
        if (outcomeCodeArray != null) {
            for (int i = 0; i < outcomeCodeArray.size(); i++) {
                builder.outcomeCode(parseCodeableConcept("outcomeCode", outcomeCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray outcomeReferenceArray = getJsonArray(jsonObject, "outcomeReference");
        if (outcomeReferenceArray != null) {
            for (int i = 0; i < outcomeReferenceArray.size(); i++) {
                builder.outcomeReference(parseReference("outcomeReference", outcomeReferenceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Goal.Target parseGoalTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Goal.Target.class, jsonObject);
        }
        Goal.Target.Builder builder = Goal.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.measure(parseCodeableConcept("measure", getJsonValue(jsonObject, "measure", JsonObject.class), -1));
        builder.detail(parseChoiceElement("detail", jsonObject, Quantity.class, Range.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Ratio.class));
        builder.due(parseChoiceElement("due", jsonObject, Date.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private GraphDefinition parseGraphDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(GraphDefinition.class, jsonObject);
        }
        GraphDefinition.Builder builder = GraphDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.start((ResourceType) parseString(ResourceType.builder(), "start", getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseGraphDefinitionLink("link", linkArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link parseGraphDefinitionLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(GraphDefinition.Link.class, jsonObject);
        }
        GraphDefinition.Link.Builder builder = GraphDefinition.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.sliceName(parseString("sliceName", getJsonValue(jsonObject, "sliceName", JsonString.class), jsonObject.get("_sliceName"), -1));
        builder.min(parseInteger("min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseGraphDefinitionLinkTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link.Target parseGraphDefinitionLinkTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(GraphDefinition.Link.Target.class, jsonObject);
        }
        GraphDefinition.Link.Target.Builder builder = GraphDefinition.Link.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ResourceType) parseString(ResourceType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.params(parseString("params", getJsonValue(jsonObject, "params", JsonString.class), jsonObject.get("_params"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray compartmentArray = getJsonArray(jsonObject, "compartment");
        if (compartmentArray != null) {
            for (int i = 0; i < compartmentArray.size(); i++) {
                builder.compartment(parseGraphDefinitionLinkTargetCompartment("compartment", compartmentArray.getJsonObject(i), i));
            }
        }
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseGraphDefinitionLink("link", linkArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private GraphDefinition.Link.Target.Compartment parseGraphDefinitionLinkTargetCompartment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(GraphDefinition.Link.Target.Compartment.class, jsonObject);
        }
        GraphDefinition.Link.Target.Compartment.Builder builder = GraphDefinition.Link.Target.Compartment.builder();
        parseBackboneElement(builder, jsonObject);
        builder.use((GraphCompartmentUse) parseString(GraphCompartmentUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.code((CompartmentCode) parseString(CompartmentCode.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.rule((GraphCompartmentRule) parseString(GraphCompartmentRule.builder(), "rule", getJsonValue(jsonObject, "rule", JsonString.class), jsonObject.get("_rule"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private Group parseGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Group.class, jsonObject);
        }
        Group.Builder builder = Group.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.type((GroupType) parseString(GroupType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.actual(parseBoolean("actual", getJsonValue(jsonObject, "actual", JsonValue.class), jsonObject.get("_actual"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.quantity((UnsignedInt) parseInteger(UnsignedInt.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonNumber.class), jsonObject.get("_quantity"), -1));
        builder.managingEntity(parseReference("managingEntity", getJsonValue(jsonObject, "managingEntity", JsonObject.class), -1));
        JsonArray characteristicArray = getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                builder.characteristic(parseGroupCharacteristic("characteristic", characteristicArray.getJsonObject(i), i));
            }
        }
        JsonArray memberArray = getJsonArray(jsonObject, "member");
        if (memberArray != null) {
            for (int i = 0; i < memberArray.size(); i++) {
                builder.member(parseGroupMember("member", memberArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Group.Characteristic parseGroupCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Group.Characteristic.class, jsonObject);
        }
        Group.Characteristic.Builder builder = Group.Characteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, CodeableConcept.class, Boolean.class, Quantity.class, Range.class, Reference.class));
        builder.exclude(parseBoolean("exclude", getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Group.Member parseGroupMember(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Group.Member.class, jsonObject);
        }
        Group.Member.Builder builder = Group.Member.builder();
        parseBackboneElement(builder, jsonObject);
        builder.entity(parseReference("entity", getJsonValue(jsonObject, "entity", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.inactive(parseBoolean("inactive", getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        stackPop();
        return builder.build();
    }

    private GuidanceResponse parseGuidanceResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(GuidanceResponse.class, jsonObject);
        }
        GuidanceResponse.Builder builder = GuidanceResponse.builder();
        parseDomainResource(builder, jsonObject);
        builder.requestIdentifier(parseIdentifier("requestIdentifier", getJsonValue(jsonObject, "requestIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.module(parseChoiceElement("module", jsonObject, Uri.class, Canonical.class, CodeableConcept.class));
        builder.status((GuidanceResponseStatus) parseString(GuidanceResponseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrenceDateTime(parseDateTime("occurrenceDateTime", getJsonValue(jsonObject, "occurrenceDateTime", JsonString.class), jsonObject.get("_occurrenceDateTime"), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray evaluationMessageArray = getJsonArray(jsonObject, "evaluationMessage");
        if (evaluationMessageArray != null) {
            for (int i = 0; i < evaluationMessageArray.size(); i++) {
                builder.evaluationMessage(parseReference("evaluationMessage", evaluationMessageArray.getJsonObject(i), i));
            }
        }
        builder.outputParameters(parseReference("outputParameters", getJsonValue(jsonObject, "outputParameters", JsonObject.class), -1));
        builder.result(parseReference("result", getJsonValue(jsonObject, "result", JsonObject.class), -1));
        JsonArray dataRequirementArray = getJsonArray(jsonObject, "dataRequirement");
        if (dataRequirementArray != null) {
            for (int i = 0; i < dataRequirementArray.size(); i++) {
                builder.dataRequirement(parseDataRequirement("dataRequirement", dataRequirementArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private HealthcareService parseHealthcareService(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(HealthcareService.class, jsonObject);
        }
        HealthcareService.Builder builder = HealthcareService.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.providedBy(parseReference("providedBy", getJsonValue(jsonObject, "providedBy", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        JsonArray locationArray = getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseReference("location", locationArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.extraDetails((Markdown) parseString(Markdown.builder(), "extraDetails", getJsonValue(jsonObject, "extraDetails", JsonString.class), jsonObject.get("_extraDetails"), -1));
        builder.photo(parseAttachment("photo", getJsonValue(jsonObject, "photo", JsonObject.class), -1));
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray coverageAreaArray = getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceProvisionCodeArray = getJsonArray(jsonObject, "serviceProvisionCode");
        if (serviceProvisionCodeArray != null) {
            for (int i = 0; i < serviceProvisionCodeArray.size(); i++) {
                builder.serviceProvisionCode(parseCodeableConcept("serviceProvisionCode", serviceProvisionCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray eligibilityArray = getJsonArray(jsonObject, "eligibility");
        if (eligibilityArray != null) {
            for (int i = 0; i < eligibilityArray.size(); i++) {
                builder.eligibility(parseHealthcareServiceEligibility("eligibility", eligibilityArray.getJsonObject(i), i));
            }
        }
        JsonArray programArray = getJsonArray(jsonObject, "program");
        if (programArray != null) {
            for (int i = 0; i < programArray.size(); i++) {
                builder.program(parseCodeableConcept("program", programArray.getJsonObject(i), i));
            }
        }
        JsonArray characteristicArray = getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                builder.characteristic(parseCodeableConcept("characteristic", characteristicArray.getJsonObject(i), i));
            }
        }
        JsonArray communicationArray = getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                builder.communication(parseCodeableConcept("communication", communicationArray.getJsonObject(i), i));
            }
        }
        JsonArray referralMethodArray = getJsonArray(jsonObject, "referralMethod");
        if (referralMethodArray != null) {
            for (int i = 0; i < referralMethodArray.size(); i++) {
                builder.referralMethod(parseCodeableConcept("referralMethod", referralMethodArray.getJsonObject(i), i));
            }
        }
        builder.appointmentRequired(parseBoolean("appointmentRequired", getJsonValue(jsonObject, "appointmentRequired", JsonValue.class), jsonObject.get("_appointmentRequired"), -1));
        JsonArray availableTimeArray = getJsonArray(jsonObject, "availableTime");
        if (availableTimeArray != null) {
            for (int i = 0; i < availableTimeArray.size(); i++) {
                builder.availableTime(parseHealthcareServiceAvailableTime("availableTime", availableTimeArray.getJsonObject(i), i));
            }
        }
        JsonArray notAvailableArray = getJsonArray(jsonObject, "notAvailable");
        if (notAvailableArray != null) {
            for (int i = 0; i < notAvailableArray.size(); i++) {
                builder.notAvailable(parseHealthcareServiceNotAvailable("notAvailable", notAvailableArray.getJsonObject(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private HealthcareService.AvailableTime parseHealthcareServiceAvailableTime(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(HealthcareService.AvailableTime.class, jsonObject);
        }
        HealthcareService.AvailableTime.Builder builder = HealthcareService.AvailableTime.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonValue(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", getJsonValue(jsonObject, "availableStartTime", JsonString.class), jsonObject.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", getJsonValue(jsonObject, "availableEndTime", JsonString.class), jsonObject.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    private HealthcareService.Eligibility parseHealthcareServiceEligibility(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(HealthcareService.Eligibility.class, jsonObject);
        }
        HealthcareService.Eligibility.Builder builder = HealthcareService.Eligibility.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private HealthcareService.NotAvailable parseHealthcareServiceNotAvailable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(HealthcareService.NotAvailable.class, jsonObject);
        }
        HealthcareService.NotAvailable.Builder builder = HealthcareService.NotAvailable.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.during(parsePeriod("during", getJsonValue(jsonObject, "during", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private HumanName parseHumanName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(HumanName.class, jsonObject);
        }
        HumanName.Builder builder = HumanName.builder();
        parseElement(builder, jsonObject);
        builder.use((NameUse) parseString(NameUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.family(parseString("family", getJsonValue(jsonObject, "family", JsonString.class), jsonObject.get("_family"), -1));
        JsonArray givenArray = getJsonArray(jsonObject, "given", true);
        if (givenArray != null) {
            JsonArray _givenArray = jsonObject.getJsonArray("_given");
            for (int i = 0; i < givenArray.size(); i++) {
                builder.given(parseString("given", givenArray.get(i), getJsonValue(_givenArray, i), i));
            }
        }
        JsonArray prefixArray = getJsonArray(jsonObject, "prefix", true);
        if (prefixArray != null) {
            JsonArray _prefixArray = jsonObject.getJsonArray("_prefix");
            for (int i = 0; i < prefixArray.size(); i++) {
                builder.prefix(parseString("prefix", prefixArray.get(i), getJsonValue(_prefixArray, i), i));
            }
        }
        JsonArray suffixArray = getJsonArray(jsonObject, "suffix", true);
        if (suffixArray != null) {
            JsonArray _suffixArray = jsonObject.getJsonArray("_suffix");
            for (int i = 0; i < suffixArray.size(); i++) {
                builder.suffix(parseString("suffix", suffixArray.get(i), getJsonValue(_suffixArray, i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Identifier parseIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Identifier.class, jsonObject);
        }
        Identifier.Builder builder = Identifier.builder();
        parseElement(builder, jsonObject);
        builder.use((IdentifierUse) parseString(IdentifierUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.system(parseUri("system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.assigner(parseReference("assigner", getJsonValue(jsonObject, "assigner", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ImagingStudy parseImagingStudy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImagingStudy.class, jsonObject);
        }
        ImagingStudy.Builder builder = ImagingStudy.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ImagingStudyStatus) parseString(ImagingStudyStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray modalityArray = getJsonArray(jsonObject, "modality");
        if (modalityArray != null) {
            for (int i = 0; i < modalityArray.size(); i++) {
                builder.modality(parseCoding("modality", modalityArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.started(parseDateTime("started", getJsonValue(jsonObject, "started", JsonString.class), jsonObject.get("_started"), -1));
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        builder.referrer(parseReference("referrer", getJsonValue(jsonObject, "referrer", JsonObject.class), -1));
        JsonArray interpreterArray = getJsonArray(jsonObject, "interpreter");
        if (interpreterArray != null) {
            for (int i = 0; i < interpreterArray.size(); i++) {
                builder.interpreter(parseReference("interpreter", interpreterArray.getJsonObject(i), i));
            }
        }
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        builder.numberOfSeries((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfSeries", getJsonValue(jsonObject, "numberOfSeries", JsonNumber.class), jsonObject.get("_numberOfSeries"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", getJsonValue(jsonObject, "numberOfInstances", JsonNumber.class), jsonObject.get("_numberOfInstances"), -1));
        builder.procedureReference(parseReference("procedureReference", getJsonValue(jsonObject, "procedureReference", JsonObject.class), -1));
        JsonArray procedureCodeArray = getJsonArray(jsonObject, "procedureCode");
        if (procedureCodeArray != null) {
            for (int i = 0; i < procedureCodeArray.size(); i++) {
                builder.procedureCode(parseCodeableConcept("procedureCode", procedureCodeArray.getJsonObject(i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray seriesArray = getJsonArray(jsonObject, "series");
        if (seriesArray != null) {
            for (int i = 0; i < seriesArray.size(); i++) {
                builder.series(parseImagingStudySeries("series", seriesArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series parseImagingStudySeries(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImagingStudy.Series.class, jsonObject);
        }
        ImagingStudy.Series.Builder builder = ImagingStudy.Series.builder();
        parseBackboneElement(builder, jsonObject);
        builder.uid((Id) parseString(Id.builder(), "uid", getJsonValue(jsonObject, "uid", JsonString.class), jsonObject.get("_uid"), -1));
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.modality(parseCoding("modality", getJsonValue(jsonObject, "modality", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", getJsonValue(jsonObject, "numberOfInstances", JsonNumber.class), jsonObject.get("_numberOfInstances"), -1));
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCoding("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.laterality(parseCoding("laterality", getJsonValue(jsonObject, "laterality", JsonObject.class), -1));
        JsonArray specimenArray = getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                builder.specimen(parseReference("specimen", specimenArray.getJsonObject(i), i));
            }
        }
        builder.started(parseDateTime("started", getJsonValue(jsonObject, "started", JsonString.class), jsonObject.get("_started"), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseImagingStudySeriesPerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray instanceArray = getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                builder.instance(parseImagingStudySeriesInstance("instance", instanceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series.Instance parseImagingStudySeriesInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImagingStudy.Series.Instance.class, jsonObject);
        }
        ImagingStudy.Series.Instance.Builder builder = ImagingStudy.Series.Instance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.uid((Id) parseString(Id.builder(), "uid", getJsonValue(jsonObject, "uid", JsonString.class), jsonObject.get("_uid"), -1));
        builder.sopClass(parseCoding("sopClass", getJsonValue(jsonObject, "sopClass", JsonObject.class), -1));
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        stackPop();
        return builder.build();
    }

    private ImagingStudy.Series.Performer parseImagingStudySeriesPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImagingStudy.Series.Performer.class, jsonObject);
        }
        ImagingStudy.Series.Performer.Builder builder = ImagingStudy.Series.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Immunization parseImmunization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Immunization.class, jsonObject);
        }
        Immunization.Builder builder = Immunization.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ImmunizationStatus) parseString(ImmunizationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.vaccineCode(parseCodeableConcept("vaccineCode", getJsonValue(jsonObject, "vaccineCode", JsonObject.class), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, String.class));
        builder.recorded(parseDateTime("recorded", getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1));
        builder.primarySource(parseBoolean("primarySource", getJsonValue(jsonObject, "primarySource", JsonValue.class), jsonObject.get("_primarySource"), -1));
        builder.reportOrigin(parseCodeableConcept("reportOrigin", getJsonValue(jsonObject, "reportOrigin", JsonObject.class), -1));
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.lotNumber(parseString("lotNumber", getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.expirationDate(parseDate("expirationDate", getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        builder.site(parseCodeableConcept("site", getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.doseQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "doseQuantity", getJsonValue(jsonObject, "doseQuantity", JsonObject.class), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseImmunizationPerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        builder.isSubpotent(parseBoolean("isSubpotent", getJsonValue(jsonObject, "isSubpotent", JsonValue.class), jsonObject.get("_isSubpotent"), -1));
        JsonArray subpotentReasonArray = getJsonArray(jsonObject, "subpotentReason");
        if (subpotentReasonArray != null) {
            for (int i = 0; i < subpotentReasonArray.size(); i++) {
                builder.subpotentReason(parseCodeableConcept("subpotentReason", subpotentReasonArray.getJsonObject(i), i));
            }
        }
        JsonArray educationArray = getJsonArray(jsonObject, "education");
        if (educationArray != null) {
            for (int i = 0; i < educationArray.size(); i++) {
                builder.education(parseImmunizationEducation("education", educationArray.getJsonObject(i), i));
            }
        }
        JsonArray programEligibilityArray = getJsonArray(jsonObject, "programEligibility");
        if (programEligibilityArray != null) {
            for (int i = 0; i < programEligibilityArray.size(); i++) {
                builder.programEligibility(parseCodeableConcept("programEligibility", programEligibilityArray.getJsonObject(i), i));
            }
        }
        builder.fundingSource(parseCodeableConcept("fundingSource", getJsonValue(jsonObject, "fundingSource", JsonObject.class), -1));
        JsonArray reactionArray = getJsonArray(jsonObject, "reaction");
        if (reactionArray != null) {
            for (int i = 0; i < reactionArray.size(); i++) {
                builder.reaction(parseImmunizationReaction("reaction", reactionArray.getJsonObject(i), i));
            }
        }
        JsonArray protocolAppliedArray = getJsonArray(jsonObject, "protocolApplied");
        if (protocolAppliedArray != null) {
            for (int i = 0; i < protocolAppliedArray.size(); i++) {
                builder.protocolApplied(parseImmunizationProtocolApplied("protocolApplied", protocolAppliedArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Immunization.Education parseImmunizationEducation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Immunization.Education.class, jsonObject);
        }
        Immunization.Education.Builder builder = Immunization.Education.builder();
        parseBackboneElement(builder, jsonObject);
        builder.documentType(parseString("documentType", getJsonValue(jsonObject, "documentType", JsonString.class), jsonObject.get("_documentType"), -1));
        builder.reference(parseUri("reference", getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        builder.publicationDate(parseDateTime("publicationDate", getJsonValue(jsonObject, "publicationDate", JsonString.class), jsonObject.get("_publicationDate"), -1));
        builder.presentationDate(parseDateTime("presentationDate", getJsonValue(jsonObject, "presentationDate", JsonString.class), jsonObject.get("_presentationDate"), -1));
        stackPop();
        return builder.build();
    }

    private Immunization.Performer parseImmunizationPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Immunization.Performer.class, jsonObject);
        }
        Immunization.Performer.Builder builder = Immunization.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Immunization.ProtocolApplied parseImmunizationProtocolApplied(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Immunization.ProtocolApplied.class, jsonObject);
        }
        Immunization.ProtocolApplied.Builder builder = Immunization.ProtocolApplied.builder();
        parseBackboneElement(builder, jsonObject);
        builder.series(parseString("series", getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.authority(parseReference("authority", getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        JsonArray targetDiseaseArray = getJsonArray(jsonObject, "targetDisease");
        if (targetDiseaseArray != null) {
            for (int i = 0; i < targetDiseaseArray.size(); i++) {
                builder.targetDisease(parseCodeableConcept("targetDisease", targetDiseaseArray.getJsonObject(i), i));
            }
        }
        builder.doseNumber(parseChoiceElement("doseNumber", jsonObject, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, PositiveInt.class, String.class));
        stackPop();
        return builder.build();
    }

    private Immunization.Reaction parseImmunizationReaction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Immunization.Reaction.class, jsonObject);
        }
        Immunization.Reaction.Builder builder = Immunization.Reaction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.detail(parseReference("detail", getJsonValue(jsonObject, "detail", JsonObject.class), -1));
        builder.reported(parseBoolean("reported", getJsonValue(jsonObject, "reported", JsonValue.class), jsonObject.get("_reported"), -1));
        stackPop();
        return builder.build();
    }

    private ImmunizationEvaluation parseImmunizationEvaluation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImmunizationEvaluation.class, jsonObject);
        }
        ImmunizationEvaluation.Builder builder = ImmunizationEvaluation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ImmunizationEvaluationStatus) parseString(ImmunizationEvaluationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.authority(parseReference("authority", getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        builder.targetDisease(parseCodeableConcept("targetDisease", getJsonValue(jsonObject, "targetDisease", JsonObject.class), -1));
        builder.immunizationEvent(parseReference("immunizationEvent", getJsonValue(jsonObject, "immunizationEvent", JsonObject.class), -1));
        builder.doseStatus(parseCodeableConcept("doseStatus", getJsonValue(jsonObject, "doseStatus", JsonObject.class), -1));
        JsonArray doseStatusReasonArray = getJsonArray(jsonObject, "doseStatusReason");
        if (doseStatusReasonArray != null) {
            for (int i = 0; i < doseStatusReasonArray.size(); i++) {
                builder.doseStatusReason(parseCodeableConcept("doseStatusReason", doseStatusReasonArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.series(parseString("series", getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonObject, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, PositiveInt.class, String.class));
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation parseImmunizationRecommendation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImmunizationRecommendation.class, jsonObject);
        }
        ImmunizationRecommendation.Builder builder = ImmunizationRecommendation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.authority(parseReference("authority", getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        JsonArray recommendationArray = getJsonArray(jsonObject, "recommendation");
        if (recommendationArray != null) {
            for (int i = 0; i < recommendationArray.size(); i++) {
                builder.recommendation(parseImmunizationRecommendationRecommendation("recommendation", recommendationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation.Recommendation parseImmunizationRecommendationRecommendation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImmunizationRecommendation.Recommendation.class, jsonObject);
        }
        ImmunizationRecommendation.Recommendation.Builder builder = ImmunizationRecommendation.Recommendation.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray vaccineCodeArray = getJsonArray(jsonObject, "vaccineCode");
        if (vaccineCodeArray != null) {
            for (int i = 0; i < vaccineCodeArray.size(); i++) {
                builder.vaccineCode(parseCodeableConcept("vaccineCode", vaccineCodeArray.getJsonObject(i), i));
            }
        }
        builder.targetDisease(parseCodeableConcept("targetDisease", getJsonValue(jsonObject, "targetDisease", JsonObject.class), -1));
        JsonArray contraindicatedVaccineCodeArray = getJsonArray(jsonObject, "contraindicatedVaccineCode");
        if (contraindicatedVaccineCodeArray != null) {
            for (int i = 0; i < contraindicatedVaccineCodeArray.size(); i++) {
                builder.contraindicatedVaccineCode(parseCodeableConcept("contraindicatedVaccineCode", contraindicatedVaccineCodeArray.getJsonObject(i), i));
            }
        }
        builder.forecastStatus(parseCodeableConcept("forecastStatus", getJsonValue(jsonObject, "forecastStatus", JsonObject.class), -1));
        JsonArray forecastReasonArray = getJsonArray(jsonObject, "forecastReason");
        if (forecastReasonArray != null) {
            for (int i = 0; i < forecastReasonArray.size(); i++) {
                builder.forecastReason(parseCodeableConcept("forecastReason", forecastReasonArray.getJsonObject(i), i));
            }
        }
        JsonArray dateCriterionArray = getJsonArray(jsonObject, "dateCriterion");
        if (dateCriterionArray != null) {
            for (int i = 0; i < dateCriterionArray.size(); i++) {
                builder.dateCriterion(parseImmunizationRecommendationRecommendationDateCriterion("dateCriterion", dateCriterionArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.series(parseString("series", getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonObject, PositiveInt.class, String.class));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, PositiveInt.class, String.class));
        JsonArray supportingImmunizationArray = getJsonArray(jsonObject, "supportingImmunization");
        if (supportingImmunizationArray != null) {
            for (int i = 0; i < supportingImmunizationArray.size(); i++) {
                builder.supportingImmunization(parseReference("supportingImmunization", supportingImmunizationArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingPatientInformationArray = getJsonArray(jsonObject, "supportingPatientInformation");
        if (supportingPatientInformationArray != null) {
            for (int i = 0; i < supportingPatientInformationArray.size(); i++) {
                builder.supportingPatientInformation(parseReference("supportingPatientInformation", supportingPatientInformationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImmunizationRecommendation.Recommendation.DateCriterion parseImmunizationRecommendationRecommendationDateCriterion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImmunizationRecommendation.Recommendation.DateCriterion.class, jsonObject);
        }
        ImmunizationRecommendation.Recommendation.DateCriterion.Builder builder = ImmunizationRecommendation.Recommendation.DateCriterion.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseDateTime("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide parseImplementationGuide(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.class, jsonObject);
        }
        ImplementationGuide.Builder builder = ImplementationGuide.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.packageId((Id) parseString(Id.builder(), "packageId", getJsonValue(jsonObject, "packageId", JsonString.class), jsonObject.get("_packageId"), -1));
        builder.license((SPDXLicense) parseString(SPDXLicense.builder(), "license", getJsonValue(jsonObject, "license", JsonString.class), jsonObject.get("_license"), -1));
        JsonArray fhirVersionArray = getJsonArray(jsonObject, "fhirVersion", true);
        if (fhirVersionArray != null) {
            JsonArray _fhirVersionArray = jsonObject.getJsonArray("_fhirVersion");
            for (int i = 0; i < fhirVersionArray.size(); i++) {
                builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", fhirVersionArray.get(i), getJsonValue(_fhirVersionArray, i), i));
            }
        }
        JsonArray dependsOnArray = getJsonArray(jsonObject, "dependsOn");
        if (dependsOnArray != null) {
            for (int i = 0; i < dependsOnArray.size(); i++) {
                builder.dependsOn(parseImplementationGuideDependsOn("dependsOn", dependsOnArray.getJsonObject(i), i));
            }
        }
        JsonArray globalArray = getJsonArray(jsonObject, "global");
        if (globalArray != null) {
            for (int i = 0; i < globalArray.size(); i++) {
                builder.global(parseImplementationGuideGlobal("global", globalArray.getJsonObject(i), i));
            }
        }
        builder.definition(parseImplementationGuideDefinition("definition", getJsonValue(jsonObject, "definition", JsonObject.class), -1));
        builder.manifest(parseImplementationGuideManifest("manifest", getJsonValue(jsonObject, "manifest", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition parseImplementationGuideDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.class, jsonObject);
        }
        ImplementationGuide.Definition.Builder builder = ImplementationGuide.Definition.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray groupingArray = getJsonArray(jsonObject, "grouping");
        if (groupingArray != null) {
            for (int i = 0; i < groupingArray.size(); i++) {
                builder.grouping(parseImplementationGuideDefinitionGrouping("grouping", groupingArray.getJsonObject(i), i));
            }
        }
        JsonArray resourceArray = getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource(parseImplementationGuideDefinitionResource("resource", resourceArray.getJsonObject(i), i));
            }
        }
        builder.page(parseImplementationGuideDefinitionPage("page", getJsonValue(jsonObject, "page", JsonObject.class), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseImplementationGuideDefinitionParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        JsonArray templateArray = getJsonArray(jsonObject, "template");
        if (templateArray != null) {
            for (int i = 0; i < templateArray.size(); i++) {
                builder.template(parseImplementationGuideDefinitionTemplate("template", templateArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Grouping parseImplementationGuideDefinitionGrouping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Grouping.class, jsonObject);
        }
        ImplementationGuide.Definition.Grouping.Builder builder = ImplementationGuide.Definition.Grouping.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Page parseImplementationGuideDefinitionPage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Page.class, jsonObject);
        }
        ImplementationGuide.Definition.Page.Builder builder = ImplementationGuide.Definition.Page.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseChoiceElement("name", jsonObject, Url.class, Reference.class));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.generation((GuidePageGeneration) parseString(GuidePageGeneration.builder(), "generation", getJsonValue(jsonObject, "generation", JsonString.class), jsonObject.get("_generation"), -1));
        JsonArray pageArray = getJsonArray(jsonObject, "page");
        if (pageArray != null) {
            for (int i = 0; i < pageArray.size(); i++) {
                builder.page(parseImplementationGuideDefinitionPage("page", pageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Parameter parseImplementationGuideDefinitionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Parameter.class, jsonObject);
        }
        ImplementationGuide.Definition.Parameter.Builder builder = ImplementationGuide.Definition.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((GuideParameterCode) parseString(GuideParameterCode.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Resource parseImplementationGuideDefinitionResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Resource.class, jsonObject);
        }
        ImplementationGuide.Definition.Resource.Builder builder = ImplementationGuide.Definition.Resource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        JsonArray fhirVersionArray = getJsonArray(jsonObject, "fhirVersion", true);
        if (fhirVersionArray != null) {
            JsonArray _fhirVersionArray = jsonObject.getJsonArray("_fhirVersion");
            for (int i = 0; i < fhirVersionArray.size(); i++) {
                builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", fhirVersionArray.get(i), getJsonValue(_fhirVersionArray, i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.example(parseChoiceElement("example", jsonObject, Boolean.class, Canonical.class));
        builder.groupingId((Id) parseString(Id.builder(), "groupingId", getJsonValue(jsonObject, "groupingId", JsonString.class), jsonObject.get("_groupingId"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Definition.Template parseImplementationGuideDefinitionTemplate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Definition.Template.class, jsonObject);
        }
        ImplementationGuide.Definition.Template.Builder builder = ImplementationGuide.Definition.Template.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.source(parseString("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.scope(parseString("scope", getJsonValue(jsonObject, "scope", JsonString.class), jsonObject.get("_scope"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.DependsOn parseImplementationGuideDependsOn(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.DependsOn.class, jsonObject);
        }
        ImplementationGuide.DependsOn.Builder builder = ImplementationGuide.DependsOn.builder();
        parseBackboneElement(builder, jsonObject);
        builder.uri((Canonical) parseUri(Canonical.builder(), "uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.packageId((Id) parseString(Id.builder(), "packageId", getJsonValue(jsonObject, "packageId", JsonString.class), jsonObject.get("_packageId"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Global parseImplementationGuideGlobal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Global.class, jsonObject);
        }
        ImplementationGuide.Global.Builder builder = ImplementationGuide.Global.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ResourceType) parseString(ResourceType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest parseImplementationGuideManifest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.class, jsonObject);
        }
        ImplementationGuide.Manifest.Builder builder = ImplementationGuide.Manifest.builder();
        parseBackboneElement(builder, jsonObject);
        builder.rendering((Url) parseUri(Url.builder(), "rendering", getJsonValue(jsonObject, "rendering", JsonString.class), jsonObject.get("_rendering"), -1));
        JsonArray resourceArray = getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource(parseImplementationGuideManifestResource("resource", resourceArray.getJsonObject(i), i));
            }
        }
        JsonArray pageArray = getJsonArray(jsonObject, "page");
        if (pageArray != null) {
            for (int i = 0; i < pageArray.size(); i++) {
                builder.page(parseImplementationGuideManifestPage("page", pageArray.getJsonObject(i), i));
            }
        }
        JsonArray imageArray = getJsonArray(jsonObject, "image", true);
        if (imageArray != null) {
            JsonArray _imageArray = jsonObject.getJsonArray("_image");
            for (int i = 0; i < imageArray.size(); i++) {
                builder.image(parseString("image", imageArray.get(i), getJsonValue(_imageArray, i), i));
            }
        }
        JsonArray otherArray = getJsonArray(jsonObject, "other", true);
        if (otherArray != null) {
            JsonArray _otherArray = jsonObject.getJsonArray("_other");
            for (int i = 0; i < otherArray.size(); i++) {
                builder.other(parseString("other", otherArray.get(i), getJsonValue(_otherArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest.Page parseImplementationGuideManifestPage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.Page.class, jsonObject);
        }
        ImplementationGuide.Manifest.Page.Builder builder = ImplementationGuide.Manifest.Page.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray anchorArray = getJsonArray(jsonObject, "anchor", true);
        if (anchorArray != null) {
            JsonArray _anchorArray = jsonObject.getJsonArray("_anchor");
            for (int i = 0; i < anchorArray.size(); i++) {
                builder.anchor(parseString("anchor", anchorArray.get(i), getJsonValue(_anchorArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ImplementationGuide.Manifest.Resource parseImplementationGuideManifestResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ImplementationGuide.Manifest.Resource.class, jsonObject);
        }
        ImplementationGuide.Manifest.Resource.Builder builder = ImplementationGuide.Manifest.Resource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.reference(parseReference("reference", getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        builder.example(parseChoiceElement("example", jsonObject, Boolean.class, Canonical.class));
        builder.relativePath((Url) parseUri(Url.builder(), "relativePath", getJsonValue(jsonObject, "relativePath", JsonString.class), jsonObject.get("_relativePath"), -1));
        stackPop();
        return builder.build();
    }

    private Instant parseInstant(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Instant.Builder builder = Instant.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan parseInsurancePlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.class, jsonObject);
        }
        InsurancePlan.Builder builder = InsurancePlan.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonValue(_aliasArray, i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.ownedBy(parseReference("ownedBy", getJsonValue(jsonObject, "ownedBy", JsonObject.class), -1));
        builder.administeredBy(parseReference("administeredBy", getJsonValue(jsonObject, "administeredBy", JsonObject.class), -1));
        JsonArray coverageAreaArray = getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.getJsonObject(i), i));
            }
        }
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseInsurancePlanContact("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        JsonArray networkArray = getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                builder.network(parseReference("network", networkArray.getJsonObject(i), i));
            }
        }
        JsonArray coverageArray = getJsonArray(jsonObject, "coverage");
        if (coverageArray != null) {
            for (int i = 0; i < coverageArray.size(); i++) {
                builder.coverage(parseInsurancePlanCoverage("coverage", coverageArray.getJsonObject(i), i));
            }
        }
        JsonArray planArray = getJsonArray(jsonObject, "plan");
        if (planArray != null) {
            for (int i = 0; i < planArray.size(); i++) {
                builder.plan(parseInsurancePlanPlan("plan", planArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Contact parseInsurancePlanContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Contact.class, jsonObject);
        }
        InsurancePlan.Contact.Builder builder = InsurancePlan.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        builder.purpose(parseCodeableConcept("purpose", getJsonValue(jsonObject, "purpose", JsonObject.class), -1));
        builder.name(parseHumanName("name", getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonValue(jsonObject, "address", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage parseInsurancePlanCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.class, jsonObject);
        }
        InsurancePlan.Coverage.Builder builder = InsurancePlan.Coverage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray networkArray = getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                builder.network(parseReference("network", networkArray.getJsonObject(i), i));
            }
        }
        JsonArray benefitArray = getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                builder.benefit(parseInsurancePlanCoverageBenefit("benefit", benefitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage.Benefit parseInsurancePlanCoverageBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.Benefit.class, jsonObject);
        }
        InsurancePlan.Coverage.Benefit.Builder builder = InsurancePlan.Coverage.Benefit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.requirement(parseString("requirement", getJsonValue(jsonObject, "requirement", JsonString.class), jsonObject.get("_requirement"), -1));
        JsonArray limitArray = getJsonArray(jsonObject, "limit");
        if (limitArray != null) {
            for (int i = 0; i < limitArray.size(); i++) {
                builder.limit(parseInsurancePlanCoverageBenefitLimit("limit", limitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Coverage.Benefit.Limit parseInsurancePlanCoverageBenefitLimit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Coverage.Benefit.Limit.class, jsonObject);
        }
        InsurancePlan.Coverage.Benefit.Limit.Builder builder = InsurancePlan.Coverage.Benefit.Limit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseQuantity("value", getJsonValue(jsonObject, "value", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan parseInsurancePlanPlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Plan.class, jsonObject);
        }
        InsurancePlan.Plan.Builder builder = InsurancePlan.Plan.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray coverageAreaArray = getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            for (int i = 0; i < coverageAreaArray.size(); i++) {
                builder.coverageArea(parseReference("coverageArea", coverageAreaArray.getJsonObject(i), i));
            }
        }
        JsonArray networkArray = getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                builder.network(parseReference("network", networkArray.getJsonObject(i), i));
            }
        }
        JsonArray generalCostArray = getJsonArray(jsonObject, "generalCost");
        if (generalCostArray != null) {
            for (int i = 0; i < generalCostArray.size(); i++) {
                builder.generalCost(parseInsurancePlanPlanGeneralCost("generalCost", generalCostArray.getJsonObject(i), i));
            }
        }
        JsonArray specificCostArray = getJsonArray(jsonObject, "specificCost");
        if (specificCostArray != null) {
            for (int i = 0; i < specificCostArray.size(); i++) {
                builder.specificCost(parseInsurancePlanPlanSpecificCost("specificCost", specificCostArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.GeneralCost parseInsurancePlanPlanGeneralCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Plan.GeneralCost.class, jsonObject);
        }
        InsurancePlan.Plan.GeneralCost.Builder builder = InsurancePlan.Plan.GeneralCost.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupSize((PositiveInt) parseInteger(PositiveInt.builder(), "groupSize", getJsonValue(jsonObject, "groupSize", JsonNumber.class), jsonObject.get("_groupSize"), -1));
        builder.cost(parseMoney("cost", getJsonValue(jsonObject, "cost", JsonObject.class), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost parseInsurancePlanPlanSpecificCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.class, jsonObject);
        }
        InsurancePlan.Plan.SpecificCost.Builder builder = InsurancePlan.Plan.SpecificCost.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray benefitArray = getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            for (int i = 0; i < benefitArray.size(); i++) {
                builder.benefit(parseInsurancePlanPlanSpecificCostBenefit("benefit", benefitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost.Benefit parseInsurancePlanPlanSpecificCostBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.Benefit.class, jsonObject);
        }
        InsurancePlan.Plan.SpecificCost.Benefit.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray costArray = getJsonArray(jsonObject, "cost");
        if (costArray != null) {
            for (int i = 0; i < costArray.size(); i++) {
                builder.cost(parseInsurancePlanPlanSpecificCostBenefitCost("cost", costArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private InsurancePlan.Plan.SpecificCost.Benefit.Cost parseInsurancePlanPlanSpecificCostBenefitCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(InsurancePlan.Plan.SpecificCost.Benefit.Cost.class, jsonObject);
        }
        InsurancePlan.Plan.SpecificCost.Benefit.Cost.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.Cost.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.applicability(parseCodeableConcept("applicability", getJsonValue(jsonObject, "applicability", JsonObject.class), -1));
        JsonArray qualifiersArray = getJsonArray(jsonObject, "qualifiers");
        if (qualifiersArray != null) {
            for (int i = 0; i < qualifiersArray.size(); i++) {
                builder.qualifiers(parseCodeableConcept("qualifiers", qualifiersArray.getJsonObject(i), i));
            }
        }
        builder.value(parseQuantity("value", getJsonValue(jsonObject, "value", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Integer parseInteger(Integer.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.NUMBER) {
            JsonNumber jsonNumber = (JsonNumber) jsonValue;
            builder.value(jsonNumber.intValueExact());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: NUMBER but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Integer parseInteger(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseInteger(Integer.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private Invoice parseInvoice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Invoice.class, jsonObject);
        }
        Invoice.Builder builder = Invoice.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((InvoiceStatus) parseString(InvoiceStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.cancelledReason(parseString("cancelledReason", getJsonValue(jsonObject, "cancelledReason", JsonString.class), jsonObject.get("_cancelledReason"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.recipient(parseReference("recipient", getJsonValue(jsonObject, "recipient", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseInvoiceParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        builder.issuer(parseReference("issuer", getJsonValue(jsonObject, "issuer", JsonObject.class), -1));
        builder.account(parseReference("account", getJsonValue(jsonObject, "account", JsonObject.class), -1));
        JsonArray lineItemArray = getJsonArray(jsonObject, "lineItem");
        if (lineItemArray != null) {
            for (int i = 0; i < lineItemArray.size(); i++) {
                builder.lineItem(parseInvoiceLineItem("lineItem", lineItemArray.getJsonObject(i), i));
            }
        }
        JsonArray totalPriceComponentArray = getJsonArray(jsonObject, "totalPriceComponent");
        if (totalPriceComponentArray != null) {
            for (int i = 0; i < totalPriceComponentArray.size(); i++) {
                builder.totalPriceComponent(parseInvoiceLineItemPriceComponent("totalPriceComponent", totalPriceComponentArray.getJsonObject(i), i));
            }
        }
        builder.totalNet(parseMoney("totalNet", getJsonValue(jsonObject, "totalNet", JsonObject.class), -1));
        builder.totalGross(parseMoney("totalGross", getJsonValue(jsonObject, "totalGross", JsonObject.class), -1));
        builder.paymentTerms((Markdown) parseString(Markdown.builder(), "paymentTerms", getJsonValue(jsonObject, "paymentTerms", JsonString.class), jsonObject.get("_paymentTerms"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Invoice.LineItem parseInvoiceLineItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Invoice.LineItem.class, jsonObject);
        }
        Invoice.LineItem.Builder builder = Invoice.LineItem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.chargeItem(parseChoiceElement("chargeItem", jsonObject, Reference.class, CodeableConcept.class));
        JsonArray priceComponentArray = getJsonArray(jsonObject, "priceComponent");
        if (priceComponentArray != null) {
            for (int i = 0; i < priceComponentArray.size(); i++) {
                builder.priceComponent(parseInvoiceLineItemPriceComponent("priceComponent", priceComponentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Invoice.LineItem.PriceComponent parseInvoiceLineItemPriceComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Invoice.LineItem.PriceComponent.class, jsonObject);
        }
        Invoice.LineItem.PriceComponent.Builder builder = Invoice.LineItem.PriceComponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((InvoicePriceComponentType) parseString(InvoicePriceComponentType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Invoice.Participant parseInvoiceParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Invoice.Participant.class, jsonObject);
        }
        Invoice.Participant.Builder builder = Invoice.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Library parseLibrary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Library.class, jsonObject);
        }
        Library.Builder builder = Library.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseParameterDefinition("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        JsonArray dataRequirementArray = getJsonArray(jsonObject, "dataRequirement");
        if (dataRequirementArray != null) {
            for (int i = 0; i < dataRequirementArray.size(); i++) {
                builder.dataRequirement(parseDataRequirement("dataRequirement", dataRequirementArray.getJsonObject(i), i));
            }
        }
        JsonArray contentArray = getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            for (int i = 0; i < contentArray.size(); i++) {
                builder.content(parseAttachment("content", contentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Linkage parseLinkage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Linkage.class, jsonObject);
        }
        Linkage.Builder builder = Linkage.builder();
        parseDomainResource(builder, jsonObject);
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseLinkageItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Linkage.Item parseLinkageItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Linkage.Item.class, jsonObject);
        }
        Linkage.Item.Builder builder = Linkage.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((LinkageType) parseString(LinkageType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.resource(parseReference("resource", getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private List parseList(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(List.class, jsonObject);
        }
        List.Builder builder = List.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ListStatus) parseString(ListStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.mode((ListMode) parseString(ListMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", getJsonValue(jsonObject, "orderedBy", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray entryArray = getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            for (int i = 0; i < entryArray.size(); i++) {
                builder.entry(parseListEntry("entry", entryArray.getJsonObject(i), i));
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", getJsonValue(jsonObject, "emptyReason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private List.Entry parseListEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(List.Entry.class, jsonObject);
        }
        List.Entry.Builder builder = List.Entry.builder();
        parseBackboneElement(builder, jsonObject);
        builder.flag(parseCodeableConcept("flag", getJsonValue(jsonObject, "flag", JsonObject.class), -1));
        builder.deleted(parseBoolean("deleted", getJsonValue(jsonObject, "deleted", JsonValue.class), jsonObject.get("_deleted"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.item(parseReference("item", getJsonValue(jsonObject, "item", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Location parseLocation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Location.class, jsonObject);
        }
        Location.Builder builder = Location.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((LocationStatus) parseString(LocationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.operationalStatus(parseCoding("operationalStatus", getJsonValue(jsonObject, "operationalStatus", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonValue(_aliasArray, i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.mode((LocationMode) parseString(LocationMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonValue(jsonObject, "address", JsonObject.class), -1));
        builder.physicalType(parseCodeableConcept("physicalType", getJsonValue(jsonObject, "physicalType", JsonObject.class), -1));
        builder.position(parseLocationPosition("position", getJsonValue(jsonObject, "position", JsonObject.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.partOf(parseReference("partOf", getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        JsonArray hoursOfOperationArray = getJsonArray(jsonObject, "hoursOfOperation");
        if (hoursOfOperationArray != null) {
            for (int i = 0; i < hoursOfOperationArray.size(); i++) {
                builder.hoursOfOperation(parseLocationHoursOfOperation("hoursOfOperation", hoursOfOperationArray.getJsonObject(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Location.HoursOfOperation parseLocationHoursOfOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Location.HoursOfOperation.class, jsonObject);
        }
        Location.HoursOfOperation.Builder builder = Location.HoursOfOperation.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonValue(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.openingTime(parseTime("openingTime", getJsonValue(jsonObject, "openingTime", JsonString.class), jsonObject.get("_openingTime"), -1));
        builder.closingTime(parseTime("closingTime", getJsonValue(jsonObject, "closingTime", JsonString.class), jsonObject.get("_closingTime"), -1));
        stackPop();
        return builder.build();
    }

    private Location.Position parseLocationPosition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Location.Position.class, jsonObject);
        }
        Location.Position.Builder builder = Location.Position.builder();
        parseBackboneElement(builder, jsonObject);
        builder.longitude(parseDecimal("longitude", getJsonValue(jsonObject, "longitude", JsonNumber.class), jsonObject.get("_longitude"), -1));
        builder.latitude(parseDecimal("latitude", getJsonValue(jsonObject, "latitude", JsonNumber.class), jsonObject.get("_latitude"), -1));
        builder.altitude(parseDecimal("altitude", getJsonValue(jsonObject, "altitude", JsonNumber.class), jsonObject.get("_altitude"), -1));
        stackPop();
        return builder.build();
    }

    private MarketingStatus parseMarketingStatus(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MarketingStatus.class, jsonObject);
        }
        MarketingStatus.Builder builder = MarketingStatus.builder();
        parseBackboneElement(builder, jsonObject);
        builder.country(parseCodeableConcept("country", getJsonValue(jsonObject, "country", JsonObject.class), -1));
        builder.jurisdiction(parseCodeableConcept("jurisdiction", getJsonValue(jsonObject, "jurisdiction", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.dateRange(parsePeriod("dateRange", getJsonValue(jsonObject, "dateRange", JsonObject.class), -1));
        builder.restoreDate(parseDateTime("restoreDate", getJsonValue(jsonObject, "restoreDate", JsonString.class), jsonObject.get("_restoreDate"), -1));
        stackPop();
        return builder.build();
    }

    private Measure parseMeasure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.class, jsonObject);
        }
        Measure.Builder builder = Measure.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray libraryArray = getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonValue(_libraryArray, i), i));
            }
        }
        builder.disclaimer((Markdown) parseString(Markdown.builder(), "disclaimer", getJsonValue(jsonObject, "disclaimer", JsonString.class), jsonObject.get("_disclaimer"), -1));
        builder.scoring(parseCodeableConcept("scoring", getJsonValue(jsonObject, "scoring", JsonObject.class), -1));
        builder.compositeScoring(parseCodeableConcept("compositeScoring", getJsonValue(jsonObject, "compositeScoring", JsonObject.class), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.riskAdjustment(parseString("riskAdjustment", getJsonValue(jsonObject, "riskAdjustment", JsonString.class), jsonObject.get("_riskAdjustment"), -1));
        builder.rateAggregation(parseString("rateAggregation", getJsonValue(jsonObject, "rateAggregation", JsonString.class), jsonObject.get("_rateAggregation"), -1));
        builder.rationale((Markdown) parseString(Markdown.builder(), "rationale", getJsonValue(jsonObject, "rationale", JsonString.class), jsonObject.get("_rationale"), -1));
        builder.clinicalRecommendationStatement((Markdown) parseString(Markdown.builder(), "clinicalRecommendationStatement", getJsonValue(jsonObject, "clinicalRecommendationStatement", JsonString.class), jsonObject.get("_clinicalRecommendationStatement"), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", getJsonValue(jsonObject, "improvementNotation", JsonObject.class), -1));
        JsonArray definitionArray = getJsonArray(jsonObject, "definition", true);
        if (definitionArray != null) {
            JsonArray _definitionArray = jsonObject.getJsonArray("_definition");
            for (int i = 0; i < definitionArray.size(); i++) {
                builder.definition((Markdown) parseString(Markdown.builder(), "definition", definitionArray.get(i), getJsonValue(_definitionArray, i), i));
            }
        }
        builder.guidance((Markdown) parseString(Markdown.builder(), "guidance", getJsonValue(jsonObject, "guidance", JsonString.class), jsonObject.get("_guidance"), -1));
        JsonArray groupArray = getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                builder.group(parseMeasureGroup("group", groupArray.getJsonObject(i), i));
            }
        }
        JsonArray supplementalDataArray = getJsonArray(jsonObject, "supplementalData");
        if (supplementalDataArray != null) {
            for (int i = 0; i < supplementalDataArray.size(); i++) {
                builder.supplementalData(parseMeasureSupplementalData("supplementalData", supplementalDataArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group parseMeasureGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.Group.class, jsonObject);
        }
        Measure.Group.Builder builder = Measure.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parseMeasureGroupPopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        JsonArray stratifierArray = getJsonArray(jsonObject, "stratifier");
        if (stratifierArray != null) {
            for (int i = 0; i < stratifierArray.size(); i++) {
                builder.stratifier(parseMeasureGroupStratifier("stratifier", stratifierArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group.Population parseMeasureGroupPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.Group.Population.class, jsonObject);
        }
        Measure.Group.Population.Builder builder = Measure.Group.Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonValue(jsonObject, "criteria", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Measure.Group.Stratifier parseMeasureGroupStratifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.Group.Stratifier.class, jsonObject);
        }
        Measure.Group.Stratifier.Builder builder = Measure.Group.Stratifier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonValue(jsonObject, "criteria", JsonObject.class), -1));
        JsonArray componentArray = getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                builder.component(parseMeasureGroupStratifierComponent("component", componentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Measure.Group.Stratifier.Component parseMeasureGroupStratifierComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.Group.Stratifier.Component.class, jsonObject);
        }
        Measure.Group.Stratifier.Component.Builder builder = Measure.Group.Stratifier.Component.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonValue(jsonObject, "criteria", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Measure.SupplementalData parseMeasureSupplementalData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Measure.SupplementalData.class, jsonObject);
        }
        Measure.SupplementalData.Builder builder = Measure.SupplementalData.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray usageArray = getJsonArray(jsonObject, "usage");
        if (usageArray != null) {
            for (int i = 0; i < usageArray.size(); i++) {
                builder.usage(parseCodeableConcept("usage", usageArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.criteria(parseExpression("criteria", getJsonValue(jsonObject, "criteria", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport parseMeasureReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.class, jsonObject);
        }
        MeasureReport.Builder builder = MeasureReport.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((MeasureReportStatus) parseString(MeasureReportStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type((MeasureReportType) parseString(MeasureReportType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.measure((Canonical) parseUri(Canonical.builder(), "measure", getJsonValue(jsonObject, "measure", JsonString.class), jsonObject.get("_measure"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.reporter(parseReference("reporter", getJsonValue(jsonObject, "reporter", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", getJsonValue(jsonObject, "improvementNotation", JsonObject.class), -1));
        JsonArray groupArray = getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                builder.group(parseMeasureReportGroup("group", groupArray.getJsonObject(i), i));
            }
        }
        JsonArray evaluatedResourceArray = getJsonArray(jsonObject, "evaluatedResource");
        if (evaluatedResourceArray != null) {
            for (int i = 0; i < evaluatedResourceArray.size(); i++) {
                builder.evaluatedResource(parseReference("evaluatedResource", evaluatedResourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group parseMeasureReportGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.class, jsonObject);
        }
        MeasureReport.Group.Builder builder = MeasureReport.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parseMeasureReportGroupPopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        builder.measureScore(parseQuantity("measureScore", getJsonValue(jsonObject, "measureScore", JsonObject.class), -1));
        JsonArray stratifierArray = getJsonArray(jsonObject, "stratifier");
        if (stratifierArray != null) {
            for (int i = 0; i < stratifierArray.size(); i++) {
                builder.stratifier(parseMeasureReportGroupStratifier("stratifier", stratifierArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Population parseMeasureReportGroupPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.Population.class, jsonObject);
        }
        MeasureReport.Group.Population.Builder builder = MeasureReport.Group.Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.count(parseInteger("count", getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", getJsonValue(jsonObject, "subjectResults", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier parseMeasureReportGroupStratifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.class, jsonObject);
        }
        MeasureReport.Group.Stratifier.Builder builder = MeasureReport.Group.Stratifier.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray stratumArray = getJsonArray(jsonObject, "stratum");
        if (stratumArray != null) {
            for (int i = 0; i < stratumArray.size(); i++) {
                builder.stratum(parseMeasureReportGroupStratifierStratum("stratum", stratumArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum parseMeasureReportGroupStratifierStratum(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.class, jsonObject);
        }
        MeasureReport.Group.Stratifier.Stratum.Builder builder = MeasureReport.Group.Stratifier.Stratum.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseCodeableConcept("value", getJsonValue(jsonObject, "value", JsonObject.class), -1));
        JsonArray componentArray = getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                builder.component(parseMeasureReportGroupStratifierStratumComponent("component", componentArray.getJsonObject(i), i));
            }
        }
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parseMeasureReportGroupStratifierStratumPopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        builder.measureScore(parseQuantity("measureScore", getJsonValue(jsonObject, "measureScore", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum.Component parseMeasureReportGroupStratifierStratumComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.Component.class, jsonObject);
        }
        MeasureReport.Group.Stratifier.Stratum.Component.Builder builder = MeasureReport.Group.Stratifier.Stratum.Component.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseCodeableConcept("value", getJsonValue(jsonObject, "value", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MeasureReport.Group.Stratifier.Stratum.Population parseMeasureReportGroupStratifierStratumPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MeasureReport.Group.Stratifier.Stratum.Population.class, jsonObject);
        }
        MeasureReport.Group.Stratifier.Stratum.Population.Builder builder = MeasureReport.Group.Stratifier.Stratum.Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.count(parseInteger("count", getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", getJsonValue(jsonObject, "subjectResults", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Media parseMedia(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Media.class, jsonObject);
        }
        Media.Builder builder = Media.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((MediaStatus) parseString(MediaStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.modality(parseCodeableConcept("modality", getJsonValue(jsonObject, "modality", JsonObject.class), -1));
        builder.view(parseCodeableConcept("view", getJsonValue(jsonObject, "view", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.created(parseChoiceElement("created", jsonObject, DateTime.class, Period.class));
        builder.issued(parseInstant("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.operator(parseReference("operator", getJsonValue(jsonObject, "operator", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.deviceName(parseString("deviceName", getJsonValue(jsonObject, "deviceName", JsonString.class), jsonObject.get("_deviceName"), -1));
        builder.device(parseReference("device", getJsonValue(jsonObject, "device", JsonObject.class), -1));
        builder.height((PositiveInt) parseInteger(PositiveInt.builder(), "height", getJsonValue(jsonObject, "height", JsonNumber.class), jsonObject.get("_height"), -1));
        builder.width((PositiveInt) parseInteger(PositiveInt.builder(), "width", getJsonValue(jsonObject, "width", JsonNumber.class), jsonObject.get("_width"), -1));
        builder.frames((PositiveInt) parseInteger(PositiveInt.builder(), "frames", getJsonValue(jsonObject, "frames", JsonNumber.class), jsonObject.get("_frames"), -1));
        builder.duration(parseDecimal("duration", getJsonValue(jsonObject, "duration", JsonNumber.class), jsonObject.get("_duration"), -1));
        builder.content(parseAttachment("content", getJsonValue(jsonObject, "content", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Medication parseMedication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Medication.class, jsonObject);
        }
        Medication.Builder builder = Medication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status((MedicationStatus) parseString(MedicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.form(parseCodeableConcept("form", getJsonValue(jsonObject, "form", JsonObject.class), -1));
        builder.amount(parseRatio("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray ingredientArray = getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                builder.ingredient(parseMedicationIngredient("ingredient", ingredientArray.getJsonObject(i), i));
            }
        }
        builder.batch(parseMedicationBatch("batch", getJsonValue(jsonObject, "batch", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Medication.Batch parseMedicationBatch(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Medication.Batch.class, jsonObject);
        }
        Medication.Batch.Builder builder = Medication.Batch.builder();
        parseBackboneElement(builder, jsonObject);
        builder.lotNumber(parseString("lotNumber", getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.expirationDate(parseDateTime("expirationDate", getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        stackPop();
        return builder.build();
    }

    private Medication.Ingredient parseMedicationIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Medication.Ingredient.class, jsonObject);
        }
        Medication.Ingredient.Builder builder = Medication.Ingredient.builder();
        parseBackboneElement(builder, jsonObject);
        builder.item(parseChoiceElement("item", jsonObject, CodeableConcept.class, Reference.class));
        builder.isActive(parseBoolean("isActive", getJsonValue(jsonObject, "isActive", JsonValue.class), jsonObject.get("_isActive"), -1));
        builder.strength(parseRatio("strength", getJsonValue(jsonObject, "strength", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationAdministration parseMedicationAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationAdministration.class, jsonObject);
        }
        MedicationAdministration.Builder builder = MedicationAdministration.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesArray = getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates(parseUri("instantiates", instantiatesArray.get(i), getJsonValue(_instantiatesArray, i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((MedicationAdministrationStatus) parseString(MedicationAdministrationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusReasonArray = getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.getJsonObject(i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.context(parseReference("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray supportingInformationArray = getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.getJsonObject(i), i));
            }
        }
        builder.effective(parseChoiceElement("effective", jsonObject, DateTime.class, Period.class));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseMedicationAdministrationPerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        JsonArray deviceArray = getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            for (int i = 0; i < deviceArray.size(); i++) {
                builder.device(parseReference("device", deviceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        builder.dosage(parseMedicationAdministrationDosage("dosage", getJsonValue(jsonObject, "dosage", JsonObject.class), -1));
        JsonArray eventHistoryArray = getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationAdministration.Dosage parseMedicationAdministrationDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationAdministration.Dosage.class, jsonObject);
        }
        MedicationAdministration.Dosage.Builder builder = MedicationAdministration.Dosage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.site(parseCodeableConcept("site", getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.dose((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dose", getJsonValue(jsonObject, "dose", JsonObject.class), -1));
        builder.rate(parseChoiceElement("rate", jsonObject, Ratio.class, SimpleQuantity.class));
        stackPop();
        return builder.build();
    }

    private MedicationAdministration.Performer parseMedicationAdministrationPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationAdministration.Performer.class, jsonObject);
        }
        MedicationAdministration.Performer.Builder builder = MedicationAdministration.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationDispense parseMedicationDispense(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationDispense.class, jsonObject);
        }
        MedicationDispense.Builder builder = MedicationDispense.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((MedicationDispenseStatus) parseString(MedicationDispenseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseChoiceElement("statusReason", jsonObject, CodeableConcept.class, Reference.class));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.context(parseReference("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray supportingInformationArray = getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.getJsonObject(i), i));
            }
        }
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseMedicationDispensePerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray authorizingPrescriptionArray = getJsonArray(jsonObject, "authorizingPrescription");
        if (authorizingPrescriptionArray != null) {
            for (int i = 0; i < authorizingPrescriptionArray.size(); i++) {
                builder.authorizingPrescription(parseReference("authorizingPrescription", authorizingPrescriptionArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.daysSupply((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "daysSupply", getJsonValue(jsonObject, "daysSupply", JsonObject.class), -1));
        builder.whenPrepared(parseDateTime("whenPrepared", getJsonValue(jsonObject, "whenPrepared", JsonString.class), jsonObject.get("_whenPrepared"), -1));
        builder.whenHandedOver(parseDateTime("whenHandedOver", getJsonValue(jsonObject, "whenHandedOver", JsonString.class), jsonObject.get("_whenHandedOver"), -1));
        builder.destination(parseReference("destination", getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        JsonArray receiverArray = getJsonArray(jsonObject, "receiver");
        if (receiverArray != null) {
            for (int i = 0; i < receiverArray.size(); i++) {
                builder.receiver(parseReference("receiver", receiverArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray dosageInstructionArray = getJsonArray(jsonObject, "dosageInstruction");
        if (dosageInstructionArray != null) {
            for (int i = 0; i < dosageInstructionArray.size(); i++) {
                builder.dosageInstruction(parseDosage("dosageInstruction", dosageInstructionArray.getJsonObject(i), i));
            }
        }
        builder.substitution(parseMedicationDispenseSubstitution("substitution", getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        JsonArray detectedIssueArray = getJsonArray(jsonObject, "detectedIssue");
        if (detectedIssueArray != null) {
            for (int i = 0; i < detectedIssueArray.size(); i++) {
                builder.detectedIssue(parseReference("detectedIssue", detectedIssueArray.getJsonObject(i), i));
            }
        }
        JsonArray eventHistoryArray = getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationDispense.Performer parseMedicationDispensePerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationDispense.Performer.class, jsonObject);
        }
        MedicationDispense.Performer.Builder builder = MedicationDispense.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationDispense.Substitution parseMedicationDispenseSubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationDispense.Substitution.class, jsonObject);
        }
        MedicationDispense.Substitution.Builder builder = MedicationDispense.Substitution.builder();
        parseBackboneElement(builder, jsonObject);
        builder.wasSubstituted(parseBoolean("wasSubstituted", getJsonValue(jsonObject, "wasSubstituted", JsonValue.class), jsonObject.get("_wasSubstituted"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray reasonArray = getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseCodeableConcept("reason", reasonArray.getJsonObject(i), i));
            }
        }
        JsonArray responsiblePartyArray = getJsonArray(jsonObject, "responsibleParty");
        if (responsiblePartyArray != null) {
            for (int i = 0; i < responsiblePartyArray.size(); i++) {
                builder.responsibleParty(parseReference("responsibleParty", responsiblePartyArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge parseMedicationKnowledge(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.class, jsonObject);
        }
        MedicationKnowledge.Builder builder = MedicationKnowledge.builder();
        parseDomainResource(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status((MedicationKnowledgeStatus) parseString(MedicationKnowledgeStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.doseForm(parseCodeableConcept("doseForm", getJsonValue(jsonObject, "doseForm", JsonObject.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray synonymArray = getJsonArray(jsonObject, "synonym", true);
        if (synonymArray != null) {
            JsonArray _synonymArray = jsonObject.getJsonArray("_synonym");
            for (int i = 0; i < synonymArray.size(); i++) {
                builder.synonym(parseString("synonym", synonymArray.get(i), getJsonValue(_synonymArray, i), i));
            }
        }
        JsonArray relatedMedicationKnowledgeArray = getJsonArray(jsonObject, "relatedMedicationKnowledge");
        if (relatedMedicationKnowledgeArray != null) {
            for (int i = 0; i < relatedMedicationKnowledgeArray.size(); i++) {
                builder.relatedMedicationKnowledge(parseMedicationKnowledgeRelatedMedicationKnowledge("relatedMedicationKnowledge", relatedMedicationKnowledgeArray.getJsonObject(i), i));
            }
        }
        JsonArray associatedMedicationArray = getJsonArray(jsonObject, "associatedMedication");
        if (associatedMedicationArray != null) {
            for (int i = 0; i < associatedMedicationArray.size(); i++) {
                builder.associatedMedication(parseReference("associatedMedication", associatedMedicationArray.getJsonObject(i), i));
            }
        }
        JsonArray productTypeArray = getJsonArray(jsonObject, "productType");
        if (productTypeArray != null) {
            for (int i = 0; i < productTypeArray.size(); i++) {
                builder.productType(parseCodeableConcept("productType", productTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray monographArray = getJsonArray(jsonObject, "monograph");
        if (monographArray != null) {
            for (int i = 0; i < monographArray.size(); i++) {
                builder.monograph(parseMedicationKnowledgeMonograph("monograph", monographArray.getJsonObject(i), i));
            }
        }
        JsonArray ingredientArray = getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                builder.ingredient(parseMedicationKnowledgeIngredient("ingredient", ingredientArray.getJsonObject(i), i));
            }
        }
        builder.preparationInstruction((Markdown) parseString(Markdown.builder(), "preparationInstruction", getJsonValue(jsonObject, "preparationInstruction", JsonString.class), jsonObject.get("_preparationInstruction"), -1));
        JsonArray intendedRouteArray = getJsonArray(jsonObject, "intendedRoute");
        if (intendedRouteArray != null) {
            for (int i = 0; i < intendedRouteArray.size(); i++) {
                builder.intendedRoute(parseCodeableConcept("intendedRoute", intendedRouteArray.getJsonObject(i), i));
            }
        }
        JsonArray costArray = getJsonArray(jsonObject, "cost");
        if (costArray != null) {
            for (int i = 0; i < costArray.size(); i++) {
                builder.cost(parseMedicationKnowledgeCost("cost", costArray.getJsonObject(i), i));
            }
        }
        JsonArray monitoringProgramArray = getJsonArray(jsonObject, "monitoringProgram");
        if (monitoringProgramArray != null) {
            for (int i = 0; i < monitoringProgramArray.size(); i++) {
                builder.monitoringProgram(parseMedicationKnowledgeMonitoringProgram("monitoringProgram", monitoringProgramArray.getJsonObject(i), i));
            }
        }
        JsonArray administrationGuidelinesArray = getJsonArray(jsonObject, "administrationGuidelines");
        if (administrationGuidelinesArray != null) {
            for (int i = 0; i < administrationGuidelinesArray.size(); i++) {
                builder.administrationGuidelines(parseMedicationKnowledgeAdministrationGuidelines("administrationGuidelines", administrationGuidelinesArray.getJsonObject(i), i));
            }
        }
        JsonArray medicineClassificationArray = getJsonArray(jsonObject, "medicineClassification");
        if (medicineClassificationArray != null) {
            for (int i = 0; i < medicineClassificationArray.size(); i++) {
                builder.medicineClassification(parseMedicationKnowledgeMedicineClassification("medicineClassification", medicineClassificationArray.getJsonObject(i), i));
            }
        }
        builder.packaging(parseMedicationKnowledgePackaging("packaging", getJsonValue(jsonObject, "packaging", JsonObject.class), -1));
        JsonArray drugCharacteristicArray = getJsonArray(jsonObject, "drugCharacteristic");
        if (drugCharacteristicArray != null) {
            for (int i = 0; i < drugCharacteristicArray.size(); i++) {
                builder.drugCharacteristic(parseMedicationKnowledgeDrugCharacteristic("drugCharacteristic", drugCharacteristicArray.getJsonObject(i), i));
            }
        }
        JsonArray contraindicationArray = getJsonArray(jsonObject, "contraindication");
        if (contraindicationArray != null) {
            for (int i = 0; i < contraindicationArray.size(); i++) {
                builder.contraindication(parseReference("contraindication", contraindicationArray.getJsonObject(i), i));
            }
        }
        JsonArray regulatoryArray = getJsonArray(jsonObject, "regulatory");
        if (regulatoryArray != null) {
            for (int i = 0; i < regulatoryArray.size(); i++) {
                builder.regulatory(parseMedicationKnowledgeRegulatory("regulatory", regulatoryArray.getJsonObject(i), i));
            }
        }
        JsonArray kineticsArray = getJsonArray(jsonObject, "kinetics");
        if (kineticsArray != null) {
            for (int i = 0; i < kineticsArray.size(); i++) {
                builder.kinetics(parseMedicationKnowledgeKinetics("kinetics", kineticsArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines parseMedicationKnowledgeAdministrationGuidelines(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.class, jsonObject);
        }
        MedicationKnowledge.AdministrationGuidelines.Builder builder = MedicationKnowledge.AdministrationGuidelines.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray dosageArray = getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                builder.dosage(parseMedicationKnowledgeAdministrationGuidelinesDosage("dosage", dosageArray.getJsonObject(i), i));
            }
        }
        builder.indication(parseChoiceElement("indication", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray patientCharacteristicsArray = getJsonArray(jsonObject, "patientCharacteristics");
        if (patientCharacteristicsArray != null) {
            for (int i = 0; i < patientCharacteristicsArray.size(); i++) {
                builder.patientCharacteristics(parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics("patientCharacteristics", patientCharacteristicsArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines.Dosage parseMedicationKnowledgeAdministrationGuidelinesDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.Dosage.class, jsonObject);
        }
        MedicationKnowledge.AdministrationGuidelines.Dosage.Builder builder = MedicationKnowledge.AdministrationGuidelines.Dosage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray dosageArray = getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                builder.dosage(parseDosage("dosage", dosageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.class, jsonObject);
        }
        MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.Builder builder = MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.builder();
        parseBackboneElement(builder, jsonObject);
        builder.characteristic(parseChoiceElement("characteristic", jsonObject, CodeableConcept.class, SimpleQuantity.class));
        JsonArray valueArray = getJsonArray(jsonObject, "value", true);
        if (valueArray != null) {
            JsonArray _valueArray = jsonObject.getJsonArray("_value");
            for (int i = 0; i < valueArray.size(); i++) {
                builder.value(parseString("value", valueArray.get(i), getJsonValue(_valueArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Cost parseMedicationKnowledgeCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Cost.class, jsonObject);
        }
        MedicationKnowledge.Cost.Builder builder = MedicationKnowledge.Cost.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.source(parseString("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.cost(parseMoney("cost", getJsonValue(jsonObject, "cost", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.DrugCharacteristic parseMedicationKnowledgeDrugCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.DrugCharacteristic.class, jsonObject);
        }
        MedicationKnowledge.DrugCharacteristic.Builder builder = MedicationKnowledge.DrugCharacteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, CodeableConcept.class, String.class, SimpleQuantity.class, Base64Binary.class));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Ingredient parseMedicationKnowledgeIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Ingredient.class, jsonObject);
        }
        MedicationKnowledge.Ingredient.Builder builder = MedicationKnowledge.Ingredient.builder();
        parseBackboneElement(builder, jsonObject);
        builder.item(parseChoiceElement("item", jsonObject, CodeableConcept.class, Reference.class));
        builder.isActive(parseBoolean("isActive", getJsonValue(jsonObject, "isActive", JsonValue.class), jsonObject.get("_isActive"), -1));
        builder.strength(parseRatio("strength", getJsonValue(jsonObject, "strength", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Kinetics parseMedicationKnowledgeKinetics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Kinetics.class, jsonObject);
        }
        MedicationKnowledge.Kinetics.Builder builder = MedicationKnowledge.Kinetics.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray areaUnderCurveArray = getJsonArray(jsonObject, "areaUnderCurve");
        if (areaUnderCurveArray != null) {
            for (int i = 0; i < areaUnderCurveArray.size(); i++) {
                builder.areaUnderCurve((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "areaUnderCurve", areaUnderCurveArray.getJsonObject(i), i));
            }
        }
        JsonArray lethalDose50Array = getJsonArray(jsonObject, "lethalDose50");
        if (lethalDose50Array != null) {
            for (int i = 0; i < lethalDose50Array.size(); i++) {
                builder.lethalDose50((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "lethalDose50", lethalDose50Array.getJsonObject(i), i));
            }
        }
        builder.halfLifePeriod((Duration) parseQuantity(Duration.builder(), "halfLifePeriod", getJsonValue(jsonObject, "halfLifePeriod", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.MedicineClassification parseMedicationKnowledgeMedicineClassification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.MedicineClassification.class, jsonObject);
        }
        MedicationKnowledge.MedicineClassification.Builder builder = MedicationKnowledge.MedicineClassification.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray classificationArray = getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                builder.classification(parseCodeableConcept("classification", classificationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.MonitoringProgram parseMedicationKnowledgeMonitoringProgram(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.MonitoringProgram.class, jsonObject);
        }
        MedicationKnowledge.MonitoringProgram.Builder builder = MedicationKnowledge.MonitoringProgram.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Monograph parseMedicationKnowledgeMonograph(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Monograph.class, jsonObject);
        }
        MedicationKnowledge.Monograph.Builder builder = MedicationKnowledge.Monograph.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Packaging parseMedicationKnowledgePackaging(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Packaging.class, jsonObject);
        }
        MedicationKnowledge.Packaging.Builder builder = MedicationKnowledge.Packaging.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory parseMedicationKnowledgeRegulatory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.class, jsonObject);
        }
        MedicationKnowledge.Regulatory.Builder builder = MedicationKnowledge.Regulatory.builder();
        parseBackboneElement(builder, jsonObject);
        builder.regulatoryAuthority(parseReference("regulatoryAuthority", getJsonValue(jsonObject, "regulatoryAuthority", JsonObject.class), -1));
        JsonArray substitutionArray = getJsonArray(jsonObject, "substitution");
        if (substitutionArray != null) {
            for (int i = 0; i < substitutionArray.size(); i++) {
                builder.substitution(parseMedicationKnowledgeRegulatorySubstitution("substitution", substitutionArray.getJsonObject(i), i));
            }
        }
        JsonArray scheduleArray = getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                builder.schedule(parseMedicationKnowledgeRegulatorySchedule("schedule", scheduleArray.getJsonObject(i), i));
            }
        }
        builder.maxDispense(parseMedicationKnowledgeRegulatoryMaxDispense("maxDispense", getJsonValue(jsonObject, "maxDispense", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.MaxDispense parseMedicationKnowledgeRegulatoryMaxDispense(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.MaxDispense.class, jsonObject);
        }
        MedicationKnowledge.Regulatory.MaxDispense.Builder builder = MedicationKnowledge.Regulatory.MaxDispense.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.period((Duration) parseQuantity(Duration.builder(), "period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.Schedule parseMedicationKnowledgeRegulatorySchedule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.Schedule.class, jsonObject);
        }
        MedicationKnowledge.Regulatory.Schedule.Builder builder = MedicationKnowledge.Regulatory.Schedule.builder();
        parseBackboneElement(builder, jsonObject);
        builder.schedule(parseCodeableConcept("schedule", getJsonValue(jsonObject, "schedule", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.Regulatory.Substitution parseMedicationKnowledgeRegulatorySubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.Regulatory.Substitution.class, jsonObject);
        }
        MedicationKnowledge.Regulatory.Substitution.Builder builder = MedicationKnowledge.Regulatory.Substitution.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.allowed(parseBoolean("allowed", getJsonValue(jsonObject, "allowed", JsonValue.class), jsonObject.get("_allowed"), -1));
        stackPop();
        return builder.build();
    }

    private MedicationKnowledge.RelatedMedicationKnowledge parseMedicationKnowledgeRelatedMedicationKnowledge(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationKnowledge.RelatedMedicationKnowledge.class, jsonObject);
        }
        MedicationKnowledge.RelatedMedicationKnowledge.Builder builder = MedicationKnowledge.RelatedMedicationKnowledge.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray referenceArray = getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            for (int i = 0; i < referenceArray.size(); i++) {
                builder.reference(parseReference("reference", referenceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationRequest parseMedicationRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationRequest.class, jsonObject);
        }
        MedicationRequest.Builder builder = MedicationRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((MedicationRequestStatus) parseString(MedicationRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.intent((MedicationRequestIntent) parseString(MedicationRequestIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.priority((MedicationRequestPriority) parseString(MedicationRequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.reported(parseChoiceElement("reported", jsonObject, Boolean.class, Reference.class));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        JsonArray supportingInformationArray = getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            for (int i = 0; i < supportingInformationArray.size(); i++) {
                builder.supportingInformation(parseReference("supportingInformation", supportingInformationArray.getJsonObject(i), i));
            }
        }
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        builder.recorder(parseReference("recorder", getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.courseOfTherapyType(parseCodeableConcept("courseOfTherapyType", getJsonValue(jsonObject, "courseOfTherapyType", JsonObject.class), -1));
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseReference("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray dosageInstructionArray = getJsonArray(jsonObject, "dosageInstruction");
        if (dosageInstructionArray != null) {
            for (int i = 0; i < dosageInstructionArray.size(); i++) {
                builder.dosageInstruction(parseDosage("dosageInstruction", dosageInstructionArray.getJsonObject(i), i));
            }
        }
        builder.dispenseRequest(parseMedicationRequestDispenseRequest("dispenseRequest", getJsonValue(jsonObject, "dispenseRequest", JsonObject.class), -1));
        builder.substitution(parseMedicationRequestSubstitution("substitution", getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        builder.priorPrescription(parseReference("priorPrescription", getJsonValue(jsonObject, "priorPrescription", JsonObject.class), -1));
        JsonArray detectedIssueArray = getJsonArray(jsonObject, "detectedIssue");
        if (detectedIssueArray != null) {
            for (int i = 0; i < detectedIssueArray.size(); i++) {
                builder.detectedIssue(parseReference("detectedIssue", detectedIssueArray.getJsonObject(i), i));
            }
        }
        JsonArray eventHistoryArray = getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            for (int i = 0; i < eventHistoryArray.size(); i++) {
                builder.eventHistory(parseReference("eventHistory", eventHistoryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicationRequest.DispenseRequest parseMedicationRequestDispenseRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationRequest.DispenseRequest.class, jsonObject);
        }
        MedicationRequest.DispenseRequest.Builder builder = MedicationRequest.DispenseRequest.builder();
        parseBackboneElement(builder, jsonObject);
        builder.initialFill(parseMedicationRequestDispenseRequestInitialFill("initialFill", getJsonValue(jsonObject, "initialFill", JsonObject.class), -1));
        builder.dispenseInterval((Duration) parseQuantity(Duration.builder(), "dispenseInterval", getJsonValue(jsonObject, "dispenseInterval", JsonObject.class), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.numberOfRepeatsAllowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfRepeatsAllowed", getJsonValue(jsonObject, "numberOfRepeatsAllowed", JsonNumber.class), jsonObject.get("_numberOfRepeatsAllowed"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.expectedSupplyDuration((Duration) parseQuantity(Duration.builder(), "expectedSupplyDuration", getJsonValue(jsonObject, "expectedSupplyDuration", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationRequest.DispenseRequest.InitialFill parseMedicationRequestDispenseRequestInitialFill(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationRequest.DispenseRequest.InitialFill.class, jsonObject);
        }
        MedicationRequest.DispenseRequest.InitialFill.Builder builder = MedicationRequest.DispenseRequest.InitialFill.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationRequest.Substitution parseMedicationRequestSubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationRequest.Substitution.class, jsonObject);
        }
        MedicationRequest.Substitution.Builder builder = MedicationRequest.Substitution.builder();
        parseBackboneElement(builder, jsonObject);
        builder.allowed(parseChoiceElement("allowed", jsonObject, Boolean.class, CodeableConcept.class));
        builder.reason(parseCodeableConcept("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicationStatement parseMedicationStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicationStatement.class, jsonObject);
        }
        MedicationStatement.Builder builder = MedicationStatement.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((MedicationStatementStatus) parseString(MedicationStatementStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusReasonArray = getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            for (int i = 0; i < statusReasonArray.size(); i++) {
                builder.statusReason(parseCodeableConcept("statusReason", statusReasonArray.getJsonObject(i), i));
            }
        }
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.context(parseReference("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, DateTime.class, Period.class));
        builder.dateAsserted(parseDateTime("dateAsserted", getJsonValue(jsonObject, "dateAsserted", JsonString.class), jsonObject.get("_dateAsserted"), -1));
        builder.informationSource(parseReference("informationSource", getJsonValue(jsonObject, "informationSource", JsonObject.class), -1));
        JsonArray derivedFromArray = getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray dosageArray = getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            for (int i = 0; i < dosageArray.size(); i++) {
                builder.dosage(parseDosage("dosage", dosageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProduct parseMedicinalProduct(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.class, jsonObject);
        }
        MedicinalProduct.Builder builder = MedicinalProduct.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.domain(parseCoding("domain", getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.combinedPharmaceuticalDoseForm(parseCodeableConcept("combinedPharmaceuticalDoseForm", getJsonValue(jsonObject, "combinedPharmaceuticalDoseForm", JsonObject.class), -1));
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        builder.additionalMonitoringIndicator(parseCodeableConcept("additionalMonitoringIndicator", getJsonValue(jsonObject, "additionalMonitoringIndicator", JsonObject.class), -1));
        JsonArray specialMeasuresArray = getJsonArray(jsonObject, "specialMeasures", true);
        if (specialMeasuresArray != null) {
            JsonArray _specialMeasuresArray = jsonObject.getJsonArray("_specialMeasures");
            for (int i = 0; i < specialMeasuresArray.size(); i++) {
                builder.specialMeasures(parseString("specialMeasures", specialMeasuresArray.get(i), getJsonValue(_specialMeasuresArray, i), i));
            }
        }
        builder.paediatricUseIndicator(parseCodeableConcept("paediatricUseIndicator", getJsonValue(jsonObject, "paediatricUseIndicator", JsonObject.class), -1));
        JsonArray productClassificationArray = getJsonArray(jsonObject, "productClassification");
        if (productClassificationArray != null) {
            for (int i = 0; i < productClassificationArray.size(); i++) {
                builder.productClassification(parseCodeableConcept("productClassification", productClassificationArray.getJsonObject(i), i));
            }
        }
        JsonArray marketingStatusArray = getJsonArray(jsonObject, "marketingStatus");
        if (marketingStatusArray != null) {
            for (int i = 0; i < marketingStatusArray.size(); i++) {
                builder.marketingStatus(parseMarketingStatus("marketingStatus", marketingStatusArray.getJsonObject(i), i));
            }
        }
        JsonArray pharmaceuticalProductArray = getJsonArray(jsonObject, "pharmaceuticalProduct");
        if (pharmaceuticalProductArray != null) {
            for (int i = 0; i < pharmaceuticalProductArray.size(); i++) {
                builder.pharmaceuticalProduct(parseReference("pharmaceuticalProduct", pharmaceuticalProductArray.getJsonObject(i), i));
            }
        }
        JsonArray packagedMedicinalProductArray = getJsonArray(jsonObject, "packagedMedicinalProduct");
        if (packagedMedicinalProductArray != null) {
            for (int i = 0; i < packagedMedicinalProductArray.size(); i++) {
                builder.packagedMedicinalProduct(parseReference("packagedMedicinalProduct", packagedMedicinalProductArray.getJsonObject(i), i));
            }
        }
        JsonArray attachedDocumentArray = getJsonArray(jsonObject, "attachedDocument");
        if (attachedDocumentArray != null) {
            for (int i = 0; i < attachedDocumentArray.size(); i++) {
                builder.attachedDocument(parseReference("attachedDocument", attachedDocumentArray.getJsonObject(i), i));
            }
        }
        JsonArray masterFileArray = getJsonArray(jsonObject, "masterFile");
        if (masterFileArray != null) {
            for (int i = 0; i < masterFileArray.size(); i++) {
                builder.masterFile(parseReference("masterFile", masterFileArray.getJsonObject(i), i));
            }
        }
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseReference("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray clinicalTrialArray = getJsonArray(jsonObject, "clinicalTrial");
        if (clinicalTrialArray != null) {
            for (int i = 0; i < clinicalTrialArray.size(); i++) {
                builder.clinicalTrial(parseReference("clinicalTrial", clinicalTrialArray.getJsonObject(i), i));
            }
        }
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseMedicinalProductName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray crossReferenceArray = getJsonArray(jsonObject, "crossReference");
        if (crossReferenceArray != null) {
            for (int i = 0; i < crossReferenceArray.size(); i++) {
                builder.crossReference(parseIdentifier("crossReference", crossReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray manufacturingBusinessOperationArray = getJsonArray(jsonObject, "manufacturingBusinessOperation");
        if (manufacturingBusinessOperationArray != null) {
            for (int i = 0; i < manufacturingBusinessOperationArray.size(); i++) {
                builder.manufacturingBusinessOperation(parseMedicinalProductManufacturingBusinessOperation("manufacturingBusinessOperation", manufacturingBusinessOperationArray.getJsonObject(i), i));
            }
        }
        JsonArray specialDesignationArray = getJsonArray(jsonObject, "specialDesignation");
        if (specialDesignationArray != null) {
            for (int i = 0; i < specialDesignationArray.size(); i++) {
                builder.specialDesignation(parseMedicinalProductSpecialDesignation("specialDesignation", specialDesignationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProduct.ManufacturingBusinessOperation parseMedicinalProductManufacturingBusinessOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.ManufacturingBusinessOperation.class, jsonObject);
        }
        MedicinalProduct.ManufacturingBusinessOperation.Builder builder = MedicinalProduct.ManufacturingBusinessOperation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operationType(parseCodeableConcept("operationType", getJsonValue(jsonObject, "operationType", JsonObject.class), -1));
        builder.authorisationReferenceNumber(parseIdentifier("authorisationReferenceNumber", getJsonValue(jsonObject, "authorisationReferenceNumber", JsonObject.class), -1));
        builder.effectiveDate(parseDateTime("effectiveDate", getJsonValue(jsonObject, "effectiveDate", JsonString.class), jsonObject.get("_effectiveDate"), -1));
        builder.confidentialityIndicator(parseCodeableConcept("confidentialityIndicator", getJsonValue(jsonObject, "confidentialityIndicator", JsonObject.class), -1));
        JsonArray manufacturerArray = getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.getJsonObject(i), i));
            }
        }
        builder.regulator(parseReference("regulator", getJsonValue(jsonObject, "regulator", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProduct.Name parseMedicinalProductName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.Name.class, jsonObject);
        }
        MedicinalProduct.Name.Builder builder = MedicinalProduct.Name.builder();
        parseBackboneElement(builder, jsonObject);
        builder.productName(parseString("productName", getJsonValue(jsonObject, "productName", JsonString.class), jsonObject.get("_productName"), -1));
        JsonArray namePartArray = getJsonArray(jsonObject, "namePart");
        if (namePartArray != null) {
            for (int i = 0; i < namePartArray.size(); i++) {
                builder.namePart(parseMedicinalProductNameNamePart("namePart", namePartArray.getJsonObject(i), i));
            }
        }
        JsonArray countryLanguageArray = getJsonArray(jsonObject, "countryLanguage");
        if (countryLanguageArray != null) {
            for (int i = 0; i < countryLanguageArray.size(); i++) {
                builder.countryLanguage(parseMedicinalProductNameCountryLanguage("countryLanguage", countryLanguageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProduct.Name.CountryLanguage parseMedicinalProductNameCountryLanguage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.Name.CountryLanguage.class, jsonObject);
        }
        MedicinalProduct.Name.CountryLanguage.Builder builder = MedicinalProduct.Name.CountryLanguage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.country(parseCodeableConcept("country", getJsonValue(jsonObject, "country", JsonObject.class), -1));
        builder.jurisdiction(parseCodeableConcept("jurisdiction", getJsonValue(jsonObject, "jurisdiction", JsonObject.class), -1));
        builder.language(parseCodeableConcept("language", getJsonValue(jsonObject, "language", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProduct.Name.NamePart parseMedicinalProductNameNamePart(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.Name.NamePart.class, jsonObject);
        }
        MedicinalProduct.Name.NamePart.Builder builder = MedicinalProduct.Name.NamePart.builder();
        parseBackboneElement(builder, jsonObject);
        builder.part(parseString("part", getJsonValue(jsonObject, "part", JsonString.class), jsonObject.get("_part"), -1));
        builder.type(parseCoding("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProduct.SpecialDesignation parseMedicinalProductSpecialDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProduct.SpecialDesignation.class, jsonObject);
        }
        MedicinalProduct.SpecialDesignation.Builder builder = MedicinalProduct.SpecialDesignation.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.intendedUse(parseCodeableConcept("intendedUse", getJsonValue(jsonObject, "intendedUse", JsonObject.class), -1));
        builder.indication(parseChoiceElement("indication", jsonObject, CodeableConcept.class, Reference.class));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.species(parseCodeableConcept("species", getJsonValue(jsonObject, "species", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductAuthorization parseMedicinalProductAuthorization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductAuthorization.class, jsonObject);
        }
        MedicinalProductAuthorization.Builder builder = MedicinalProductAuthorization.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray countryArray = getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            for (int i = 0; i < countryArray.size(); i++) {
                builder.country(parseCodeableConcept("country", countryArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.restoreDate(parseDateTime("restoreDate", getJsonValue(jsonObject, "restoreDate", JsonString.class), jsonObject.get("_restoreDate"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.dataExclusivityPeriod(parsePeriod("dataExclusivityPeriod", getJsonValue(jsonObject, "dataExclusivityPeriod", JsonObject.class), -1));
        builder.dateOfFirstAuthorization(parseDateTime("dateOfFirstAuthorization", getJsonValue(jsonObject, "dateOfFirstAuthorization", JsonString.class), jsonObject.get("_dateOfFirstAuthorization"), -1));
        builder.internationalBirthDate(parseDateTime("internationalBirthDate", getJsonValue(jsonObject, "internationalBirthDate", JsonString.class), jsonObject.get("_internationalBirthDate"), -1));
        builder.legalBasis(parseCodeableConcept("legalBasis", getJsonValue(jsonObject, "legalBasis", JsonObject.class), -1));
        JsonArray jurisdictionalAuthorizationArray = getJsonArray(jsonObject, "jurisdictionalAuthorization");
        if (jurisdictionalAuthorizationArray != null) {
            for (int i = 0; i < jurisdictionalAuthorizationArray.size(); i++) {
                builder.jurisdictionalAuthorization(parseMedicinalProductAuthorizationJurisdictionalAuthorization("jurisdictionalAuthorization", jurisdictionalAuthorizationArray.getJsonObject(i), i));
            }
        }
        builder.holder(parseReference("holder", getJsonValue(jsonObject, "holder", JsonObject.class), -1));
        builder.regulator(parseReference("regulator", getJsonValue(jsonObject, "regulator", JsonObject.class), -1));
        builder.procedure(parseMedicinalProductAuthorizationProcedure("procedure", getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductAuthorization.JurisdictionalAuthorization parseMedicinalProductAuthorizationJurisdictionalAuthorization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductAuthorization.JurisdictionalAuthorization.class, jsonObject);
        }
        MedicinalProductAuthorization.JurisdictionalAuthorization.Builder builder = MedicinalProductAuthorization.JurisdictionalAuthorization.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.country(parseCodeableConcept("country", getJsonValue(jsonObject, "country", JsonObject.class), -1));
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductAuthorization.Procedure parseMedicinalProductAuthorizationProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductAuthorization.Procedure.class, jsonObject);
        }
        MedicinalProductAuthorization.Procedure.Builder builder = MedicinalProductAuthorization.Procedure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.date(parseChoiceElement("date", jsonObject, Period.class, DateTime.class));
        JsonArray applicationArray = getJsonArray(jsonObject, "application");
        if (applicationArray != null) {
            for (int i = 0; i < applicationArray.size(); i++) {
                builder.application(parseMedicinalProductAuthorizationProcedure("application", applicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductContraindication parseMedicinalProductContraindication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductContraindication.class, jsonObject);
        }
        MedicinalProductContraindication.Builder builder = MedicinalProductContraindication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.disease(parseCodeableConcept("disease", getJsonValue(jsonObject, "disease", JsonObject.class), -1));
        builder.diseaseStatus(parseCodeableConcept("diseaseStatus", getJsonValue(jsonObject, "diseaseStatus", JsonObject.class), -1));
        JsonArray comorbidityArray = getJsonArray(jsonObject, "comorbidity");
        if (comorbidityArray != null) {
            for (int i = 0; i < comorbidityArray.size(); i++) {
                builder.comorbidity(parseCodeableConcept("comorbidity", comorbidityArray.getJsonObject(i), i));
            }
        }
        JsonArray therapeuticIndicationArray = getJsonArray(jsonObject, "therapeuticIndication");
        if (therapeuticIndicationArray != null) {
            for (int i = 0; i < therapeuticIndicationArray.size(); i++) {
                builder.therapeuticIndication(parseReference("therapeuticIndication", therapeuticIndicationArray.getJsonObject(i), i));
            }
        }
        JsonArray otherTherapyArray = getJsonArray(jsonObject, "otherTherapy");
        if (otherTherapyArray != null) {
            for (int i = 0; i < otherTherapyArray.size(); i++) {
                builder.otherTherapy(parseMedicinalProductContraindicationOtherTherapy("otherTherapy", otherTherapyArray.getJsonObject(i), i));
            }
        }
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parsePopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductContraindication.OtherTherapy parseMedicinalProductContraindicationOtherTherapy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductContraindication.OtherTherapy.class, jsonObject);
        }
        MedicinalProductContraindication.OtherTherapy.Builder builder = MedicinalProductContraindication.OtherTherapy.builder();
        parseBackboneElement(builder, jsonObject);
        builder.therapyRelationshipType(parseCodeableConcept("therapyRelationshipType", getJsonValue(jsonObject, "therapyRelationshipType", JsonObject.class), -1));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private MedicinalProductIndication parseMedicinalProductIndication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIndication.class, jsonObject);
        }
        MedicinalProductIndication.Builder builder = MedicinalProductIndication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.diseaseSymptomProcedure(parseCodeableConcept("diseaseSymptomProcedure", getJsonValue(jsonObject, "diseaseSymptomProcedure", JsonObject.class), -1));
        builder.diseaseStatus(parseCodeableConcept("diseaseStatus", getJsonValue(jsonObject, "diseaseStatus", JsonObject.class), -1));
        JsonArray comorbidityArray = getJsonArray(jsonObject, "comorbidity");
        if (comorbidityArray != null) {
            for (int i = 0; i < comorbidityArray.size(); i++) {
                builder.comorbidity(parseCodeableConcept("comorbidity", comorbidityArray.getJsonObject(i), i));
            }
        }
        builder.intendedEffect(parseCodeableConcept("intendedEffect", getJsonValue(jsonObject, "intendedEffect", JsonObject.class), -1));
        builder.duration(parseQuantity("duration", getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        JsonArray otherTherapyArray = getJsonArray(jsonObject, "otherTherapy");
        if (otherTherapyArray != null) {
            for (int i = 0; i < otherTherapyArray.size(); i++) {
                builder.otherTherapy(parseMedicinalProductIndicationOtherTherapy("otherTherapy", otherTherapyArray.getJsonObject(i), i));
            }
        }
        JsonArray undesirableEffectArray = getJsonArray(jsonObject, "undesirableEffect");
        if (undesirableEffectArray != null) {
            for (int i = 0; i < undesirableEffectArray.size(); i++) {
                builder.undesirableEffect(parseReference("undesirableEffect", undesirableEffectArray.getJsonObject(i), i));
            }
        }
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parsePopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductIndication.OtherTherapy parseMedicinalProductIndicationOtherTherapy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIndication.OtherTherapy.class, jsonObject);
        }
        MedicinalProductIndication.OtherTherapy.Builder builder = MedicinalProductIndication.OtherTherapy.builder();
        parseBackboneElement(builder, jsonObject);
        builder.therapyRelationshipType(parseCodeableConcept("therapyRelationshipType", getJsonValue(jsonObject, "therapyRelationshipType", JsonObject.class), -1));
        builder.medication(parseChoiceElement("medication", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private MedicinalProductIngredient parseMedicinalProductIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIngredient.class, jsonObject);
        }
        MedicinalProductIngredient.Builder builder = MedicinalProductIngredient.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", getJsonValue(jsonObject, "allergenicIndicator", JsonValue.class), jsonObject.get("_allergenicIndicator"), -1));
        JsonArray manufacturerArray = getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.getJsonObject(i), i));
            }
        }
        JsonArray specifiedSubstanceArray = getJsonArray(jsonObject, "specifiedSubstance");
        if (specifiedSubstanceArray != null) {
            for (int i = 0; i < specifiedSubstanceArray.size(); i++) {
                builder.specifiedSubstance(parseMedicinalProductIngredientSpecifiedSubstance("specifiedSubstance", specifiedSubstanceArray.getJsonObject(i), i));
            }
        }
        builder.substance(parseMedicinalProductIngredientSubstance("substance", getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductIngredient.SpecifiedSubstance parseMedicinalProductIngredientSpecifiedSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIngredient.SpecifiedSubstance.class, jsonObject);
        }
        MedicinalProductIngredient.SpecifiedSubstance.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.group(parseCodeableConcept("group", getJsonValue(jsonObject, "group", JsonObject.class), -1));
        builder.confidentiality(parseCodeableConcept("confidentiality", getJsonValue(jsonObject, "confidentiality", JsonObject.class), -1));
        JsonArray strengthArray = getJsonArray(jsonObject, "strength");
        if (strengthArray != null) {
            for (int i = 0; i < strengthArray.size(); i++) {
                builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", strengthArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductIngredient.SpecifiedSubstance.Strength parseMedicinalProductIngredientSpecifiedSubstanceStrength(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIngredient.SpecifiedSubstance.Strength.class, jsonObject);
        }
        MedicinalProductIngredient.SpecifiedSubstance.Strength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.builder();
        parseBackboneElement(builder, jsonObject);
        builder.presentation(parseRatio("presentation", getJsonValue(jsonObject, "presentation", JsonObject.class), -1));
        builder.presentationLowLimit(parseRatio("presentationLowLimit", getJsonValue(jsonObject, "presentationLowLimit", JsonObject.class), -1));
        builder.concentration(parseRatio("concentration", getJsonValue(jsonObject, "concentration", JsonObject.class), -1));
        builder.concentrationLowLimit(parseRatio("concentrationLowLimit", getJsonValue(jsonObject, "concentrationLowLimit", JsonObject.class), -1));
        builder.measurementPoint(parseString("measurementPoint", getJsonValue(jsonObject, "measurementPoint", JsonString.class), jsonObject.get("_measurementPoint"), -1));
        JsonArray countryArray = getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            for (int i = 0; i < countryArray.size(); i++) {
                builder.country(parseCodeableConcept("country", countryArray.getJsonObject(i), i));
            }
        }
        JsonArray referenceStrengthArray = getJsonArray(jsonObject, "referenceStrength");
        if (referenceStrengthArray != null) {
            for (int i = 0; i < referenceStrengthArray.size(); i++) {
                builder.referenceStrength(parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength("referenceStrength", referenceStrengthArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.class, jsonObject);
        }
        MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.builder();
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseCodeableConcept("substance", getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        builder.strength(parseRatio("strength", getJsonValue(jsonObject, "strength", JsonObject.class), -1));
        builder.strengthLowLimit(parseRatio("strengthLowLimit", getJsonValue(jsonObject, "strengthLowLimit", JsonObject.class), -1));
        builder.measurementPoint(parseString("measurementPoint", getJsonValue(jsonObject, "measurementPoint", JsonString.class), jsonObject.get("_measurementPoint"), -1));
        JsonArray countryArray = getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            for (int i = 0; i < countryArray.size(); i++) {
                builder.country(parseCodeableConcept("country", countryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductIngredient.Substance parseMedicinalProductIngredientSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductIngredient.Substance.class, jsonObject);
        }
        MedicinalProductIngredient.Substance.Builder builder = MedicinalProductIngredient.Substance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray strengthArray = getJsonArray(jsonObject, "strength");
        if (strengthArray != null) {
            for (int i = 0; i < strengthArray.size(); i++) {
                builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", strengthArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductInteraction parseMedicinalProductInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductInteraction.class, jsonObject);
        }
        MedicinalProductInteraction.Builder builder = MedicinalProductInteraction.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray interactantArray = getJsonArray(jsonObject, "interactant");
        if (interactantArray != null) {
            for (int i = 0; i < interactantArray.size(); i++) {
                builder.interactant(parseMedicinalProductInteractionInteractant("interactant", interactantArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.effect(parseCodeableConcept("effect", getJsonValue(jsonObject, "effect", JsonObject.class), -1));
        builder.incidence(parseCodeableConcept("incidence", getJsonValue(jsonObject, "incidence", JsonObject.class), -1));
        builder.management(parseCodeableConcept("management", getJsonValue(jsonObject, "management", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductInteraction.Interactant parseMedicinalProductInteractionInteractant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductInteraction.Interactant.class, jsonObject);
        }
        MedicinalProductInteraction.Interactant.Builder builder = MedicinalProductInteraction.Interactant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.item(parseChoiceElement("item", jsonObject, Reference.class, CodeableConcept.class));
        stackPop();
        return builder.build();
    }

    private MedicinalProductManufactured parseMedicinalProductManufactured(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductManufactured.class, jsonObject);
        }
        MedicinalProductManufactured.Builder builder = MedicinalProductManufactured.builder();
        parseDomainResource(builder, jsonObject);
        builder.manufacturedDoseForm(parseCodeableConcept("manufacturedDoseForm", getJsonValue(jsonObject, "manufacturedDoseForm", JsonObject.class), -1));
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", getJsonValue(jsonObject, "unitOfPresentation", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray manufacturerArray = getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.getJsonObject(i), i));
            }
        }
        JsonArray ingredientArray = getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                builder.ingredient(parseReference("ingredient", ingredientArray.getJsonObject(i), i));
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray otherCharacteristicsArray = getJsonArray(jsonObject, "otherCharacteristics");
        if (otherCharacteristicsArray != null) {
            for (int i = 0; i < otherCharacteristicsArray.size(); i++) {
                builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", otherCharacteristicsArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPackaged parseMedicinalProductPackaged(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPackaged.class, jsonObject);
        }
        MedicinalProductPackaged.Builder builder = MedicinalProductPackaged.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        JsonArray marketingStatusArray = getJsonArray(jsonObject, "marketingStatus");
        if (marketingStatusArray != null) {
            for (int i = 0; i < marketingStatusArray.size(); i++) {
                builder.marketingStatus(parseMarketingStatus("marketingStatus", marketingStatusArray.getJsonObject(i), i));
            }
        }
        builder.marketingAuthorization(parseReference("marketingAuthorization", getJsonValue(jsonObject, "marketingAuthorization", JsonObject.class), -1));
        JsonArray manufacturerArray = getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.getJsonObject(i), i));
            }
        }
        JsonArray batchIdentifierArray = getJsonArray(jsonObject, "batchIdentifier");
        if (batchIdentifierArray != null) {
            for (int i = 0; i < batchIdentifierArray.size(); i++) {
                builder.batchIdentifier(parseMedicinalProductPackagedBatchIdentifier("batchIdentifier", batchIdentifierArray.getJsonObject(i), i));
            }
        }
        JsonArray packageItemArray = getJsonArray(jsonObject, "packageItem");
        if (packageItemArray != null) {
            for (int i = 0; i < packageItemArray.size(); i++) {
                builder.packageItem(parseMedicinalProductPackagedPackageItem("packageItem", packageItemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPackaged.BatchIdentifier parseMedicinalProductPackagedBatchIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPackaged.BatchIdentifier.class, jsonObject);
        }
        MedicinalProductPackaged.BatchIdentifier.Builder builder = MedicinalProductPackaged.BatchIdentifier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.outerPackaging(parseIdentifier("outerPackaging", getJsonValue(jsonObject, "outerPackaging", JsonObject.class), -1));
        builder.immediatePackaging(parseIdentifier("immediatePackaging", getJsonValue(jsonObject, "immediatePackaging", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductPackaged.PackageItem parseMedicinalProductPackagedPackageItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPackaged.PackageItem.class, jsonObject);
        }
        MedicinalProductPackaged.PackageItem.Builder builder = MedicinalProductPackaged.PackageItem.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray materialArray = getJsonArray(jsonObject, "material");
        if (materialArray != null) {
            for (int i = 0; i < materialArray.size(); i++) {
                builder.material(parseCodeableConcept("material", materialArray.getJsonObject(i), i));
            }
        }
        JsonArray alternateMaterialArray = getJsonArray(jsonObject, "alternateMaterial");
        if (alternateMaterialArray != null) {
            for (int i = 0; i < alternateMaterialArray.size(); i++) {
                builder.alternateMaterial(parseCodeableConcept("alternateMaterial", alternateMaterialArray.getJsonObject(i), i));
            }
        }
        JsonArray deviceArray = getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            for (int i = 0; i < deviceArray.size(); i++) {
                builder.device(parseReference("device", deviceArray.getJsonObject(i), i));
            }
        }
        JsonArray manufacturedItemArray = getJsonArray(jsonObject, "manufacturedItem");
        if (manufacturedItemArray != null) {
            for (int i = 0; i < manufacturedItemArray.size(); i++) {
                builder.manufacturedItem(parseReference("manufacturedItem", manufacturedItemArray.getJsonObject(i), i));
            }
        }
        JsonArray packageItemArray = getJsonArray(jsonObject, "packageItem");
        if (packageItemArray != null) {
            for (int i = 0; i < packageItemArray.size(); i++) {
                builder.packageItem(parseMedicinalProductPackagedPackageItem("packageItem", packageItemArray.getJsonObject(i), i));
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray otherCharacteristicsArray = getJsonArray(jsonObject, "otherCharacteristics");
        if (otherCharacteristicsArray != null) {
            for (int i = 0; i < otherCharacteristicsArray.size(); i++) {
                builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", otherCharacteristicsArray.getJsonObject(i), i));
            }
        }
        JsonArray shelfLifeStorageArray = getJsonArray(jsonObject, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            for (int i = 0; i < shelfLifeStorageArray.size(); i++) {
                builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", shelfLifeStorageArray.getJsonObject(i), i));
            }
        }
        JsonArray manufacturerArray = getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            for (int i = 0; i < manufacturerArray.size(); i++) {
                builder.manufacturer(parseReference("manufacturer", manufacturerArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPharmaceutical parseMedicinalProductPharmaceutical(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPharmaceutical.class, jsonObject);
        }
        MedicinalProductPharmaceutical.Builder builder = MedicinalProductPharmaceutical.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.administrableDoseForm(parseCodeableConcept("administrableDoseForm", getJsonValue(jsonObject, "administrableDoseForm", JsonObject.class), -1));
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", getJsonValue(jsonObject, "unitOfPresentation", JsonObject.class), -1));
        JsonArray ingredientArray = getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                builder.ingredient(parseReference("ingredient", ingredientArray.getJsonObject(i), i));
            }
        }
        JsonArray deviceArray = getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            for (int i = 0; i < deviceArray.size(); i++) {
                builder.device(parseReference("device", deviceArray.getJsonObject(i), i));
            }
        }
        JsonArray characteristicsArray = getJsonArray(jsonObject, "characteristics");
        if (characteristicsArray != null) {
            for (int i = 0; i < characteristicsArray.size(); i++) {
                builder.characteristics(parseMedicinalProductPharmaceuticalCharacteristics("characteristics", characteristicsArray.getJsonObject(i), i));
            }
        }
        JsonArray routeOfAdministrationArray = getJsonArray(jsonObject, "routeOfAdministration");
        if (routeOfAdministrationArray != null) {
            for (int i = 0; i < routeOfAdministrationArray.size(); i++) {
                builder.routeOfAdministration(parseMedicinalProductPharmaceuticalRouteOfAdministration("routeOfAdministration", routeOfAdministrationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPharmaceutical.Characteristics parseMedicinalProductPharmaceuticalCharacteristics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPharmaceutical.Characteristics.class, jsonObject);
        }
        MedicinalProductPharmaceutical.Characteristics.Builder builder = MedicinalProductPharmaceutical.Characteristics.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration parseMedicinalProductPharmaceuticalRouteOfAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPharmaceutical.RouteOfAdministration.class, jsonObject);
        }
        MedicinalProductPharmaceutical.RouteOfAdministration.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.firstDose(parseQuantity("firstDose", getJsonValue(jsonObject, "firstDose", JsonObject.class), -1));
        builder.maxSingleDose(parseQuantity("maxSingleDose", getJsonValue(jsonObject, "maxSingleDose", JsonObject.class), -1));
        builder.maxDosePerDay(parseQuantity("maxDosePerDay", getJsonValue(jsonObject, "maxDosePerDay", JsonObject.class), -1));
        builder.maxDosePerTreatmentPeriod(parseRatio("maxDosePerTreatmentPeriod", getJsonValue(jsonObject, "maxDosePerTreatmentPeriod", JsonObject.class), -1));
        builder.maxTreatmentPeriod((Duration) parseQuantity(Duration.builder(), "maxTreatmentPeriod", getJsonValue(jsonObject, "maxTreatmentPeriod", JsonObject.class), -1));
        JsonArray targetSpeciesArray = getJsonArray(jsonObject, "targetSpecies");
        if (targetSpeciesArray != null) {
            for (int i = 0; i < targetSpeciesArray.size(); i++) {
                builder.targetSpecies(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies("targetSpecies", targetSpeciesArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.class, jsonObject);
        }
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray withdrawalPeriodArray = getJsonArray(jsonObject, "withdrawalPeriod");
        if (withdrawalPeriodArray != null) {
            for (int i = 0; i < withdrawalPeriodArray.size(); i++) {
                builder.withdrawalPeriod(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod("withdrawalPeriod", withdrawalPeriodArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.class, jsonObject);
        }
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.builder();
        parseBackboneElement(builder, jsonObject);
        builder.tissue(parseCodeableConcept("tissue", getJsonValue(jsonObject, "tissue", JsonObject.class), -1));
        builder.value(parseQuantity("value", getJsonValue(jsonObject, "value", JsonObject.class), -1));
        builder.supportingInformation(parseString("supportingInformation", getJsonValue(jsonObject, "supportingInformation", JsonString.class), jsonObject.get("_supportingInformation"), -1));
        stackPop();
        return builder.build();
    }

    private MedicinalProductUndesirableEffect parseMedicinalProductUndesirableEffect(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MedicinalProductUndesirableEffect.class, jsonObject);
        }
        MedicinalProductUndesirableEffect.Builder builder = MedicinalProductUndesirableEffect.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            for (int i = 0; i < subjectArray.size(); i++) {
                builder.subject(parseReference("subject", subjectArray.getJsonObject(i), i));
            }
        }
        builder.symptomConditionEffect(parseCodeableConcept("symptomConditionEffect", getJsonValue(jsonObject, "symptomConditionEffect", JsonObject.class), -1));
        builder.classification(parseCodeableConcept("classification", getJsonValue(jsonObject, "classification", JsonObject.class), -1));
        builder.frequencyOfOccurrence(parseCodeableConcept("frequencyOfOccurrence", getJsonValue(jsonObject, "frequencyOfOccurrence", JsonObject.class), -1));
        JsonArray populationArray = getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            for (int i = 0; i < populationArray.size(); i++) {
                builder.population(parsePopulation("population", populationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MessageDefinition parseMessageDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageDefinition.class, jsonObject);
        }
        MessageDefinition.Builder builder = MessageDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces", true);
        if (replacesArray != null) {
            JsonArray _replacesArray = jsonObject.getJsonArray("_replaces");
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", replacesArray.get(i), getJsonValue(_replacesArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1));
        JsonArray parentArray = getJsonArray(jsonObject, "parent", true);
        if (parentArray != null) {
            JsonArray _parentArray = jsonObject.getJsonArray("_parent");
            for (int i = 0; i < parentArray.size(); i++) {
                builder.parent((Canonical) parseUri(Canonical.builder(), "parent", parentArray.get(i), getJsonValue(_parentArray, i), i));
            }
        }
        builder.event(parseChoiceElement("event", jsonObject, Coding.class, Uri.class));
        builder.category((MessageSignificanceCategory) parseString(MessageSignificanceCategory.builder(), "category", getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1));
        JsonArray focusArray = getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                builder.focus(parseMessageDefinitionFocus("focus", focusArray.getJsonObject(i), i));
            }
        }
        builder.responseRequired((MessageHeaderResponseRequest) parseString(MessageHeaderResponseRequest.builder(), "responseRequired", getJsonValue(jsonObject, "responseRequired", JsonString.class), jsonObject.get("_responseRequired"), -1));
        JsonArray allowedResponseArray = getJsonArray(jsonObject, "allowedResponse");
        if (allowedResponseArray != null) {
            for (int i = 0; i < allowedResponseArray.size(); i++) {
                builder.allowedResponse(parseMessageDefinitionAllowedResponse("allowedResponse", allowedResponseArray.getJsonObject(i), i));
            }
        }
        JsonArray graphArray = getJsonArray(jsonObject, "graph", true);
        if (graphArray != null) {
            JsonArray _graphArray = jsonObject.getJsonArray("_graph");
            for (int i = 0; i < graphArray.size(); i++) {
                builder.graph((Canonical) parseUri(Canonical.builder(), "graph", graphArray.get(i), getJsonValue(_graphArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MessageDefinition.AllowedResponse parseMessageDefinitionAllowedResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageDefinition.AllowedResponse.class, jsonObject);
        }
        MessageDefinition.AllowedResponse.Builder builder = MessageDefinition.AllowedResponse.builder();
        parseBackboneElement(builder, jsonObject);
        builder.message((Canonical) parseUri(Canonical.builder(), "message", getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1));
        builder.situation((Markdown) parseString(Markdown.builder(), "situation", getJsonValue(jsonObject, "situation", JsonString.class), jsonObject.get("_situation"), -1));
        stackPop();
        return builder.build();
    }

    private MessageDefinition.Focus parseMessageDefinitionFocus(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageDefinition.Focus.class, jsonObject);
        }
        MessageDefinition.Focus.Builder builder = MessageDefinition.Focus.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((ResourceType) parseString(ResourceType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader parseMessageHeader(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageHeader.class, jsonObject);
        }
        MessageHeader.Builder builder = MessageHeader.builder();
        parseDomainResource(builder, jsonObject);
        builder.event(parseChoiceElement("event", jsonObject, Coding.class, Uri.class));
        JsonArray destinationArray = getJsonArray(jsonObject, "destination");
        if (destinationArray != null) {
            for (int i = 0; i < destinationArray.size(); i++) {
                builder.destination(parseMessageHeaderDestination("destination", destinationArray.getJsonObject(i), i));
            }
        }
        builder.sender(parseReference("sender", getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        builder.enterer(parseReference("enterer", getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.source(parseMessageHeaderSource("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.responsible(parseReference("responsible", getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.reason(parseCodeableConcept("reason", getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.response(parseMessageHeaderResponse("response", getJsonValue(jsonObject, "response", JsonObject.class), -1));
        JsonArray focusArray = getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                builder.focus(parseReference("focus", focusArray.getJsonObject(i), i));
            }
        }
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Destination parseMessageHeaderDestination(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageHeader.Destination.class, jsonObject);
        }
        MessageHeader.Destination.Builder builder = MessageHeader.Destination.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.target(parseReference("target", getJsonValue(jsonObject, "target", JsonObject.class), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1));
        builder.receiver(parseReference("receiver", getJsonValue(jsonObject, "receiver", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Response parseMessageHeaderResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageHeader.Response.class, jsonObject);
        }
        MessageHeader.Response.Builder builder = MessageHeader.Response.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier((Id) parseString(Id.builder(), "identifier", getJsonValue(jsonObject, "identifier", JsonString.class), jsonObject.get("_identifier"), -1));
        builder.code((ResponseType) parseString(ResponseType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.details(parseReference("details", getJsonValue(jsonObject, "details", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MessageHeader.Source parseMessageHeaderSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MessageHeader.Source.class, jsonObject);
        }
        MessageHeader.Source.Builder builder = MessageHeader.Source.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.software(parseString("software", getJsonValue(jsonObject, "software", JsonString.class), jsonObject.get("_software"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.contact(parseContactPoint("contact", getJsonValue(jsonObject, "contact", JsonObject.class), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1));
        stackPop();
        return builder.build();
    }

    private Meta parseMeta(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Meta.class, jsonObject);
        }
        Meta.Builder builder = Meta.builder();
        parseElement(builder, jsonObject);
        builder.versionId((Id) parseString(Id.builder(), "versionId", getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1));
        builder.lastUpdated(parseInstant("lastUpdated", getJsonValue(jsonObject, "lastUpdated", JsonString.class), jsonObject.get("_lastUpdated"), -1));
        builder.source(parseUri("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        JsonArray profileArray = getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", profileArray.get(i), getJsonValue(_profileArray, i), i));
            }
        }
        JsonArray securityArray = getJsonArray(jsonObject, "security");
        if (securityArray != null) {
            for (int i = 0; i < securityArray.size(); i++) {
                builder.security(parseCoding("security", securityArray.getJsonObject(i), i));
            }
        }
        JsonArray tagArray = getJsonArray(jsonObject, "tag");
        if (tagArray != null) {
            for (int i = 0; i < tagArray.size(); i++) {
                builder.tag(parseCoding("tag", tagArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence parseMolecularSequence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.class, jsonObject);
        }
        MolecularSequence.Builder builder = MolecularSequence.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.type((SequenceType) parseString(SequenceType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.coordinateSystem(parseInteger("coordinateSystem", getJsonValue(jsonObject, "coordinateSystem", JsonNumber.class), jsonObject.get("_coordinateSystem"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.specimen(parseReference("specimen", getJsonValue(jsonObject, "specimen", JsonObject.class), -1));
        builder.device(parseReference("device", getJsonValue(jsonObject, "device", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.referenceSeq(parseMolecularSequenceReferenceSeq("referenceSeq", getJsonValue(jsonObject, "referenceSeq", JsonObject.class), -1));
        JsonArray variantArray = getJsonArray(jsonObject, "variant");
        if (variantArray != null) {
            for (int i = 0; i < variantArray.size(); i++) {
                builder.variant(parseMolecularSequenceVariant("variant", variantArray.getJsonObject(i), i));
            }
        }
        builder.observedSeq(parseString("observedSeq", getJsonValue(jsonObject, "observedSeq", JsonString.class), jsonObject.get("_observedSeq"), -1));
        JsonArray qualityArray = getJsonArray(jsonObject, "quality");
        if (qualityArray != null) {
            for (int i = 0; i < qualityArray.size(); i++) {
                builder.quality(parseMolecularSequenceQuality("quality", qualityArray.getJsonObject(i), i));
            }
        }
        builder.readCoverage(parseInteger("readCoverage", getJsonValue(jsonObject, "readCoverage", JsonNumber.class), jsonObject.get("_readCoverage"), -1));
        JsonArray repositoryArray = getJsonArray(jsonObject, "repository");
        if (repositoryArray != null) {
            for (int i = 0; i < repositoryArray.size(); i++) {
                builder.repository(parseMolecularSequenceRepository("repository", repositoryArray.getJsonObject(i), i));
            }
        }
        JsonArray pointerArray = getJsonArray(jsonObject, "pointer");
        if (pointerArray != null) {
            for (int i = 0; i < pointerArray.size(); i++) {
                builder.pointer(parseReference("pointer", pointerArray.getJsonObject(i), i));
            }
        }
        JsonArray structureVariantArray = getJsonArray(jsonObject, "structureVariant");
        if (structureVariantArray != null) {
            for (int i = 0; i < structureVariantArray.size(); i++) {
                builder.structureVariant(parseMolecularSequenceStructureVariant("structureVariant", structureVariantArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Quality parseMolecularSequenceQuality(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.Quality.class, jsonObject);
        }
        MolecularSequence.Quality.Builder builder = MolecularSequence.Quality.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((QualityType) parseString(QualityType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.standardSequence(parseCodeableConcept("standardSequence", getJsonValue(jsonObject, "standardSequence", JsonObject.class), -1));
        builder.start(parseInteger("start", getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        builder.score(parseQuantity("score", getJsonValue(jsonObject, "score", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.truthTP(parseDecimal("truthTP", getJsonValue(jsonObject, "truthTP", JsonNumber.class), jsonObject.get("_truthTP"), -1));
        builder.queryTP(parseDecimal("queryTP", getJsonValue(jsonObject, "queryTP", JsonNumber.class), jsonObject.get("_queryTP"), -1));
        builder.truthFN(parseDecimal("truthFN", getJsonValue(jsonObject, "truthFN", JsonNumber.class), jsonObject.get("_truthFN"), -1));
        builder.queryFP(parseDecimal("queryFP", getJsonValue(jsonObject, "queryFP", JsonNumber.class), jsonObject.get("_queryFP"), -1));
        builder.gtFP(parseDecimal("gtFP", getJsonValue(jsonObject, "gtFP", JsonNumber.class), jsonObject.get("_gtFP"), -1));
        builder.precision(parseDecimal("precision", getJsonValue(jsonObject, "precision", JsonNumber.class), jsonObject.get("_precision"), -1));
        builder.recall(parseDecimal("recall", getJsonValue(jsonObject, "recall", JsonNumber.class), jsonObject.get("_recall"), -1));
        builder.fScore(parseDecimal("fScore", getJsonValue(jsonObject, "fScore", JsonNumber.class), jsonObject.get("_fScore"), -1));
        builder.roc(parseMolecularSequenceQualityRoc("roc", getJsonValue(jsonObject, "roc", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Quality.Roc parseMolecularSequenceQualityRoc(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.Quality.Roc.class, jsonObject);
        }
        MolecularSequence.Quality.Roc.Builder builder = MolecularSequence.Quality.Roc.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray scoreArray = getJsonArray(jsonObject, "score", true);
        if (scoreArray != null) {
            JsonArray _scoreArray = jsonObject.getJsonArray("_score");
            for (int i = 0; i < scoreArray.size(); i++) {
                builder.score(parseInteger("score", scoreArray.get(i), getJsonValue(_scoreArray, i), i));
            }
        }
        JsonArray numTPArray = getJsonArray(jsonObject, "numTP", true);
        if (numTPArray != null) {
            JsonArray _numTPArray = jsonObject.getJsonArray("_numTP");
            for (int i = 0; i < numTPArray.size(); i++) {
                builder.numTP(parseInteger("numTP", numTPArray.get(i), getJsonValue(_numTPArray, i), i));
            }
        }
        JsonArray numFPArray = getJsonArray(jsonObject, "numFP", true);
        if (numFPArray != null) {
            JsonArray _numFPArray = jsonObject.getJsonArray("_numFP");
            for (int i = 0; i < numFPArray.size(); i++) {
                builder.numFP(parseInteger("numFP", numFPArray.get(i), getJsonValue(_numFPArray, i), i));
            }
        }
        JsonArray numFNArray = getJsonArray(jsonObject, "numFN", true);
        if (numFNArray != null) {
            JsonArray _numFNArray = jsonObject.getJsonArray("_numFN");
            for (int i = 0; i < numFNArray.size(); i++) {
                builder.numFN(parseInteger("numFN", numFNArray.get(i), getJsonValue(_numFNArray, i), i));
            }
        }
        JsonArray precisionArray = getJsonArray(jsonObject, "precision", true);
        if (precisionArray != null) {
            JsonArray _precisionArray = jsonObject.getJsonArray("_precision");
            for (int i = 0; i < precisionArray.size(); i++) {
                builder.precision(parseDecimal("precision", precisionArray.get(i), getJsonValue(_precisionArray, i), i));
            }
        }
        JsonArray sensitivityArray = getJsonArray(jsonObject, "sensitivity", true);
        if (sensitivityArray != null) {
            JsonArray _sensitivityArray = jsonObject.getJsonArray("_sensitivity");
            for (int i = 0; i < sensitivityArray.size(); i++) {
                builder.sensitivity(parseDecimal("sensitivity", sensitivityArray.get(i), getJsonValue(_sensitivityArray, i), i));
            }
        }
        JsonArray fMeasureArray = getJsonArray(jsonObject, "fMeasure", true);
        if (fMeasureArray != null) {
            JsonArray _fMeasureArray = jsonObject.getJsonArray("_fMeasure");
            for (int i = 0; i < fMeasureArray.size(); i++) {
                builder.fMeasure(parseDecimal("fMeasure", fMeasureArray.get(i), getJsonValue(_fMeasureArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private MolecularSequence.ReferenceSeq parseMolecularSequenceReferenceSeq(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.ReferenceSeq.class, jsonObject);
        }
        MolecularSequence.ReferenceSeq.Builder builder = MolecularSequence.ReferenceSeq.builder();
        parseBackboneElement(builder, jsonObject);
        builder.chromosome(parseCodeableConcept("chromosome", getJsonValue(jsonObject, "chromosome", JsonObject.class), -1));
        builder.genomeBuild(parseString("genomeBuild", getJsonValue(jsonObject, "genomeBuild", JsonString.class), jsonObject.get("_genomeBuild"), -1));
        builder.orientation((OrientationType) parseString(OrientationType.builder(), "orientation", getJsonValue(jsonObject, "orientation", JsonString.class), jsonObject.get("_orientation"), -1));
        builder.referenceSeqId(parseCodeableConcept("referenceSeqId", getJsonValue(jsonObject, "referenceSeqId", JsonObject.class), -1));
        builder.referenceSeqPointer(parseReference("referenceSeqPointer", getJsonValue(jsonObject, "referenceSeqPointer", JsonObject.class), -1));
        builder.referenceSeqString(parseString("referenceSeqString", getJsonValue(jsonObject, "referenceSeqString", JsonString.class), jsonObject.get("_referenceSeqString"), -1));
        builder.strand((StrandType) parseString(StrandType.builder(), "strand", getJsonValue(jsonObject, "strand", JsonString.class), jsonObject.get("_strand"), -1));
        builder.windowStart(parseInteger("windowStart", getJsonValue(jsonObject, "windowStart", JsonNumber.class), jsonObject.get("_windowStart"), -1));
        builder.windowEnd(parseInteger("windowEnd", getJsonValue(jsonObject, "windowEnd", JsonNumber.class), jsonObject.get("_windowEnd"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Repository parseMolecularSequenceRepository(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.Repository.class, jsonObject);
        }
        MolecularSequence.Repository.Builder builder = MolecularSequence.Repository.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((RepositoryType) parseString(RepositoryType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.datasetId(parseString("datasetId", getJsonValue(jsonObject, "datasetId", JsonString.class), jsonObject.get("_datasetId"), -1));
        builder.variantsetId(parseString("variantsetId", getJsonValue(jsonObject, "variantsetId", JsonString.class), jsonObject.get("_variantsetId"), -1));
        builder.readsetId(parseString("readsetId", getJsonValue(jsonObject, "readsetId", JsonString.class), jsonObject.get("_readsetId"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant parseMolecularSequenceStructureVariant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.class, jsonObject);
        }
        MolecularSequence.StructureVariant.Builder builder = MolecularSequence.StructureVariant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.variantType(parseCodeableConcept("variantType", getJsonValue(jsonObject, "variantType", JsonObject.class), -1));
        builder.exact(parseBoolean("exact", getJsonValue(jsonObject, "exact", JsonValue.class), jsonObject.get("_exact"), -1));
        builder.length(parseInteger("length", getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.outer(parseMolecularSequenceStructureVariantOuter("outer", getJsonValue(jsonObject, "outer", JsonObject.class), -1));
        builder.inner(parseMolecularSequenceStructureVariantInner("inner", getJsonValue(jsonObject, "inner", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant.Inner parseMolecularSequenceStructureVariantInner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.Inner.class, jsonObject);
        }
        MolecularSequence.StructureVariant.Inner.Builder builder = MolecularSequence.StructureVariant.Inner.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.StructureVariant.Outer parseMolecularSequenceStructureVariantOuter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.StructureVariant.Outer.class, jsonObject);
        }
        MolecularSequence.StructureVariant.Outer.Builder builder = MolecularSequence.StructureVariant.Outer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private MolecularSequence.Variant parseMolecularSequenceVariant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(MolecularSequence.Variant.class, jsonObject);
        }
        MolecularSequence.Variant.Builder builder = MolecularSequence.Variant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        builder.observedAllele(parseString("observedAllele", getJsonValue(jsonObject, "observedAllele", JsonString.class), jsonObject.get("_observedAllele"), -1));
        builder.referenceAllele(parseString("referenceAllele", getJsonValue(jsonObject, "referenceAllele", JsonString.class), jsonObject.get("_referenceAllele"), -1));
        builder.cigar(parseString("cigar", getJsonValue(jsonObject, "cigar", JsonString.class), jsonObject.get("_cigar"), -1));
        builder.variantPointer(parseReference("variantPointer", getJsonValue(jsonObject, "variantPointer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Money parseMoney(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Money.class, jsonObject);
        }
        Money.Builder builder = Money.builder();
        parseElement(builder, jsonObject);
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.currency((Code) parseString(Code.builder(), "currency", getJsonValue(jsonObject, "currency", JsonString.class), jsonObject.get("_currency"), -1));
        stackPop();
        return builder.build();
    }

    private NamingSystem parseNamingSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NamingSystem.class, jsonObject);
        }
        NamingSystem.Builder builder = NamingSystem.builder();
        parseDomainResource(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.kind((NamingSystemType) parseString(NamingSystemType.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.responsible(parseString("responsible", getJsonValue(jsonObject, "responsible", JsonString.class), jsonObject.get("_responsible"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        JsonArray uniqueIdArray = getJsonArray(jsonObject, "uniqueId");
        if (uniqueIdArray != null) {
            for (int i = 0; i < uniqueIdArray.size(); i++) {
                builder.uniqueId(parseNamingSystemUniqueId("uniqueId", uniqueIdArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NamingSystem.UniqueId parseNamingSystemUniqueId(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NamingSystem.UniqueId.class, jsonObject);
        }
        NamingSystem.UniqueId.Builder builder = NamingSystem.UniqueId.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((NamingSystemIdentifierType) parseString(NamingSystemIdentifierType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.preferred(parseBoolean("preferred", getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Narrative parseNarrative(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Narrative.class, jsonObject);
        }
        Narrative.Builder builder = Narrative.builder();
        parseElement(builder, jsonObject);
        builder.status((NarrativeStatus) parseString(NarrativeStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.div(parseXhtml("div", getJsonValue(jsonObject, "div", JsonString.class), jsonObject.get("_div"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder parseNutritionOrder(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.class, jsonObject);
        }
        NutritionOrder.Builder builder = NutritionOrder.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray instantiatesArray = getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (int i = 0; i < instantiatesArray.size(); i++) {
                builder.instantiates(parseUri("instantiates", instantiatesArray.get(i), getJsonValue(_instantiatesArray, i), i));
            }
        }
        builder.status((NutritionOrderStatus) parseString(NutritionOrderStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.intent((NutritionOrderIntent) parseString(NutritionOrderIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.dateTime(parseDateTime("dateTime", getJsonValue(jsonObject, "dateTime", JsonString.class), jsonObject.get("_dateTime"), -1));
        builder.orderer(parseReference("orderer", getJsonValue(jsonObject, "orderer", JsonObject.class), -1));
        JsonArray allergyIntoleranceArray = getJsonArray(jsonObject, "allergyIntolerance");
        if (allergyIntoleranceArray != null) {
            for (int i = 0; i < allergyIntoleranceArray.size(); i++) {
                builder.allergyIntolerance(parseReference("allergyIntolerance", allergyIntoleranceArray.getJsonObject(i), i));
            }
        }
        JsonArray foodPreferenceModifierArray = getJsonArray(jsonObject, "foodPreferenceModifier");
        if (foodPreferenceModifierArray != null) {
            for (int i = 0; i < foodPreferenceModifierArray.size(); i++) {
                builder.foodPreferenceModifier(parseCodeableConcept("foodPreferenceModifier", foodPreferenceModifierArray.getJsonObject(i), i));
            }
        }
        JsonArray excludeFoodModifierArray = getJsonArray(jsonObject, "excludeFoodModifier");
        if (excludeFoodModifierArray != null) {
            for (int i = 0; i < excludeFoodModifierArray.size(); i++) {
                builder.excludeFoodModifier(parseCodeableConcept("excludeFoodModifier", excludeFoodModifierArray.getJsonObject(i), i));
            }
        }
        builder.oralDiet(parseNutritionOrderOralDiet("oralDiet", getJsonValue(jsonObject, "oralDiet", JsonObject.class), -1));
        JsonArray supplementArray = getJsonArray(jsonObject, "supplement");
        if (supplementArray != null) {
            for (int i = 0; i < supplementArray.size(); i++) {
                builder.supplement(parseNutritionOrderSupplement("supplement", supplementArray.getJsonObject(i), i));
            }
        }
        builder.enteralFormula(parseNutritionOrderEnteralFormula("enteralFormula", getJsonValue(jsonObject, "enteralFormula", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private NutritionOrder.EnteralFormula parseNutritionOrderEnteralFormula(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.EnteralFormula.class, jsonObject);
        }
        NutritionOrder.EnteralFormula.Builder builder = NutritionOrder.EnteralFormula.builder();
        parseBackboneElement(builder, jsonObject);
        builder.baseFormulaType(parseCodeableConcept("baseFormulaType", getJsonValue(jsonObject, "baseFormulaType", JsonObject.class), -1));
        builder.baseFormulaProductName(parseString("baseFormulaProductName", getJsonValue(jsonObject, "baseFormulaProductName", JsonString.class), jsonObject.get("_baseFormulaProductName"), -1));
        builder.additiveType(parseCodeableConcept("additiveType", getJsonValue(jsonObject, "additiveType", JsonObject.class), -1));
        builder.additiveProductName(parseString("additiveProductName", getJsonValue(jsonObject, "additiveProductName", JsonString.class), jsonObject.get("_additiveProductName"), -1));
        builder.caloricDensity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "caloricDensity", getJsonValue(jsonObject, "caloricDensity", JsonObject.class), -1));
        builder.routeofAdministration(parseCodeableConcept("routeofAdministration", getJsonValue(jsonObject, "routeofAdministration", JsonObject.class), -1));
        JsonArray administrationArray = getJsonArray(jsonObject, "administration");
        if (administrationArray != null) {
            for (int i = 0; i < administrationArray.size(); i++) {
                builder.administration(parseNutritionOrderEnteralFormulaAdministration("administration", administrationArray.getJsonObject(i), i));
            }
        }
        builder.maxVolumeToDeliver((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxVolumeToDeliver", getJsonValue(jsonObject, "maxVolumeToDeliver", JsonObject.class), -1));
        builder.administrationInstruction(parseString("administrationInstruction", getJsonValue(jsonObject, "administrationInstruction", JsonString.class), jsonObject.get("_administrationInstruction"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.EnteralFormula.Administration parseNutritionOrderEnteralFormulaAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.EnteralFormula.Administration.class, jsonObject);
        }
        NutritionOrder.EnteralFormula.Administration.Builder builder = NutritionOrder.EnteralFormula.Administration.builder();
        parseBackboneElement(builder, jsonObject);
        builder.schedule(parseTiming("schedule", getJsonValue(jsonObject, "schedule", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.rate(parseChoiceElement("rate", jsonObject, SimpleQuantity.class, Ratio.class));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet parseNutritionOrderOralDiet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.class, jsonObject);
        }
        NutritionOrder.OralDiet.Builder builder = NutritionOrder.OralDiet.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray scheduleArray = getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                builder.schedule(parseTiming("schedule", scheduleArray.getJsonObject(i), i));
            }
        }
        JsonArray nutrientArray = getJsonArray(jsonObject, "nutrient");
        if (nutrientArray != null) {
            for (int i = 0; i < nutrientArray.size(); i++) {
                builder.nutrient(parseNutritionOrderOralDietNutrient("nutrient", nutrientArray.getJsonObject(i), i));
            }
        }
        JsonArray textureArray = getJsonArray(jsonObject, "texture");
        if (textureArray != null) {
            for (int i = 0; i < textureArray.size(); i++) {
                builder.texture(parseNutritionOrderOralDietTexture("texture", textureArray.getJsonObject(i), i));
            }
        }
        JsonArray fluidConsistencyTypeArray = getJsonArray(jsonObject, "fluidConsistencyType");
        if (fluidConsistencyTypeArray != null) {
            for (int i = 0; i < fluidConsistencyTypeArray.size(); i++) {
                builder.fluidConsistencyType(parseCodeableConcept("fluidConsistencyType", fluidConsistencyTypeArray.getJsonObject(i), i));
            }
        }
        builder.instruction(parseString("instruction", getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet.Nutrient parseNutritionOrderOralDietNutrient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.Nutrient.class, jsonObject);
        }
        NutritionOrder.OralDiet.Nutrient.Builder builder = NutritionOrder.OralDiet.Nutrient.builder();
        parseBackboneElement(builder, jsonObject);
        builder.modifier(parseCodeableConcept("modifier", getJsonValue(jsonObject, "modifier", JsonObject.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.OralDiet.Texture parseNutritionOrderOralDietTexture(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.OralDiet.Texture.class, jsonObject);
        }
        NutritionOrder.OralDiet.Texture.Builder builder = NutritionOrder.OralDiet.Texture.builder();
        parseBackboneElement(builder, jsonObject);
        builder.modifier(parseCodeableConcept("modifier", getJsonValue(jsonObject, "modifier", JsonObject.class), -1));
        builder.foodType(parseCodeableConcept("foodType", getJsonValue(jsonObject, "foodType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private NutritionOrder.Supplement parseNutritionOrderSupplement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(NutritionOrder.Supplement.class, jsonObject);
        }
        NutritionOrder.Supplement.Builder builder = NutritionOrder.Supplement.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.productName(parseString("productName", getJsonValue(jsonObject, "productName", JsonString.class), jsonObject.get("_productName"), -1));
        JsonArray scheduleArray = getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            for (int i = 0; i < scheduleArray.size(); i++) {
                builder.schedule(parseTiming("schedule", scheduleArray.getJsonObject(i), i));
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.instruction(parseString("instruction", getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private Observation parseObservation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Observation.class, jsonObject);
        }
        Observation.Builder builder = Observation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((ObservationStatus) parseString(ObservationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray focusArray = getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                builder.focus(parseReference("focus", focusArray.getJsonObject(i), i));
            }
        }
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, DateTime.class, Period.class, Timing.class, Instant.class));
        builder.issued(parseInstant("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseReference("performer", performerArray.getJsonObject(i), i));
            }
        }
        builder.value(parseChoiceElement("value", jsonObject, Quantity.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Range.class, Ratio.class, SampledData.class, Time.class, DateTime.class, Period.class));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        JsonArray interpretationArray = getJsonArray(jsonObject, "interpretation");
        if (interpretationArray != null) {
            for (int i = 0; i < interpretationArray.size(); i++) {
                builder.interpretation(parseCodeableConcept("interpretation", interpretationArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.specimen(parseReference("specimen", getJsonValue(jsonObject, "specimen", JsonObject.class), -1));
        builder.device(parseReference("device", getJsonValue(jsonObject, "device", JsonObject.class), -1));
        JsonArray referenceRangeArray = getJsonArray(jsonObject, "referenceRange");
        if (referenceRangeArray != null) {
            for (int i = 0; i < referenceRangeArray.size(); i++) {
                builder.referenceRange(parseObservationReferenceRange("referenceRange", referenceRangeArray.getJsonObject(i), i));
            }
        }
        JsonArray hasMemberArray = getJsonArray(jsonObject, "hasMember");
        if (hasMemberArray != null) {
            for (int i = 0; i < hasMemberArray.size(); i++) {
                builder.hasMember(parseReference("hasMember", hasMemberArray.getJsonObject(i), i));
            }
        }
        JsonArray derivedFromArray = getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom(parseReference("derivedFrom", derivedFromArray.getJsonObject(i), i));
            }
        }
        JsonArray componentArray = getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                builder.component(parseObservationComponent("component", componentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Observation.Component parseObservationComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Observation.Component.class, jsonObject);
        }
        Observation.Component.Builder builder = Observation.Component.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, Quantity.class, CodeableConcept.class, String.class, Boolean.class, Integer.class, Range.class, Ratio.class, SampledData.class, Time.class, DateTime.class, Period.class));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        JsonArray interpretationArray = getJsonArray(jsonObject, "interpretation");
        if (interpretationArray != null) {
            for (int i = 0; i < interpretationArray.size(); i++) {
                builder.interpretation(parseCodeableConcept("interpretation", interpretationArray.getJsonObject(i), i));
            }
        }
        JsonArray referenceRangeArray = getJsonArray(jsonObject, "referenceRange");
        if (referenceRangeArray != null) {
            for (int i = 0; i < referenceRangeArray.size(); i++) {
                builder.referenceRange(parseObservationReferenceRange("referenceRange", referenceRangeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Observation.ReferenceRange parseObservationReferenceRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Observation.ReferenceRange.class, jsonObject);
        }
        Observation.ReferenceRange.Builder builder = Observation.ReferenceRange.builder();
        parseBackboneElement(builder, jsonObject);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", getJsonValue(jsonObject, "low", JsonObject.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", getJsonValue(jsonObject, "high", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray appliesToArray = getJsonArray(jsonObject, "appliesTo");
        if (appliesToArray != null) {
            for (int i = 0; i < appliesToArray.size(); i++) {
                builder.appliesTo(parseCodeableConcept("appliesTo", appliesToArray.getJsonObject(i), i));
            }
        }
        builder.age(parseRange("age", getJsonValue(jsonObject, "age", JsonObject.class), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition parseObservationDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ObservationDefinition.class, jsonObject);
        }
        ObservationDefinition.Builder builder = ObservationDefinition.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray permittedDataTypeArray = getJsonArray(jsonObject, "permittedDataType", true);
        if (permittedDataTypeArray != null) {
            JsonArray _permittedDataTypeArray = jsonObject.getJsonArray("_permittedDataType");
            for (int i = 0; i < permittedDataTypeArray.size(); i++) {
                builder.permittedDataType((ObservationDataType) parseString(ObservationDataType.builder(), "permittedDataType", permittedDataTypeArray.get(i), getJsonValue(_permittedDataTypeArray, i), i));
            }
        }
        builder.multipleResultsAllowed(parseBoolean("multipleResultsAllowed", getJsonValue(jsonObject, "multipleResultsAllowed", JsonValue.class), jsonObject.get("_multipleResultsAllowed"), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.preferredReportName(parseString("preferredReportName", getJsonValue(jsonObject, "preferredReportName", JsonString.class), jsonObject.get("_preferredReportName"), -1));
        builder.quantitativeDetails(parseObservationDefinitionQuantitativeDetails("quantitativeDetails", getJsonValue(jsonObject, "quantitativeDetails", JsonObject.class), -1));
        JsonArray qualifiedIntervalArray = getJsonArray(jsonObject, "qualifiedInterval");
        if (qualifiedIntervalArray != null) {
            for (int i = 0; i < qualifiedIntervalArray.size(); i++) {
                builder.qualifiedInterval(parseObservationDefinitionQualifiedInterval("qualifiedInterval", qualifiedIntervalArray.getJsonObject(i), i));
            }
        }
        builder.validCodedValueSet(parseReference("validCodedValueSet", getJsonValue(jsonObject, "validCodedValueSet", JsonObject.class), -1));
        builder.normalCodedValueSet(parseReference("normalCodedValueSet", getJsonValue(jsonObject, "normalCodedValueSet", JsonObject.class), -1));
        builder.abnormalCodedValueSet(parseReference("abnormalCodedValueSet", getJsonValue(jsonObject, "abnormalCodedValueSet", JsonObject.class), -1));
        builder.criticalCodedValueSet(parseReference("criticalCodedValueSet", getJsonValue(jsonObject, "criticalCodedValueSet", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition.QualifiedInterval parseObservationDefinitionQualifiedInterval(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ObservationDefinition.QualifiedInterval.class, jsonObject);
        }
        ObservationDefinition.QualifiedInterval.Builder builder = ObservationDefinition.QualifiedInterval.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category((ObservationRangeCategory) parseString(ObservationRangeCategory.builder(), "category", getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1));
        builder.range(parseRange("range", getJsonValue(jsonObject, "range", JsonObject.class), -1));
        builder.context(parseCodeableConcept("context", getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray appliesToArray = getJsonArray(jsonObject, "appliesTo");
        if (appliesToArray != null) {
            for (int i = 0; i < appliesToArray.size(); i++) {
                builder.appliesTo(parseCodeableConcept("appliesTo", appliesToArray.getJsonObject(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.age(parseRange("age", getJsonValue(jsonObject, "age", JsonObject.class), -1));
        builder.gestationalAge(parseRange("gestationalAge", getJsonValue(jsonObject, "gestationalAge", JsonObject.class), -1));
        builder.condition(parseString("condition", getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        stackPop();
        return builder.build();
    }

    private ObservationDefinition.QuantitativeDetails parseObservationDefinitionQuantitativeDetails(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ObservationDefinition.QuantitativeDetails.class, jsonObject);
        }
        ObservationDefinition.QuantitativeDetails.Builder builder = ObservationDefinition.QuantitativeDetails.builder();
        parseBackboneElement(builder, jsonObject);
        builder.customaryUnit(parseCodeableConcept("customaryUnit", getJsonValue(jsonObject, "customaryUnit", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.conversionFactor(parseDecimal("conversionFactor", getJsonValue(jsonObject, "conversionFactor", JsonNumber.class), jsonObject.get("_conversionFactor"), -1));
        builder.decimalPrecision(parseInteger("decimalPrecision", getJsonValue(jsonObject, "decimalPrecision", JsonNumber.class), jsonObject.get("_decimalPrecision"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition parseOperationDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationDefinition.class, jsonObject);
        }
        OperationDefinition.Builder builder = OperationDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.kind((OperationKind) parseString(OperationKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.affectsState(parseBoolean("affectsState", getJsonValue(jsonObject, "affectsState", JsonValue.class), jsonObject.get("_affectsState"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1));
        JsonArray resourceArray = getJsonArray(jsonObject, "resource", true);
        if (resourceArray != null) {
            JsonArray _resourceArray = jsonObject.getJsonArray("_resource");
            for (int i = 0; i < resourceArray.size(); i++) {
                builder.resource((ResourceType) parseString(ResourceType.builder(), "resource", resourceArray.get(i), getJsonValue(_resourceArray, i), i));
            }
        }
        builder.system(parseBoolean("system", getJsonValue(jsonObject, "system", JsonValue.class), jsonObject.get("_system"), -1));
        builder.type(parseBoolean("type", getJsonValue(jsonObject, "type", JsonValue.class), jsonObject.get("_type"), -1));
        builder.instance(parseBoolean("instance", getJsonValue(jsonObject, "instance", JsonValue.class), jsonObject.get("_instance"), -1));
        builder.inputProfile((Canonical) parseUri(Canonical.builder(), "inputProfile", getJsonValue(jsonObject, "inputProfile", JsonString.class), jsonObject.get("_inputProfile"), -1));
        builder.outputProfile((Canonical) parseUri(Canonical.builder(), "outputProfile", getJsonValue(jsonObject, "outputProfile", JsonString.class), jsonObject.get("_outputProfile"), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseOperationDefinitionParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        JsonArray overloadArray = getJsonArray(jsonObject, "overload");
        if (overloadArray != null) {
            for (int i = 0; i < overloadArray.size(); i++) {
                builder.overload(parseOperationDefinitionOverload("overload", overloadArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Overload parseOperationDefinitionOverload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationDefinition.Overload.class, jsonObject);
        }
        OperationDefinition.Overload.Builder builder = OperationDefinition.Overload.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray parameterNameArray = getJsonArray(jsonObject, "parameterName", true);
        if (parameterNameArray != null) {
            JsonArray _parameterNameArray = jsonObject.getJsonArray("_parameterName");
            for (int i = 0; i < parameterNameArray.size(); i++) {
                builder.parameterName(parseString("parameterName", parameterNameArray.get(i), getJsonValue(_parameterNameArray, i), i));
            }
        }
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter parseOperationDefinitionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.class, jsonObject);
        }
        OperationDefinition.Parameter.Builder builder = OperationDefinition.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Code) parseString(Code.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.use((OperationParameterUse) parseString(OperationParameterUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.min(parseInteger("min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray targetProfileArray = getJsonArray(jsonObject, "targetProfile", true);
        if (targetProfileArray != null) {
            JsonArray _targetProfileArray = jsonObject.getJsonArray("_targetProfile");
            for (int i = 0; i < targetProfileArray.size(); i++) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", targetProfileArray.get(i), getJsonValue(_targetProfileArray, i), i));
            }
        }
        builder.searchType((SearchParamType) parseString(SearchParamType.builder(), "searchType", getJsonValue(jsonObject, "searchType", JsonString.class), jsonObject.get("_searchType"), -1));
        builder.binding(parseOperationDefinitionParameterBinding("binding", getJsonValue(jsonObject, "binding", JsonObject.class), -1));
        JsonArray referencedFromArray = getJsonArray(jsonObject, "referencedFrom");
        if (referencedFromArray != null) {
            for (int i = 0; i < referencedFromArray.size(); i++) {
                builder.referencedFrom(parseOperationDefinitionParameterReferencedFrom("referencedFrom", referencedFromArray.getJsonObject(i), i));
            }
        }
        JsonArray partArray = getJsonArray(jsonObject, "part");
        if (partArray != null) {
            for (int i = 0; i < partArray.size(); i++) {
                builder.part(parseOperationDefinitionParameter("part", partArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter.Binding parseOperationDefinitionParameterBinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.Binding.class, jsonObject);
        }
        OperationDefinition.Parameter.Binding.Builder builder = OperationDefinition.Parameter.Binding.builder();
        parseBackboneElement(builder, jsonObject);
        builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", getJsonValue(jsonObject, "strength", JsonString.class), jsonObject.get("_strength"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        stackPop();
        return builder.build();
    }

    private OperationDefinition.Parameter.ReferencedFrom parseOperationDefinitionParameterReferencedFrom(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationDefinition.Parameter.ReferencedFrom.class, jsonObject);
        }
        OperationDefinition.Parameter.ReferencedFrom.Builder builder = OperationDefinition.Parameter.ReferencedFrom.builder();
        parseBackboneElement(builder, jsonObject);
        builder.source(parseString("source", getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.sourceId(parseString("sourceId", getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    private OperationOutcome parseOperationOutcome(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationOutcome.class, jsonObject);
        }
        OperationOutcome.Builder builder = OperationOutcome.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray issueArray = getJsonArray(jsonObject, "issue");
        if (issueArray != null) {
            for (int i = 0; i < issueArray.size(); i++) {
                builder.issue(parseOperationOutcomeIssue("issue", issueArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private OperationOutcome.Issue parseOperationOutcomeIssue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OperationOutcome.Issue.class, jsonObject);
        }
        OperationOutcome.Issue.Builder builder = OperationOutcome.Issue.builder();
        parseBackboneElement(builder, jsonObject);
        builder.severity((IssueSeverity) parseString(IssueSeverity.builder(), "severity", getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.code((IssueType) parseString(IssueType.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.details(parseCodeableConcept("details", getJsonValue(jsonObject, "details", JsonObject.class), -1));
        builder.diagnostics(parseString("diagnostics", getJsonValue(jsonObject, "diagnostics", JsonString.class), jsonObject.get("_diagnostics"), -1));
        JsonArray locationArray = getJsonArray(jsonObject, "location", true);
        if (locationArray != null) {
            JsonArray _locationArray = jsonObject.getJsonArray("_location");
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseString("location", locationArray.get(i), getJsonValue(_locationArray, i), i));
            }
        }
        JsonArray expressionArray = getJsonArray(jsonObject, "expression", true);
        if (expressionArray != null) {
            JsonArray _expressionArray = jsonObject.getJsonArray("_expression");
            for (int i = 0; i < expressionArray.size(); i++) {
                builder.expression(parseString("expression", expressionArray.get(i), getJsonValue(_expressionArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Organization parseOrganization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Organization.class, jsonObject);
        }
        Organization.Builder builder = Organization.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (int i = 0; i < aliasArray.size(); i++) {
                builder.alias(parseString("alias", aliasArray.get(i), getJsonValue(_aliasArray, i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray addressArray = getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                builder.address(parseAddress("address", addressArray.getJsonObject(i), i));
            }
        }
        builder.partOf(parseReference("partOf", getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseOrganizationContact("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Organization.Contact parseOrganizationContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Organization.Contact.class, jsonObject);
        }
        Organization.Contact.Builder builder = Organization.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        builder.purpose(parseCodeableConcept("purpose", getJsonValue(jsonObject, "purpose", JsonObject.class), -1));
        builder.name(parseHumanName("name", getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonValue(jsonObject, "address", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private OrganizationAffiliation parseOrganizationAffiliation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(OrganizationAffiliation.class, jsonObject);
        }
        OrganizationAffiliation.Builder builder = OrganizationAffiliation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.organization(parseReference("organization", getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.participatingOrganization(parseReference("participatingOrganization", getJsonValue(jsonObject, "participatingOrganization", JsonObject.class), -1));
        JsonArray networkArray = getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            for (int i = 0; i < networkArray.size(); i++) {
                builder.network(parseReference("network", networkArray.getJsonObject(i), i));
            }
        }
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        JsonArray locationArray = getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseReference("location", locationArray.getJsonObject(i), i));
            }
        }
        JsonArray healthcareServiceArray = getJsonArray(jsonObject, "healthcareService");
        if (healthcareServiceArray != null) {
            for (int i = 0; i < healthcareServiceArray.size(); i++) {
                builder.healthcareService(parseReference("healthcareService", healthcareServiceArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ParameterDefinition parseParameterDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ParameterDefinition.class, jsonObject);
        }
        ParameterDefinition.Builder builder = ParameterDefinition.builder();
        parseElement(builder, jsonObject);
        builder.name((Code) parseString(Code.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.use((ParameterUse) parseString(ParameterUse.builder(), "use", getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.min(parseInteger("min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    private Parameters parseParameters(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Parameters.class, jsonObject);
        }
        Parameters.Builder builder = Parameters.builder();
        parseResource(builder, jsonObject);
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseParametersParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Parameters.Parameter parseParametersParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Parameters.Parameter.class, jsonObject);
        }
        Parameters.Parameter.Builder builder = Parameters.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.value(parseChoiceElement("value", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.resource(parseResource("resource", getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        JsonArray partArray = getJsonArray(jsonObject, "part");
        if (partArray != null) {
            for (int i = 0; i < partArray.size(); i++) {
                builder.part(parseParametersParameter("part", partArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Patient parsePatient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Patient.class, jsonObject);
        }
        Patient.Builder builder = Patient.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseHumanName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonObject, Boolean.class, DateTime.class));
        JsonArray addressArray = getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                builder.address(parseAddress("address", addressArray.getJsonObject(i), i));
            }
        }
        builder.maritalStatus(parseCodeableConcept("maritalStatus", getJsonValue(jsonObject, "maritalStatus", JsonObject.class), -1));
        builder.multipleBirth(parseChoiceElement("multipleBirth", jsonObject, Boolean.class, Integer.class));
        JsonArray photoArray = getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                builder.photo(parseAttachment("photo", photoArray.getJsonObject(i), i));
            }
        }
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parsePatientContact("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray communicationArray = getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                builder.communication(parsePatientCommunication("communication", communicationArray.getJsonObject(i), i));
            }
        }
        JsonArray generalPractitionerArray = getJsonArray(jsonObject, "generalPractitioner");
        if (generalPractitionerArray != null) {
            for (int i = 0; i < generalPractitionerArray.size(); i++) {
                builder.generalPractitioner(parseReference("generalPractitioner", generalPractitionerArray.getJsonObject(i), i));
            }
        }
        builder.managingOrganization(parseReference("managingOrganization", getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parsePatientLink("link", linkArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Patient.Communication parsePatientCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Patient.Communication.class, jsonObject);
        }
        Patient.Communication.Builder builder = Patient.Communication.builder();
        parseBackboneElement(builder, jsonObject);
        builder.language(parseCodeableConcept("language", getJsonValue(jsonObject, "language", JsonObject.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    private Patient.Contact parsePatientContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Patient.Contact.class, jsonObject);
        }
        Patient.Contact.Builder builder = Patient.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray relationshipArray = getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                builder.relationship(parseCodeableConcept("relationship", relationshipArray.getJsonObject(i), i));
            }
        }
        builder.name(parseHumanName("name", getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.address(parseAddress("address", getJsonValue(jsonObject, "address", JsonObject.class), -1));
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.organization(parseReference("organization", getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Patient.Link parsePatientLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Patient.Link.class, jsonObject);
        }
        Patient.Link.Builder builder = Patient.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.other(parseReference("other", getJsonValue(jsonObject, "other", JsonObject.class), -1));
        builder.type((LinkType) parseString(LinkType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    private PaymentNotice parsePaymentNotice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PaymentNotice.class, jsonObject);
        }
        PaymentNotice.Builder builder = PaymentNotice.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((PaymentNoticeStatus) parseString(PaymentNoticeStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseReference("response", getJsonValue(jsonObject, "response", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.provider(parseReference("provider", getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.payment(parseReference("payment", getJsonValue(jsonObject, "payment", JsonObject.class), -1));
        builder.paymentDate(parseDate("paymentDate", getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1));
        builder.payee(parseReference("payee", getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.recipient(parseReference("recipient", getJsonValue(jsonObject, "recipient", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.paymentStatus(parseCodeableConcept("paymentStatus", getJsonValue(jsonObject, "paymentStatus", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation parsePaymentReconciliation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PaymentReconciliation.class, jsonObject);
        }
        PaymentReconciliation.Builder builder = PaymentReconciliation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((PaymentReconciliationStatus) parseString(PaymentReconciliationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.paymentIssuer(parseReference("paymentIssuer", getJsonValue(jsonObject, "paymentIssuer", JsonObject.class), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.requestor(parseReference("requestor", getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.paymentDate(parseDate("paymentDate", getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1));
        builder.paymentAmount(parseMoney("paymentAmount", getJsonValue(jsonObject, "paymentAmount", JsonObject.class), -1));
        builder.paymentIdentifier(parseIdentifier("paymentIdentifier", getJsonValue(jsonObject, "paymentIdentifier", JsonObject.class), -1));
        JsonArray detailArray = getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            for (int i = 0; i < detailArray.size(); i++) {
                builder.detail(parsePaymentReconciliationDetail("detail", detailArray.getJsonObject(i), i));
            }
        }
        builder.formCode(parseCodeableConcept("formCode", getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        JsonArray processNoteArray = getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            for (int i = 0; i < processNoteArray.size(); i++) {
                builder.processNote(parsePaymentReconciliationProcessNote("processNote", processNoteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation.Detail parsePaymentReconciliationDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PaymentReconciliation.Detail.class, jsonObject);
        }
        PaymentReconciliation.Detail.Builder builder = PaymentReconciliation.Detail.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.predecessor(parseIdentifier("predecessor", getJsonValue(jsonObject, "predecessor", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.request(parseReference("request", getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.submitter(parseReference("submitter", getJsonValue(jsonObject, "submitter", JsonObject.class), -1));
        builder.response(parseReference("response", getJsonValue(jsonObject, "response", JsonObject.class), -1));
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.responsible(parseReference("responsible", getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.payee(parseReference("payee", getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.amount(parseMoney("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PaymentReconciliation.ProcessNote parsePaymentReconciliationProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PaymentReconciliation.ProcessNote.class, jsonObject);
        }
        PaymentReconciliation.ProcessNote.Builder builder = PaymentReconciliation.ProcessNote.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((NoteType) parseString(NoteType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    private Period parsePeriod(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Period.class, jsonObject);
        }
        Period.Builder builder = Period.builder();
        parseElement(builder, jsonObject);
        builder.start(parseDateTime("start", getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseDateTime("end", getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    private Person parsePerson(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Person.class, jsonObject);
        }
        Person.Builder builder = Person.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseHumanName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray addressArray = getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                builder.address(parseAddress("address", addressArray.getJsonObject(i), i));
            }
        }
        builder.photo(parseAttachment("photo", getJsonValue(jsonObject, "photo", JsonObject.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parsePersonLink("link", linkArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Person.Link parsePersonLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Person.Link.class, jsonObject);
        }
        Person.Link.Builder builder = Person.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.target(parseReference("target", getJsonValue(jsonObject, "target", JsonObject.class), -1));
        builder.assurance((IdentityAssuranceLevel) parseString(IdentityAssuranceLevel.builder(), "assurance", getJsonValue(jsonObject, "assurance", JsonString.class), jsonObject.get("_assurance"), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition parsePlanDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.class, jsonObject);
        }
        PlanDefinition.Builder builder = PlanDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray libraryArray = getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonValue(_libraryArray, i), i));
            }
        }
        JsonArray goalArray = getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            for (int i = 0; i < goalArray.size(); i++) {
                builder.goal(parsePlanDefinitionGoal("goal", goalArray.getJsonObject(i), i));
            }
        }
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parsePlanDefinitionAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action parsePlanDefinitionAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Action.class, jsonObject);
        }
        PlanDefinition.Action.Builder builder = PlanDefinition.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.prefix(parseString("prefix", getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", getJsonValue(jsonObject, "textEquivalent", JsonString.class), jsonObject.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonArray = getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseCodeableConcept("reason", reasonArray.getJsonObject(i), i));
            }
        }
        JsonArray documentationArray = getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.getJsonObject(i), i));
            }
        }
        JsonArray goalIdArray = getJsonArray(jsonObject, "goalId", true);
        if (goalIdArray != null) {
            JsonArray _goalIdArray = jsonObject.getJsonArray("_goalId");
            for (int i = 0; i < goalIdArray.size(); i++) {
                builder.goalId((Id) parseString(Id.builder(), "goalId", goalIdArray.get(i), getJsonValue(_goalIdArray, i), i));
            }
        }
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        JsonArray triggerArray = getJsonArray(jsonObject, "trigger");
        if (triggerArray != null) {
            for (int i = 0; i < triggerArray.size(); i++) {
                builder.trigger(parseTriggerDefinition("trigger", triggerArray.getJsonObject(i), i));
            }
        }
        JsonArray conditionArray = getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition(parsePlanDefinitionActionCondition("condition", conditionArray.getJsonObject(i), i));
            }
        }
        JsonArray inputArray = getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                builder.input(parseDataRequirement("input", inputArray.getJsonObject(i), i));
            }
        }
        JsonArray outputArray = getJsonArray(jsonObject, "output");
        if (outputArray != null) {
            for (int i = 0; i < outputArray.size(); i++) {
                builder.output(parseDataRequirement("output", outputArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedActionArray = getJsonArray(jsonObject, "relatedAction");
        if (relatedActionArray != null) {
            for (int i = 0; i < relatedActionArray.size(); i++) {
                builder.relatedAction(parsePlanDefinitionActionRelatedAction("relatedAction", relatedActionArray.getJsonObject(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, DateTime.class, Age.class, Period.class, Duration.class, Range.class, Timing.class));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parsePlanDefinitionActionParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", getJsonValue(jsonObject, "groupingBehavior", JsonString.class), jsonObject.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", getJsonValue(jsonObject, "selectionBehavior", JsonString.class), jsonObject.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", getJsonValue(jsonObject, "requiredBehavior", JsonString.class), jsonObject.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", getJsonValue(jsonObject, "precheckBehavior", JsonString.class), jsonObject.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", getJsonValue(jsonObject, "cardinalityBehavior", JsonString.class), jsonObject.get("_cardinalityBehavior"), -1));
        builder.definition(parseChoiceElement("definition", jsonObject, Canonical.class, Uri.class));
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray dynamicValueArray = getJsonArray(jsonObject, "dynamicValue");
        if (dynamicValueArray != null) {
            for (int i = 0; i < dynamicValueArray.size(); i++) {
                builder.dynamicValue(parsePlanDefinitionActionDynamicValue("dynamicValue", dynamicValueArray.getJsonObject(i), i));
            }
        }
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parsePlanDefinitionAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.Condition parsePlanDefinitionActionCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Action.Condition.class, jsonObject);
        }
        PlanDefinition.Action.Condition.Builder builder = PlanDefinition.Action.Condition.builder();
        parseBackboneElement(builder, jsonObject);
        builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.expression(parseExpression("expression", getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.DynamicValue parsePlanDefinitionActionDynamicValue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Action.DynamicValue.class, jsonObject);
        }
        PlanDefinition.Action.DynamicValue.Builder builder = PlanDefinition.Action.DynamicValue.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.expression(parseExpression("expression", getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.Participant parsePlanDefinitionActionParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Action.Participant.class, jsonObject);
        }
        PlanDefinition.Action.Participant.Builder builder = PlanDefinition.Action.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ActionParticipantType) parseString(ActionParticipantType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Action.RelatedAction parsePlanDefinitionActionRelatedAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Action.RelatedAction.class, jsonObject);
        }
        PlanDefinition.Action.RelatedAction.Builder builder = PlanDefinition.Action.RelatedAction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.actionId((Id) parseString(Id.builder(), "actionId", getJsonValue(jsonObject, "actionId", JsonString.class), jsonObject.get("_actionId"), -1));
        builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", getJsonValue(jsonObject, "relationship", JsonString.class), jsonObject.get("_relationship"), -1));
        builder.offset(parseChoiceElement("offset", jsonObject, Duration.class, Range.class));
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Goal parsePlanDefinitionGoal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Goal.class, jsonObject);
        }
        PlanDefinition.Goal.Builder builder = PlanDefinition.Goal.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.description(parseCodeableConcept("description", getJsonValue(jsonObject, "description", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.start(parseCodeableConcept("start", getJsonValue(jsonObject, "start", JsonObject.class), -1));
        JsonArray addressesArray = getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            for (int i = 0; i < addressesArray.size(); i++) {
                builder.addresses(parseCodeableConcept("addresses", addressesArray.getJsonObject(i), i));
            }
        }
        JsonArray documentationArray = getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.getJsonObject(i), i));
            }
        }
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parsePlanDefinitionGoalTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PlanDefinition.Goal.Target parsePlanDefinitionGoalTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PlanDefinition.Goal.Target.class, jsonObject);
        }
        PlanDefinition.Goal.Target.Builder builder = PlanDefinition.Goal.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.measure(parseCodeableConcept("measure", getJsonValue(jsonObject, "measure", JsonObject.class), -1));
        builder.detail(parseChoiceElement("detail", jsonObject, Quantity.class, Range.class, CodeableConcept.class));
        builder.due((Duration) parseQuantity(Duration.builder(), "due", getJsonValue(jsonObject, "due", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Population parsePopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Population.class, jsonObject);
        }
        Population.Builder builder = Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.age(parseChoiceElement("age", jsonObject, Range.class, CodeableConcept.class));
        builder.gender(parseCodeableConcept("gender", getJsonValue(jsonObject, "gender", JsonObject.class), -1));
        builder.race(parseCodeableConcept("race", getJsonValue(jsonObject, "race", JsonObject.class), -1));
        builder.physiologicalCondition(parseCodeableConcept("physiologicalCondition", getJsonValue(jsonObject, "physiologicalCondition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Practitioner parsePractitioner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Practitioner.class, jsonObject);
        }
        Practitioner.Builder builder = Practitioner.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseHumanName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray addressArray = getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                builder.address(parseAddress("address", addressArray.getJsonObject(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray photoArray = getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                builder.photo(parseAttachment("photo", photoArray.getJsonObject(i), i));
            }
        }
        JsonArray qualificationArray = getJsonArray(jsonObject, "qualification");
        if (qualificationArray != null) {
            for (int i = 0; i < qualificationArray.size(); i++) {
                builder.qualification(parsePractitionerQualification("qualification", qualificationArray.getJsonObject(i), i));
            }
        }
        JsonArray communicationArray = getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                builder.communication(parseCodeableConcept("communication", communicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Practitioner.Qualification parsePractitionerQualification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Practitioner.Qualification.class, jsonObject);
        }
        Practitioner.Qualification.Builder builder = Practitioner.Qualification.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.issuer(parseReference("issuer", getJsonValue(jsonObject, "issuer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private PractitionerRole parsePractitionerRole(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PractitionerRole.class, jsonObject);
        }
        PractitionerRole.Builder builder = PractitionerRole.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.practitioner(parseReference("practitioner", getJsonValue(jsonObject, "practitioner", JsonObject.class), -1));
        builder.organization(parseReference("organization", getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        JsonArray locationArray = getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseReference("location", locationArray.getJsonObject(i), i));
            }
        }
        JsonArray healthcareServiceArray = getJsonArray(jsonObject, "healthcareService");
        if (healthcareServiceArray != null) {
            for (int i = 0; i < healthcareServiceArray.size(); i++) {
                builder.healthcareService(parseReference("healthcareService", healthcareServiceArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        JsonArray availableTimeArray = getJsonArray(jsonObject, "availableTime");
        if (availableTimeArray != null) {
            for (int i = 0; i < availableTimeArray.size(); i++) {
                builder.availableTime(parsePractitionerRoleAvailableTime("availableTime", availableTimeArray.getJsonObject(i), i));
            }
        }
        JsonArray notAvailableArray = getJsonArray(jsonObject, "notAvailable");
        if (notAvailableArray != null) {
            for (int i = 0; i < notAvailableArray.size(); i++) {
                builder.notAvailable(parsePractitionerRoleNotAvailable("notAvailable", notAvailableArray.getJsonObject(i), i));
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            for (int i = 0; i < endpointArray.size(); i++) {
                builder.endpoint(parseReference("endpoint", endpointArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private PractitionerRole.AvailableTime parsePractitionerRoleAvailableTime(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PractitionerRole.AvailableTime.class, jsonObject);
        }
        PractitionerRole.AvailableTime.Builder builder = PractitionerRole.AvailableTime.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (int i = 0; i < daysOfWeekArray.size(); i++) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", daysOfWeekArray.get(i), getJsonValue(_daysOfWeekArray, i), i));
            }
        }
        builder.allDay(parseBoolean("allDay", getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", getJsonValue(jsonObject, "availableStartTime", JsonString.class), jsonObject.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", getJsonValue(jsonObject, "availableEndTime", JsonString.class), jsonObject.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    private PractitionerRole.NotAvailable parsePractitionerRoleNotAvailable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(PractitionerRole.NotAvailable.class, jsonObject);
        }
        PractitionerRole.NotAvailable.Builder builder = PractitionerRole.NotAvailable.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.during(parsePeriod("during", getJsonValue(jsonObject, "during", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Procedure parseProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Procedure.class, jsonObject);
        }
        Procedure.Builder builder = Procedure.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((ProcedureStatus) parseString(ProcedureStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.performed(parseChoiceElement("performed", jsonObject, DateTime.class, Period.class, String.class, Age.class, Range.class));
        builder.recorder(parseReference("recorder", getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseProcedurePerformer("performer", performerArray.getJsonObject(i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray bodySiteArray = getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.getJsonObject(i), i));
            }
        }
        builder.outcome(parseCodeableConcept("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        JsonArray reportArray = getJsonArray(jsonObject, "report");
        if (reportArray != null) {
            for (int i = 0; i < reportArray.size(); i++) {
                builder.report(parseReference("report", reportArray.getJsonObject(i), i));
            }
        }
        JsonArray complicationArray = getJsonArray(jsonObject, "complication");
        if (complicationArray != null) {
            for (int i = 0; i < complicationArray.size(); i++) {
                builder.complication(parseCodeableConcept("complication", complicationArray.getJsonObject(i), i));
            }
        }
        JsonArray complicationDetailArray = getJsonArray(jsonObject, "complicationDetail");
        if (complicationDetailArray != null) {
            for (int i = 0; i < complicationDetailArray.size(); i++) {
                builder.complicationDetail(parseReference("complicationDetail", complicationDetailArray.getJsonObject(i), i));
            }
        }
        JsonArray followUpArray = getJsonArray(jsonObject, "followUp");
        if (followUpArray != null) {
            for (int i = 0; i < followUpArray.size(); i++) {
                builder.followUp(parseCodeableConcept("followUp", followUpArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray focalDeviceArray = getJsonArray(jsonObject, "focalDevice");
        if (focalDeviceArray != null) {
            for (int i = 0; i < focalDeviceArray.size(); i++) {
                builder.focalDevice(parseProcedureFocalDevice("focalDevice", focalDeviceArray.getJsonObject(i), i));
            }
        }
        JsonArray usedReferenceArray = getJsonArray(jsonObject, "usedReference");
        if (usedReferenceArray != null) {
            for (int i = 0; i < usedReferenceArray.size(); i++) {
                builder.usedReference(parseReference("usedReference", usedReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray usedCodeArray = getJsonArray(jsonObject, "usedCode");
        if (usedCodeArray != null) {
            for (int i = 0; i < usedCodeArray.size(); i++) {
                builder.usedCode(parseCodeableConcept("usedCode", usedCodeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Procedure.FocalDevice parseProcedureFocalDevice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Procedure.FocalDevice.class, jsonObject);
        }
        Procedure.FocalDevice.Builder builder = Procedure.FocalDevice.builder();
        parseBackboneElement(builder, jsonObject);
        builder.action(parseCodeableConcept("action", getJsonValue(jsonObject, "action", JsonObject.class), -1));
        builder.manipulated(parseReference("manipulated", getJsonValue(jsonObject, "manipulated", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Procedure.Performer parseProcedurePerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Procedure.Performer.class, jsonObject);
        }
        Procedure.Performer.Builder builder = Procedure.Performer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.actor(parseReference("actor", getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ProdCharacteristic parseProdCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ProdCharacteristic.class, jsonObject);
        }
        ProdCharacteristic.Builder builder = ProdCharacteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.height(parseQuantity("height", getJsonValue(jsonObject, "height", JsonObject.class), -1));
        builder.width(parseQuantity("width", getJsonValue(jsonObject, "width", JsonObject.class), -1));
        builder.depth(parseQuantity("depth", getJsonValue(jsonObject, "depth", JsonObject.class), -1));
        builder.weight(parseQuantity("weight", getJsonValue(jsonObject, "weight", JsonObject.class), -1));
        builder.nominalVolume(parseQuantity("nominalVolume", getJsonValue(jsonObject, "nominalVolume", JsonObject.class), -1));
        builder.externalDiameter(parseQuantity("externalDiameter", getJsonValue(jsonObject, "externalDiameter", JsonObject.class), -1));
        builder.shape(parseString("shape", getJsonValue(jsonObject, "shape", JsonString.class), jsonObject.get("_shape"), -1));
        JsonArray colorArray = getJsonArray(jsonObject, "color", true);
        if (colorArray != null) {
            JsonArray _colorArray = jsonObject.getJsonArray("_color");
            for (int i = 0; i < colorArray.size(); i++) {
                builder.color(parseString("color", colorArray.get(i), getJsonValue(_colorArray, i), i));
            }
        }
        JsonArray imprintArray = getJsonArray(jsonObject, "imprint", true);
        if (imprintArray != null) {
            JsonArray _imprintArray = jsonObject.getJsonArray("_imprint");
            for (int i = 0; i < imprintArray.size(); i++) {
                builder.imprint(parseString("imprint", imprintArray.get(i), getJsonValue(_imprintArray, i), i));
            }
        }
        JsonArray imageArray = getJsonArray(jsonObject, "image");
        if (imageArray != null) {
            for (int i = 0; i < imageArray.size(); i++) {
                builder.image(parseAttachment("image", imageArray.getJsonObject(i), i));
            }
        }
        builder.scoring(parseCodeableConcept("scoring", getJsonValue(jsonObject, "scoring", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ProductShelfLife parseProductShelfLife(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ProductShelfLife.class, jsonObject);
        }
        ProductShelfLife.Builder builder = ProductShelfLife.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.period(parseQuantity("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray specialPrecautionsForStorageArray = getJsonArray(jsonObject, "specialPrecautionsForStorage");
        if (specialPrecautionsForStorageArray != null) {
            for (int i = 0; i < specialPrecautionsForStorageArray.size(); i++) {
                builder.specialPrecautionsForStorage(parseCodeableConcept("specialPrecautionsForStorage", specialPrecautionsForStorageArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Provenance parseProvenance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Provenance.class, jsonObject);
        }
        Provenance.Builder builder = Provenance.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseReference("target", targetArray.getJsonObject(i), i));
            }
        }
        builder.occurred(parseChoiceElement("occurred", jsonObject, Period.class, DateTime.class));
        builder.recorded(parseInstant("recorded", getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1));
        JsonArray policyArray = getJsonArray(jsonObject, "policy", true);
        if (policyArray != null) {
            JsonArray _policyArray = jsonObject.getJsonArray("_policy");
            for (int i = 0; i < policyArray.size(); i++) {
                builder.policy(parseUri("policy", policyArray.get(i), getJsonValue(_policyArray, i), i));
            }
        }
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonArray = getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            for (int i = 0; i < reasonArray.size(); i++) {
                builder.reason(parseCodeableConcept("reason", reasonArray.getJsonObject(i), i));
            }
        }
        builder.activity(parseCodeableConcept("activity", getJsonValue(jsonObject, "activity", JsonObject.class), -1));
        JsonArray agentArray = getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                builder.agent(parseProvenanceAgent("agent", agentArray.getJsonObject(i), i));
            }
        }
        JsonArray entityArray = getJsonArray(jsonObject, "entity");
        if (entityArray != null) {
            for (int i = 0; i < entityArray.size(); i++) {
                builder.entity(parseProvenanceEntity("entity", entityArray.getJsonObject(i), i));
            }
        }
        JsonArray signatureArray = getJsonArray(jsonObject, "signature");
        if (signatureArray != null) {
            for (int i = 0; i < signatureArray.size(); i++) {
                builder.signature(parseSignature("signature", signatureArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Provenance.Agent parseProvenanceAgent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Provenance.Agent.class, jsonObject);
        }
        Provenance.Agent.Builder builder = Provenance.Agent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray roleArray = getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            for (int i = 0; i < roleArray.size(); i++) {
                builder.role(parseCodeableConcept("role", roleArray.getJsonObject(i), i));
            }
        }
        builder.who(parseReference("who", getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Provenance.Entity parseProvenanceEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Provenance.Entity.class, jsonObject);
        }
        Provenance.Entity.Builder builder = Provenance.Entity.builder();
        parseBackboneElement(builder, jsonObject);
        builder.role((ProvenanceEntityRole) parseString(ProvenanceEntityRole.builder(), "role", getJsonValue(jsonObject, "role", JsonString.class), jsonObject.get("_role"), -1));
        builder.what(parseReference("what", getJsonValue(jsonObject, "what", JsonObject.class), -1));
        JsonArray agentArray = getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            for (int i = 0; i < agentArray.size(); i++) {
                builder.agent(parseProvenanceAgent("agent", agentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Quantity parseQuantity(Quantity.Builder builder, java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Quantity.class, jsonObject);
        }
        parseElement(builder, jsonObject);
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.comparator((QuantityComparator) parseString(QuantityComparator.builder(), "comparator", getJsonValue(jsonObject, "comparator", JsonString.class), jsonObject.get("_comparator"), -1));
        builder.unit(parseString("unit", getJsonValue(jsonObject, "unit", JsonString.class), jsonObject.get("_unit"), -1));
        builder.system(parseUri("system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        stackPop();
        return builder.build();
    }

    private Quantity parseQuantity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        return parseQuantity(Quantity.builder(), elementName, jsonObject, elementIndex);
    }

    private Questionnaire parseQuestionnaire(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Questionnaire.class, jsonObject);
        }
        Questionnaire.Builder builder = Questionnaire.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray derivedFromArray = getJsonArray(jsonObject, "derivedFrom", true);
        if (derivedFromArray != null) {
            JsonArray _derivedFromArray = jsonObject.getJsonArray("_derivedFrom");
            for (int i = 0; i < derivedFromArray.size(); i++) {
                builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", derivedFromArray.get(i), getJsonValue(_derivedFromArray, i), i));
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        JsonArray subjectTypeArray = getJsonArray(jsonObject, "subjectType", true);
        if (subjectTypeArray != null) {
            JsonArray _subjectTypeArray = jsonObject.getJsonArray("_subjectType");
            for (int i = 0; i < subjectTypeArray.size(); i++) {
                builder.subjectType((ResourceType) parseString(ResourceType.builder(), "subjectType", subjectTypeArray.get(i), getJsonValue(_subjectTypeArray, i), i));
            }
        }
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCoding("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseQuestionnaireItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item parseQuestionnaireItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Questionnaire.Item.class, jsonObject);
        }
        Questionnaire.Item.Builder builder = Questionnaire.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.linkId(parseString("linkId", getJsonValue(jsonObject, "linkId", JsonString.class), jsonObject.get("_linkId"), -1));
        builder.definition(parseUri("definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCoding("code", codeArray.getJsonObject(i), i));
            }
        }
        builder.prefix(parseString("prefix", getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.type((QuestionnaireItemType) parseString(QuestionnaireItemType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray enableWhenArray = getJsonArray(jsonObject, "enableWhen");
        if (enableWhenArray != null) {
            for (int i = 0; i < enableWhenArray.size(); i++) {
                builder.enableWhen(parseQuestionnaireItemEnableWhen("enableWhen", enableWhenArray.getJsonObject(i), i));
            }
        }
        builder.enableBehavior((EnableWhenBehavior) parseString(EnableWhenBehavior.builder(), "enableBehavior", getJsonValue(jsonObject, "enableBehavior", JsonString.class), jsonObject.get("_enableBehavior"), -1));
        builder.required(parseBoolean("required", getJsonValue(jsonObject, "required", JsonValue.class), jsonObject.get("_required"), -1));
        builder.repeats(parseBoolean("repeats", getJsonValue(jsonObject, "repeats", JsonValue.class), jsonObject.get("_repeats"), -1));
        builder.readOnly(parseBoolean("readOnly", getJsonValue(jsonObject, "readOnly", JsonValue.class), jsonObject.get("_readOnly"), -1));
        builder.maxLength(parseInteger("maxLength", getJsonValue(jsonObject, "maxLength", JsonNumber.class), jsonObject.get("_maxLength"), -1));
        builder.answerValueSet((Canonical) parseUri(Canonical.builder(), "answerValueSet", getJsonValue(jsonObject, "answerValueSet", JsonString.class), jsonObject.get("_answerValueSet"), -1));
        JsonArray answerOptionArray = getJsonArray(jsonObject, "answerOption");
        if (answerOptionArray != null) {
            for (int i = 0; i < answerOptionArray.size(); i++) {
                builder.answerOption(parseQuestionnaireItemAnswerOption("answerOption", answerOptionArray.getJsonObject(i), i));
            }
        }
        JsonArray initialArray = getJsonArray(jsonObject, "initial");
        if (initialArray != null) {
            for (int i = 0; i < initialArray.size(); i++) {
                builder.initial(parseQuestionnaireItemInitial("initial", initialArray.getJsonObject(i), i));
            }
        }
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseQuestionnaireItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.AnswerOption parseQuestionnaireItemAnswerOption(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Questionnaire.Item.AnswerOption.class, jsonObject);
        }
        Questionnaire.Item.AnswerOption.Builder builder = Questionnaire.Item.AnswerOption.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, Integer.class, Date.class, Time.class, String.class, Coding.class, Reference.class));
        builder.initialSelected(parseBoolean("initialSelected", getJsonValue(jsonObject, "initialSelected", JsonValue.class), jsonObject.get("_initialSelected"), -1));
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.EnableWhen parseQuestionnaireItemEnableWhen(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Questionnaire.Item.EnableWhen.class, jsonObject);
        }
        Questionnaire.Item.EnableWhen.Builder builder = Questionnaire.Item.EnableWhen.builder();
        parseBackboneElement(builder, jsonObject);
        builder.question(parseString("question", getJsonValue(jsonObject, "question", JsonString.class), jsonObject.get("_question"), -1));
        builder.operator((QuestionnaireItemOperator) parseString(QuestionnaireItemOperator.builder(), "operator", getJsonValue(jsonObject, "operator", JsonString.class), jsonObject.get("_operator"), -1));
        builder.answer(parseChoiceElement("answer", jsonObject, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Questionnaire.Item.Initial parseQuestionnaireItemInitial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Questionnaire.Item.Initial.class, jsonObject);
        }
        Questionnaire.Item.Initial.Builder builder = Questionnaire.Item.Initial.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse parseQuestionnaireResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(QuestionnaireResponse.class, jsonObject);
        }
        QuestionnaireResponse.Builder builder = QuestionnaireResponse.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.questionnaire((Canonical) parseUri(Canonical.builder(), "questionnaire", getJsonValue(jsonObject, "questionnaire", JsonString.class), jsonObject.get("_questionnaire"), -1));
        builder.status((QuestionnaireResponseStatus) parseString(QuestionnaireResponseStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.authored(parseDateTime("authored", getJsonValue(jsonObject, "authored", JsonString.class), jsonObject.get("_authored"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.source(parseReference("source", getJsonValue(jsonObject, "source", JsonObject.class), -1));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseQuestionnaireResponseItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse.Item parseQuestionnaireResponseItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(QuestionnaireResponse.Item.class, jsonObject);
        }
        QuestionnaireResponse.Item.Builder builder = QuestionnaireResponse.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.linkId(parseString("linkId", getJsonValue(jsonObject, "linkId", JsonString.class), jsonObject.get("_linkId"), -1));
        builder.definition(parseUri("definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.text(parseString("text", getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray answerArray = getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            for (int i = 0; i < answerArray.size(); i++) {
                builder.answer(parseQuestionnaireResponseItemAnswer("answer", answerArray.getJsonObject(i), i));
            }
        }
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseQuestionnaireResponseItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private QuestionnaireResponse.Item.Answer parseQuestionnaireResponseItemAnswer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(QuestionnaireResponse.Item.Answer.class, jsonObject);
        }
        QuestionnaireResponse.Item.Answer.Builder builder = QuestionnaireResponse.Item.Answer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, Boolean.class, Decimal.class, Integer.class, Date.class, DateTime.class, Time.class, String.class, Uri.class, Attachment.class, Coding.class, Quantity.class, Reference.class));
        JsonArray itemArray = getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            for (int i = 0; i < itemArray.size(); i++) {
                builder.item(parseQuestionnaireResponseItem("item", itemArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Range parseRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Range.class, jsonObject);
        }
        Range.Builder builder = Range.builder();
        parseElement(builder, jsonObject);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", getJsonValue(jsonObject, "low", JsonObject.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", getJsonValue(jsonObject, "high", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Ratio parseRatio(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Ratio.class, jsonObject);
        }
        Ratio.Builder builder = Ratio.builder();
        parseElement(builder, jsonObject);
        builder.numerator(parseQuantity("numerator", getJsonValue(jsonObject, "numerator", JsonObject.class), -1));
        builder.denominator(parseQuantity("denominator", getJsonValue(jsonObject, "denominator", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Reference parseReference(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Reference.class, jsonObject);
        }
        Reference.Builder builder = Reference.builder();
        parseElement(builder, jsonObject);
        builder.reference(parseString("reference", getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        builder.type(parseUri("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private RelatedArtifact parseRelatedArtifact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RelatedArtifact.class, jsonObject);
        }
        RelatedArtifact.Builder builder = RelatedArtifact.builder();
        parseElement(builder, jsonObject);
        builder.type((RelatedArtifactType) parseString(RelatedArtifactType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.label(parseString("label", getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.citation((Markdown) parseString(Markdown.builder(), "citation", getJsonValue(jsonObject, "citation", JsonString.class), jsonObject.get("_citation"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.document(parseAttachment("document", getJsonValue(jsonObject, "document", JsonObject.class), -1));
        builder.resource((Canonical) parseUri(Canonical.builder(), "resource", getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        stackPop();
        return builder.build();
    }

    private RelatedPerson parseRelatedPerson(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RelatedPerson.class, jsonObject);
        }
        RelatedPerson.Builder builder = RelatedPerson.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        JsonArray relationshipArray = getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                builder.relationship(parseCodeableConcept("relationship", relationshipArray.getJsonObject(i), i));
            }
        }
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseHumanName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray telecomArray = getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            for (int i = 0; i < telecomArray.size(); i++) {
                builder.telecom(parseContactPoint("telecom", telecomArray.getJsonObject(i), i));
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray addressArray = getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            for (int i = 0; i < addressArray.size(); i++) {
                builder.address(parseAddress("address", addressArray.getJsonObject(i), i));
            }
        }
        JsonArray photoArray = getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            for (int i = 0; i < photoArray.size(); i++) {
                builder.photo(parseAttachment("photo", photoArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray communicationArray = getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            for (int i = 0; i < communicationArray.size(); i++) {
                builder.communication(parseRelatedPersonCommunication("communication", communicationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RelatedPerson.Communication parseRelatedPersonCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RelatedPerson.Communication.class, jsonObject);
        }
        RelatedPerson.Communication.Builder builder = RelatedPerson.Communication.builder();
        parseBackboneElement(builder, jsonObject);
        builder.language(parseCodeableConcept("language", getJsonValue(jsonObject, "language", JsonObject.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    private RequestGroup parseRequestGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RequestGroup.class, jsonObject);
        }
        RequestGroup.Builder builder = RequestGroup.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces(parseReference("replaces", replacesArray.getJsonObject(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.status((RequestStatus) parseString(RequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.author(parseReference("author", getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseRequestGroupAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action parseRequestGroupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RequestGroup.Action.class, jsonObject);
        }
        RequestGroup.Action.Builder builder = RequestGroup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.prefix(parseString("prefix", getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", getJsonValue(jsonObject, "textEquivalent", JsonString.class), jsonObject.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseCodeableConcept("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray documentationArray = getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            for (int i = 0; i < documentationArray.size(); i++) {
                builder.documentation(parseRelatedArtifact("documentation", documentationArray.getJsonObject(i), i));
            }
        }
        JsonArray conditionArray = getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition(parseRequestGroupActionCondition("condition", conditionArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedActionArray = getJsonArray(jsonObject, "relatedAction");
        if (relatedActionArray != null) {
            for (int i = 0; i < relatedActionArray.size(); i++) {
                builder.relatedAction(parseRequestGroupActionRelatedAction("relatedAction", relatedActionArray.getJsonObject(i), i));
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, DateTime.class, Age.class, Period.class, Duration.class, Range.class, Timing.class));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseReference("participant", participantArray.getJsonObject(i), i));
            }
        }
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", getJsonValue(jsonObject, "groupingBehavior", JsonString.class), jsonObject.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", getJsonValue(jsonObject, "selectionBehavior", JsonString.class), jsonObject.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", getJsonValue(jsonObject, "requiredBehavior", JsonString.class), jsonObject.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", getJsonValue(jsonObject, "precheckBehavior", JsonString.class), jsonObject.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", getJsonValue(jsonObject, "cardinalityBehavior", JsonString.class), jsonObject.get("_cardinalityBehavior"), -1));
        builder.resource(parseReference("resource", getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseRequestGroupAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action.Condition parseRequestGroupActionCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RequestGroup.Action.Condition.class, jsonObject);
        }
        RequestGroup.Action.Condition.Builder builder = RequestGroup.Action.Condition.builder();
        parseBackboneElement(builder, jsonObject);
        builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.expression(parseExpression("expression", getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private RequestGroup.Action.RelatedAction parseRequestGroupActionRelatedAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RequestGroup.Action.RelatedAction.class, jsonObject);
        }
        RequestGroup.Action.RelatedAction.Builder builder = RequestGroup.Action.RelatedAction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.actionId((Id) parseString(Id.builder(), "actionId", getJsonValue(jsonObject, "actionId", JsonString.class), jsonObject.get("_actionId"), -1));
        builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", getJsonValue(jsonObject, "relationship", JsonString.class), jsonObject.get("_relationship"), -1));
        builder.offset(parseChoiceElement("offset", jsonObject, Duration.class, Range.class));
        stackPop();
        return builder.build();
    }

    private ResearchDefinition parseResearchDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchDefinition.class, jsonObject);
        }
        ResearchDefinition.Builder builder = ResearchDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray commentArray = getJsonArray(jsonObject, "comment", true);
        if (commentArray != null) {
            JsonArray _commentArray = jsonObject.getJsonArray("_comment");
            for (int i = 0; i < commentArray.size(); i++) {
                builder.comment(parseString("comment", commentArray.get(i), getJsonValue(_commentArray, i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray libraryArray = getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonValue(_libraryArray, i), i));
            }
        }
        builder.population(parseReference("population", getJsonValue(jsonObject, "population", JsonObject.class), -1));
        builder.exposure(parseReference("exposure", getJsonValue(jsonObject, "exposure", JsonObject.class), -1));
        builder.exposureAlternative(parseReference("exposureAlternative", getJsonValue(jsonObject, "exposureAlternative", JsonObject.class), -1));
        builder.outcome(parseReference("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ResearchElementDefinition parseResearchElementDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchElementDefinition.class, jsonObject);
        }
        ResearchElementDefinition.Builder builder = ResearchElementDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, CodeableConcept.class, Reference.class));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray commentArray = getJsonArray(jsonObject, "comment", true);
        if (commentArray != null) {
            JsonArray _commentArray = jsonObject.getJsonArray("_comment");
            for (int i = 0; i < commentArray.size(); i++) {
                builder.comment(parseString("comment", commentArray.get(i), getJsonValue(_commentArray, i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray libraryArray = getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (int i = 0; i < libraryArray.size(); i++) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", libraryArray.get(i), getJsonValue(_libraryArray, i), i));
            }
        }
        builder.type((ResearchElementType) parseString(ResearchElementType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.variableType((VariableType) parseString(VariableType.builder(), "variableType", getJsonValue(jsonObject, "variableType", JsonString.class), jsonObject.get("_variableType"), -1));
        JsonArray characteristicArray = getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            for (int i = 0; i < characteristicArray.size(); i++) {
                builder.characteristic(parseResearchElementDefinitionCharacteristic("characteristic", characteristicArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ResearchElementDefinition.Characteristic parseResearchElementDefinitionCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchElementDefinition.Characteristic.class, jsonObject);
        }
        ResearchElementDefinition.Characteristic.Builder builder = ResearchElementDefinition.Characteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.definition(parseChoiceElement("definition", jsonObject, CodeableConcept.class, Canonical.class, Expression.class, DataRequirement.class));
        JsonArray usageContextArray = getJsonArray(jsonObject, "usageContext");
        if (usageContextArray != null) {
            for (int i = 0; i < usageContextArray.size(); i++) {
                builder.usageContext(parseUsageContext("usageContext", usageContextArray.getJsonObject(i), i));
            }
        }
        builder.exclude(parseBoolean("exclude", getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        builder.studyEffectiveDescription(parseString("studyEffectiveDescription", getJsonValue(jsonObject, "studyEffectiveDescription", JsonString.class), jsonObject.get("_studyEffectiveDescription"), -1));
        builder.studyEffective(parseChoiceElement("studyEffective", jsonObject, DateTime.class, Period.class, Duration.class, Timing.class));
        builder.studyEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "studyEffectiveTimeFromStart", getJsonValue(jsonObject, "studyEffectiveTimeFromStart", JsonObject.class), -1));
        builder.studyEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "studyEffectiveGroupMeasure", getJsonValue(jsonObject, "studyEffectiveGroupMeasure", JsonString.class), jsonObject.get("_studyEffectiveGroupMeasure"), -1));
        builder.participantEffectiveDescription(parseString("participantEffectiveDescription", getJsonValue(jsonObject, "participantEffectiveDescription", JsonString.class), jsonObject.get("_participantEffectiveDescription"), -1));
        builder.participantEffective(parseChoiceElement("participantEffective", jsonObject, DateTime.class, Period.class, Duration.class, Timing.class));
        builder.participantEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "participantEffectiveTimeFromStart", getJsonValue(jsonObject, "participantEffectiveTimeFromStart", JsonObject.class), -1));
        builder.participantEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "participantEffectiveGroupMeasure", getJsonValue(jsonObject, "participantEffectiveGroupMeasure", JsonString.class), jsonObject.get("_participantEffectiveGroupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    private ResearchStudy parseResearchStudy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchStudy.class, jsonObject);
        }
        ResearchStudy.Builder builder = ResearchStudy.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray protocolArray = getJsonArray(jsonObject, "protocol");
        if (protocolArray != null) {
            for (int i = 0; i < protocolArray.size(); i++) {
                builder.protocol(parseReference("protocol", protocolArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((ResearchStudyStatus) parseString(ResearchStudyStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.primaryPurposeType(parseCodeableConcept("primaryPurposeType", getJsonValue(jsonObject, "primaryPurposeType", JsonObject.class), -1));
        builder.phase(parseCodeableConcept("phase", getJsonValue(jsonObject, "phase", JsonObject.class), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        JsonArray focusArray = getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            for (int i = 0; i < focusArray.size(); i++) {
                builder.focus(parseCodeableConcept("focus", focusArray.getJsonObject(i), i));
            }
        }
        JsonArray conditionArray = getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition(parseCodeableConcept("condition", conditionArray.getJsonObject(i), i));
            }
        }
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        JsonArray keywordArray = getJsonArray(jsonObject, "keyword");
        if (keywordArray != null) {
            for (int i = 0; i < keywordArray.size(); i++) {
                builder.keyword(parseCodeableConcept("keyword", keywordArray.getJsonObject(i), i));
            }
        }
        JsonArray locationArray = getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            for (int i = 0; i < locationArray.size(); i++) {
                builder.location(parseCodeableConcept("location", locationArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray enrollmentArray = getJsonArray(jsonObject, "enrollment");
        if (enrollmentArray != null) {
            for (int i = 0; i < enrollmentArray.size(); i++) {
                builder.enrollment(parseReference("enrollment", enrollmentArray.getJsonObject(i), i));
            }
        }
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.sponsor(parseReference("sponsor", getJsonValue(jsonObject, "sponsor", JsonObject.class), -1));
        builder.principalInvestigator(parseReference("principalInvestigator", getJsonValue(jsonObject, "principalInvestigator", JsonObject.class), -1));
        JsonArray siteArray = getJsonArray(jsonObject, "site");
        if (siteArray != null) {
            for (int i = 0; i < siteArray.size(); i++) {
                builder.site(parseReference("site", siteArray.getJsonObject(i), i));
            }
        }
        builder.reasonStopped(parseCodeableConcept("reasonStopped", getJsonValue(jsonObject, "reasonStopped", JsonObject.class), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray armArray = getJsonArray(jsonObject, "arm");
        if (armArray != null) {
            for (int i = 0; i < armArray.size(); i++) {
                builder.arm(parseResearchStudyArm("arm", armArray.getJsonObject(i), i));
            }
        }
        JsonArray objectiveArray = getJsonArray(jsonObject, "objective");
        if (objectiveArray != null) {
            for (int i = 0; i < objectiveArray.size(); i++) {
                builder.objective(parseResearchStudyObjective("objective", objectiveArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ResearchStudy.Arm parseResearchStudyArm(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchStudy.Arm.class, jsonObject);
        }
        ResearchStudy.Arm.Builder builder = ResearchStudy.Arm.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private ResearchStudy.Objective parseResearchStudyObjective(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchStudy.Objective.class, jsonObject);
        }
        ResearchStudy.Objective.Builder builder = ResearchStudy.Objective.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ResearchSubject parseResearchSubject(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ResearchSubject.class, jsonObject);
        }
        ResearchSubject.Builder builder = ResearchSubject.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((ResearchSubjectStatus) parseString(ResearchSubjectStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.study(parseReference("study", getJsonValue(jsonObject, "study", JsonObject.class), -1));
        builder.individual(parseReference("individual", getJsonValue(jsonObject, "individual", JsonObject.class), -1));
        builder.assignedArm(parseString("assignedArm", getJsonValue(jsonObject, "assignedArm", JsonString.class), jsonObject.get("_assignedArm"), -1));
        builder.actualArm(parseString("actualArm", getJsonValue(jsonObject, "actualArm", JsonString.class), jsonObject.get("_actualArm"), -1));
        builder.consent(parseReference("consent", getJsonValue(jsonObject, "consent", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private void parseResource(Resource.Builder builder, JsonObject jsonObject) {
        builder.id(parseJavaString("id", getJsonValue(jsonObject, "id", JsonString.class), -1));
        builder.meta(parseMeta("meta", getJsonValue(jsonObject, "meta", JsonObject.class), -1));
        builder.implicitRules(parseUri("implicitRules", getJsonValue(jsonObject, "implicitRules", JsonString.class), jsonObject.get("_implicitRules"), -1));
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
    }

    private RiskAssessment parseRiskAssessment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskAssessment.class, jsonObject);
        }
        RiskAssessment.Builder builder = RiskAssessment.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.basedOn(parseReference("basedOn", getJsonValue(jsonObject, "basedOn", JsonObject.class), -1));
        builder.parent(parseReference("parent", getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        builder.status((RiskAssessmentStatus) parseString(RiskAssessmentStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class));
        builder.condition(parseReference("condition", getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        builder.performer(parseReference("performer", getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray basisArray = getJsonArray(jsonObject, "basis");
        if (basisArray != null) {
            for (int i = 0; i < basisArray.size(); i++) {
                builder.basis(parseReference("basis", basisArray.getJsonObject(i), i));
            }
        }
        JsonArray predictionArray = getJsonArray(jsonObject, "prediction");
        if (predictionArray != null) {
            for (int i = 0; i < predictionArray.size(); i++) {
                builder.prediction(parseRiskAssessmentPrediction("prediction", predictionArray.getJsonObject(i), i));
            }
        }
        builder.mitigation(parseString("mitigation", getJsonValue(jsonObject, "mitigation", JsonString.class), jsonObject.get("_mitigation"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskAssessment.Prediction parseRiskAssessmentPrediction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskAssessment.Prediction.class, jsonObject);
        }
        RiskAssessment.Prediction.Builder builder = RiskAssessment.Prediction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.outcome(parseCodeableConcept("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.probability(parseChoiceElement("probability", jsonObject, Decimal.class, Range.class));
        builder.qualitativeRisk(parseCodeableConcept("qualitativeRisk", getJsonValue(jsonObject, "qualitativeRisk", JsonObject.class), -1));
        builder.relativeRisk(parseDecimal("relativeRisk", getJsonValue(jsonObject, "relativeRisk", JsonNumber.class), jsonObject.get("_relativeRisk"), -1));
        builder.when(parseChoiceElement("when", jsonObject, Period.class, Range.class));
        builder.rationale(parseString("rationale", getJsonValue(jsonObject, "rationale", JsonString.class), jsonObject.get("_rationale"), -1));
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis parseRiskEvidenceSynthesis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.class, jsonObject);
        }
        RiskEvidenceSynthesis.Builder builder = RiskEvidenceSynthesis.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            for (int i = 0; i < topicArray.size(); i++) {
                builder.topic(parseCodeableConcept("topic", topicArray.getJsonObject(i), i));
            }
        }
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseContactDetail("author", authorArray.getJsonObject(i), i));
            }
        }
        JsonArray editorArray = getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            for (int i = 0; i < editorArray.size(); i++) {
                builder.editor(parseContactDetail("editor", editorArray.getJsonObject(i), i));
            }
        }
        JsonArray reviewerArray = getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            for (int i = 0; i < reviewerArray.size(); i++) {
                builder.reviewer(parseContactDetail("reviewer", reviewerArray.getJsonObject(i), i));
            }
        }
        JsonArray endorserArray = getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            for (int i = 0; i < endorserArray.size(); i++) {
                builder.endorser(parseContactDetail("endorser", endorserArray.getJsonObject(i), i));
            }
        }
        JsonArray relatedArtifactArray = getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            for (int i = 0; i < relatedArtifactArray.size(); i++) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", relatedArtifactArray.getJsonObject(i), i));
            }
        }
        builder.synthesisType(parseCodeableConcept("synthesisType", getJsonValue(jsonObject, "synthesisType", JsonObject.class), -1));
        builder.studyType(parseCodeableConcept("studyType", getJsonValue(jsonObject, "studyType", JsonObject.class), -1));
        builder.population(parseReference("population", getJsonValue(jsonObject, "population", JsonObject.class), -1));
        builder.exposure(parseReference("exposure", getJsonValue(jsonObject, "exposure", JsonObject.class), -1));
        builder.outcome(parseReference("outcome", getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.sampleSize(parseRiskEvidenceSynthesisSampleSize("sampleSize", getJsonValue(jsonObject, "sampleSize", JsonObject.class), -1));
        builder.riskEstimate(parseRiskEvidenceSynthesisRiskEstimate("riskEstimate", getJsonValue(jsonObject, "riskEstimate", JsonObject.class), -1));
        JsonArray certaintyArray = getJsonArray(jsonObject, "certainty");
        if (certaintyArray != null) {
            for (int i = 0; i < certaintyArray.size(); i++) {
                builder.certainty(parseRiskEvidenceSynthesisCertainty("certainty", certaintyArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis.Certainty parseRiskEvidenceSynthesisCertainty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.Certainty.class, jsonObject);
        }
        RiskEvidenceSynthesis.Certainty.Builder builder = RiskEvidenceSynthesis.Certainty.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray ratingArray = getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            for (int i = 0; i < ratingArray.size(); i++) {
                builder.rating(parseCodeableConcept("rating", ratingArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray certaintySubcomponentArray = getJsonArray(jsonObject, "certaintySubcomponent");
        if (certaintySubcomponentArray != null) {
            for (int i = 0; i < certaintySubcomponentArray.size(); i++) {
                builder.certaintySubcomponent(parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", certaintySubcomponentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis.Certainty.CertaintySubcomponent parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.class, jsonObject);
        }
        RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray ratingArray = getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            for (int i = 0; i < ratingArray.size(); i++) {
                builder.rating(parseCodeableConcept("rating", ratingArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis.RiskEstimate parseRiskEvidenceSynthesisRiskEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.RiskEstimate.class, jsonObject);
        }
        RiskEvidenceSynthesis.RiskEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseDecimal("value", getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        builder.denominatorCount(parseInteger("denominatorCount", getJsonValue(jsonObject, "denominatorCount", JsonNumber.class), jsonObject.get("_denominatorCount"), -1));
        builder.numeratorCount(parseInteger("numeratorCount", getJsonValue(jsonObject, "numeratorCount", JsonNumber.class), jsonObject.get("_numeratorCount"), -1));
        JsonArray precisionEstimateArray = getJsonArray(jsonObject, "precisionEstimate");
        if (precisionEstimateArray != null) {
            for (int i = 0; i < precisionEstimateArray.size(); i++) {
                builder.precisionEstimate(parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate("precisionEstimate", precisionEstimateArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.class, jsonObject);
        }
        RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.level(parseDecimal("level", getJsonValue(jsonObject, "level", JsonNumber.class), jsonObject.get("_level"), -1));
        builder.from(parseDecimal("from", getJsonValue(jsonObject, "from", JsonNumber.class), jsonObject.get("_from"), -1));
        builder.to(parseDecimal("to", getJsonValue(jsonObject, "to", JsonNumber.class), jsonObject.get("_to"), -1));
        stackPop();
        return builder.build();
    }

    private RiskEvidenceSynthesis.SampleSize parseRiskEvidenceSynthesisSampleSize(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(RiskEvidenceSynthesis.SampleSize.class, jsonObject);
        }
        RiskEvidenceSynthesis.SampleSize.Builder builder = RiskEvidenceSynthesis.SampleSize.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfStudies(parseInteger("numberOfStudies", getJsonValue(jsonObject, "numberOfStudies", JsonNumber.class), jsonObject.get("_numberOfStudies"), -1));
        builder.numberOfParticipants(parseInteger("numberOfParticipants", getJsonValue(jsonObject, "numberOfParticipants", JsonNumber.class), jsonObject.get("_numberOfParticipants"), -1));
        stackPop();
        return builder.build();
    }

    private SampledData parseSampledData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SampledData.class, jsonObject);
        }
        SampledData.Builder builder = SampledData.builder();
        parseElement(builder, jsonObject);
        builder.origin((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "origin", getJsonValue(jsonObject, "origin", JsonObject.class), -1));
        builder.period(parseDecimal("period", getJsonValue(jsonObject, "period", JsonNumber.class), jsonObject.get("_period"), -1));
        builder.factor(parseDecimal("factor", getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.lowerLimit(parseDecimal("lowerLimit", getJsonValue(jsonObject, "lowerLimit", JsonNumber.class), jsonObject.get("_lowerLimit"), -1));
        builder.upperLimit(parseDecimal("upperLimit", getJsonValue(jsonObject, "upperLimit", JsonNumber.class), jsonObject.get("_upperLimit"), -1));
        builder.dimensions((PositiveInt) parseInteger(PositiveInt.builder(), "dimensions", getJsonValue(jsonObject, "dimensions", JsonNumber.class), jsonObject.get("_dimensions"), -1));
        builder.data(parseString("data", getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private Schedule parseSchedule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Schedule.class, jsonObject);
        }
        Schedule.Builder builder = Schedule.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.active(parseBoolean("active", getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray serviceCategoryArray = getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceTypeArray = getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        JsonArray actorArray = getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            for (int i = 0; i < actorArray.size(); i++) {
                builder.actor(parseReference("actor", actorArray.getJsonObject(i), i));
            }
        }
        builder.planningHorizon(parsePeriod("planningHorizon", getJsonValue(jsonObject, "planningHorizon", JsonObject.class), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private SearchParameter parseSearchParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SearchParameter.class, jsonObject);
        }
        SearchParameter.Builder builder = SearchParameter.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", getJsonValue(jsonObject, "derivedFrom", JsonString.class), jsonObject.get("_derivedFrom"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        JsonArray baseArray = getJsonArray(jsonObject, "base", true);
        if (baseArray != null) {
            JsonArray _baseArray = jsonObject.getJsonArray("_base");
            for (int i = 0; i < baseArray.size(); i++) {
                builder.base((ResourceType) parseString(ResourceType.builder(), "base", baseArray.get(i), getJsonValue(_baseArray, i), i));
            }
        }
        builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.xpath(parseString("xpath", getJsonValue(jsonObject, "xpath", JsonString.class), jsonObject.get("_xpath"), -1));
        builder.xpathUsage((XPathUsageType) parseString(XPathUsageType.builder(), "xpathUsage", getJsonValue(jsonObject, "xpathUsage", JsonString.class), jsonObject.get("_xpathUsage"), -1));
        JsonArray targetArray = getJsonArray(jsonObject, "target", true);
        if (targetArray != null) {
            JsonArray _targetArray = jsonObject.getJsonArray("_target");
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target((ResourceType) parseString(ResourceType.builder(), "target", targetArray.get(i), getJsonValue(_targetArray, i), i));
            }
        }
        builder.multipleOr(parseBoolean("multipleOr", getJsonValue(jsonObject, "multipleOr", JsonValue.class), jsonObject.get("_multipleOr"), -1));
        builder.multipleAnd(parseBoolean("multipleAnd", getJsonValue(jsonObject, "multipleAnd", JsonValue.class), jsonObject.get("_multipleAnd"), -1));
        JsonArray comparatorArray = getJsonArray(jsonObject, "comparator", true);
        if (comparatorArray != null) {
            JsonArray _comparatorArray = jsonObject.getJsonArray("_comparator");
            for (int i = 0; i < comparatorArray.size(); i++) {
                builder.comparator((SearchComparator) parseString(SearchComparator.builder(), "comparator", comparatorArray.get(i), getJsonValue(_comparatorArray, i), i));
            }
        }
        JsonArray modifierArray = getJsonArray(jsonObject, "modifier", true);
        if (modifierArray != null) {
            JsonArray _modifierArray = jsonObject.getJsonArray("_modifier");
            for (int i = 0; i < modifierArray.size(); i++) {
                builder.modifier((SearchModifierCode) parseString(SearchModifierCode.builder(), "modifier", modifierArray.get(i), getJsonValue(_modifierArray, i), i));
            }
        }
        JsonArray chainArray = getJsonArray(jsonObject, "chain", true);
        if (chainArray != null) {
            JsonArray _chainArray = jsonObject.getJsonArray("_chain");
            for (int i = 0; i < chainArray.size(); i++) {
                builder.chain(parseString("chain", chainArray.get(i), getJsonValue(_chainArray, i), i));
            }
        }
        JsonArray componentArray = getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            for (int i = 0; i < componentArray.size(); i++) {
                builder.component(parseSearchParameterComponent("component", componentArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SearchParameter.Component parseSearchParameterComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SearchParameter.Component.class, jsonObject);
        }
        SearchParameter.Component.Builder builder = SearchParameter.Component.builder();
        parseBackboneElement(builder, jsonObject);
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private ServiceRequest parseServiceRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ServiceRequest.class, jsonObject);
        }
        ServiceRequest.Builder builder = ServiceRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray instantiatesCanonicalArray = getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (int i = 0; i < instantiatesCanonicalArray.size(); i++) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", instantiatesCanonicalArray.get(i), getJsonValue(_instantiatesCanonicalArray, i), i));
            }
        }
        JsonArray instantiatesUriArray = getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (int i = 0; i < instantiatesUriArray.size(); i++) {
                builder.instantiatesUri(parseUri("instantiatesUri", instantiatesUriArray.get(i), getJsonValue(_instantiatesUriArray, i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray replacesArray = getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            for (int i = 0; i < replacesArray.size(); i++) {
                builder.replaces(parseReference("replaces", replacesArray.getJsonObject(i), i));
            }
        }
        builder.requisition(parseIdentifier("requisition", getJsonValue(jsonObject, "requisition", JsonObject.class), -1));
        builder.status((ServiceRequestStatus) parseString(ServiceRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.intent((ServiceRequestIntent) parseString(ServiceRequestIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.priority((ServiceRequestPriority) parseString(ServiceRequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray orderDetailArray = getJsonArray(jsonObject, "orderDetail");
        if (orderDetailArray != null) {
            for (int i = 0; i < orderDetailArray.size(); i++) {
                builder.orderDetail(parseCodeableConcept("orderDetail", orderDetailArray.getJsonObject(i), i));
            }
        }
        builder.quantity(parseChoiceElement("quantity", jsonObject, Quantity.class, Ratio.class, Range.class));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonObject, Boolean.class, CodeableConcept.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        JsonArray performerArray = getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            for (int i = 0; i < performerArray.size(); i++) {
                builder.performer(parseReference("performer", performerArray.getJsonObject(i), i));
            }
        }
        JsonArray locationCodeArray = getJsonArray(jsonObject, "locationCode");
        if (locationCodeArray != null) {
            for (int i = 0; i < locationCodeArray.size(); i++) {
                builder.locationCode(parseCodeableConcept("locationCode", locationCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray locationReferenceArray = getJsonArray(jsonObject, "locationReference");
        if (locationReferenceArray != null) {
            for (int i = 0; i < locationReferenceArray.size(); i++) {
                builder.locationReference(parseReference("locationReference", locationReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseReference("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray supportingInfoArray = getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            for (int i = 0; i < supportingInfoArray.size(); i++) {
                builder.supportingInfo(parseReference("supportingInfo", supportingInfoArray.getJsonObject(i), i));
            }
        }
        JsonArray specimenArray = getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            for (int i = 0; i < specimenArray.size(); i++) {
                builder.specimen(parseReference("specimen", specimenArray.getJsonObject(i), i));
            }
        }
        JsonArray bodySiteArray = getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            for (int i = 0; i < bodySiteArray.size(); i++) {
                builder.bodySite(parseCodeableConcept("bodySite", bodySiteArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        builder.patientInstruction(parseString("patientInstruction", getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        JsonArray relevantHistoryArray = getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Signature parseSignature(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Signature.class, jsonObject);
        }
        Signature.Builder builder = Signature.builder();
        parseElement(builder, jsonObject);
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCoding("type", typeArray.getJsonObject(i), i));
            }
        }
        builder.when(parseInstant("when", getJsonValue(jsonObject, "when", JsonString.class), jsonObject.get("_when"), -1));
        builder.who(parseReference("who", getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.targetFormat((Code) parseString(Code.builder(), "targetFormat", getJsonValue(jsonObject, "targetFormat", JsonString.class), jsonObject.get("_targetFormat"), -1));
        builder.sigFormat((Code) parseString(Code.builder(), "sigFormat", getJsonValue(jsonObject, "sigFormat", JsonString.class), jsonObject.get("_sigFormat"), -1));
        builder.data(parseBase64Binary("data", getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    private Slot parseSlot(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Slot.class, jsonObject);
        }
        Slot.Builder builder = Slot.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceCategoryArray = getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            for (int i = 0; i < serviceCategoryArray.size(); i++) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", serviceCategoryArray.getJsonObject(i), i));
            }
        }
        JsonArray serviceTypeArray = getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            for (int i = 0; i < serviceTypeArray.size(); i++) {
                builder.serviceType(parseCodeableConcept("serviceType", serviceTypeArray.getJsonObject(i), i));
            }
        }
        JsonArray specialtyArray = getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            for (int i = 0; i < specialtyArray.size(); i++) {
                builder.specialty(parseCodeableConcept("specialty", specialtyArray.getJsonObject(i), i));
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", getJsonValue(jsonObject, "appointmentType", JsonObject.class), -1));
        builder.schedule(parseReference("schedule", getJsonValue(jsonObject, "schedule", JsonObject.class), -1));
        builder.status((SlotStatus) parseString(SlotStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.start(parseInstant("start", getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseInstant("end", getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        builder.overbooked(parseBoolean("overbooked", getJsonValue(jsonObject, "overbooked", JsonValue.class), jsonObject.get("_overbooked"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private Specimen parseSpecimen(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Specimen.class, jsonObject);
        }
        Specimen.Builder builder = Specimen.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.accessionIdentifier(parseIdentifier("accessionIdentifier", getJsonValue(jsonObject, "accessionIdentifier", JsonObject.class), -1));
        builder.status((SpecimenStatus) parseString(SpecimenStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.receivedTime(parseDateTime("receivedTime", getJsonValue(jsonObject, "receivedTime", JsonString.class), jsonObject.get("_receivedTime"), -1));
        JsonArray parentArray = getJsonArray(jsonObject, "parent");
        if (parentArray != null) {
            for (int i = 0; i < parentArray.size(); i++) {
                builder.parent(parseReference("parent", parentArray.getJsonObject(i), i));
            }
        }
        JsonArray requestArray = getJsonArray(jsonObject, "request");
        if (requestArray != null) {
            for (int i = 0; i < requestArray.size(); i++) {
                builder.request(parseReference("request", requestArray.getJsonObject(i), i));
            }
        }
        builder.collection(parseSpecimenCollection("collection", getJsonValue(jsonObject, "collection", JsonObject.class), -1));
        JsonArray processingArray = getJsonArray(jsonObject, "processing");
        if (processingArray != null) {
            for (int i = 0; i < processingArray.size(); i++) {
                builder.processing(parseSpecimenProcessing("processing", processingArray.getJsonObject(i), i));
            }
        }
        JsonArray containerArray = getJsonArray(jsonObject, "container");
        if (containerArray != null) {
            for (int i = 0; i < containerArray.size(); i++) {
                builder.container(parseSpecimenContainer("container", containerArray.getJsonObject(i), i));
            }
        }
        JsonArray conditionArray = getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            for (int i = 0; i < conditionArray.size(); i++) {
                builder.condition(parseCodeableConcept("condition", conditionArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Specimen.Collection parseSpecimenCollection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Specimen.Collection.class, jsonObject);
        }
        Specimen.Collection.Builder builder = Specimen.Collection.builder();
        parseBackboneElement(builder, jsonObject);
        builder.collector(parseReference("collector", getJsonValue(jsonObject, "collector", JsonObject.class), -1));
        builder.collected(parseChoiceElement("collected", jsonObject, DateTime.class, Period.class));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.fastingStatus(parseChoiceElement("fastingStatus", jsonObject, CodeableConcept.class, Duration.class));
        stackPop();
        return builder.build();
    }

    private Specimen.Container parseSpecimenContainer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Specimen.Container.class, jsonObject);
        }
        Specimen.Container.Builder builder = Specimen.Container.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", getJsonValue(jsonObject, "capacity", JsonObject.class), -1));
        builder.specimenQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "specimenQuantity", getJsonValue(jsonObject, "specimenQuantity", JsonObject.class), -1));
        builder.additive(parseChoiceElement("additive", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Specimen.Processing parseSpecimenProcessing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Specimen.Processing.class, jsonObject);
        }
        Specimen.Processing.Builder builder = Specimen.Processing.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        JsonArray additiveArray = getJsonArray(jsonObject, "additive");
        if (additiveArray != null) {
            for (int i = 0; i < additiveArray.size(); i++) {
                builder.additive(parseReference("additive", additiveArray.getJsonObject(i), i));
            }
        }
        builder.time(parseChoiceElement("time", jsonObject, DateTime.class, Period.class));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition parseSpecimenDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SpecimenDefinition.class, jsonObject);
        }
        SpecimenDefinition.Builder builder = SpecimenDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.typeCollected(parseCodeableConcept("typeCollected", getJsonValue(jsonObject, "typeCollected", JsonObject.class), -1));
        JsonArray patientPreparationArray = getJsonArray(jsonObject, "patientPreparation");
        if (patientPreparationArray != null) {
            for (int i = 0; i < patientPreparationArray.size(); i++) {
                builder.patientPreparation(parseCodeableConcept("patientPreparation", patientPreparationArray.getJsonObject(i), i));
            }
        }
        builder.timeAspect(parseString("timeAspect", getJsonValue(jsonObject, "timeAspect", JsonString.class), jsonObject.get("_timeAspect"), -1));
        JsonArray collectionArray = getJsonArray(jsonObject, "collection");
        if (collectionArray != null) {
            for (int i = 0; i < collectionArray.size(); i++) {
                builder.collection(parseCodeableConcept("collection", collectionArray.getJsonObject(i), i));
            }
        }
        JsonArray typeTestedArray = getJsonArray(jsonObject, "typeTested");
        if (typeTestedArray != null) {
            for (int i = 0; i < typeTestedArray.size(); i++) {
                builder.typeTested(parseSpecimenDefinitionTypeTested("typeTested", typeTestedArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested parseSpecimenDefinitionTypeTested(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.class, jsonObject);
        }
        SpecimenDefinition.TypeTested.Builder builder = SpecimenDefinition.TypeTested.builder();
        parseBackboneElement(builder, jsonObject);
        builder.isDerived(parseBoolean("isDerived", getJsonValue(jsonObject, "isDerived", JsonValue.class), jsonObject.get("_isDerived"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.preference((SpecimenContainedPreference) parseString(SpecimenContainedPreference.builder(), "preference", getJsonValue(jsonObject, "preference", JsonString.class), jsonObject.get("_preference"), -1));
        builder.container(parseSpecimenDefinitionTypeTestedContainer("container", getJsonValue(jsonObject, "container", JsonObject.class), -1));
        builder.requirement(parseString("requirement", getJsonValue(jsonObject, "requirement", JsonString.class), jsonObject.get("_requirement"), -1));
        builder.retentionTime((Duration) parseQuantity(Duration.builder(), "retentionTime", getJsonValue(jsonObject, "retentionTime", JsonObject.class), -1));
        JsonArray rejectionCriterionArray = getJsonArray(jsonObject, "rejectionCriterion");
        if (rejectionCriterionArray != null) {
            for (int i = 0; i < rejectionCriterionArray.size(); i++) {
                builder.rejectionCriterion(parseCodeableConcept("rejectionCriterion", rejectionCriterionArray.getJsonObject(i), i));
            }
        }
        JsonArray handlingArray = getJsonArray(jsonObject, "handling");
        if (handlingArray != null) {
            for (int i = 0; i < handlingArray.size(); i++) {
                builder.handling(parseSpecimenDefinitionTypeTestedHandling("handling", handlingArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Container parseSpecimenDefinitionTypeTestedContainer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Container.class, jsonObject);
        }
        SpecimenDefinition.TypeTested.Container.Builder builder = SpecimenDefinition.TypeTested.Container.builder();
        parseBackboneElement(builder, jsonObject);
        builder.material(parseCodeableConcept("material", getJsonValue(jsonObject, "material", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.cap(parseCodeableConcept("cap", getJsonValue(jsonObject, "cap", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", getJsonValue(jsonObject, "capacity", JsonObject.class), -1));
        builder.minimumVolume(parseChoiceElement("minimumVolume", jsonObject, SimpleQuantity.class, String.class));
        JsonArray additiveArray = getJsonArray(jsonObject, "additive");
        if (additiveArray != null) {
            for (int i = 0; i < additiveArray.size(); i++) {
                builder.additive(parseSpecimenDefinitionTypeTestedContainerAdditive("additive", additiveArray.getJsonObject(i), i));
            }
        }
        builder.preparation(parseString("preparation", getJsonValue(jsonObject, "preparation", JsonString.class), jsonObject.get("_preparation"), -1));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Container.Additive parseSpecimenDefinitionTypeTestedContainerAdditive(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Container.Additive.class, jsonObject);
        }
        SpecimenDefinition.TypeTested.Container.Additive.Builder builder = SpecimenDefinition.TypeTested.Container.Additive.builder();
        parseBackboneElement(builder, jsonObject);
        builder.additive(parseChoiceElement("additive", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private SpecimenDefinition.TypeTested.Handling parseSpecimenDefinitionTypeTestedHandling(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SpecimenDefinition.TypeTested.Handling.class, jsonObject);
        }
        SpecimenDefinition.TypeTested.Handling.Builder builder = SpecimenDefinition.TypeTested.Handling.builder();
        parseBackboneElement(builder, jsonObject);
        builder.temperatureQualifier(parseCodeableConcept("temperatureQualifier", getJsonValue(jsonObject, "temperatureQualifier", JsonObject.class), -1));
        builder.temperatureRange(parseRange("temperatureRange", getJsonValue(jsonObject, "temperatureRange", JsonObject.class), -1));
        builder.maxDuration((Duration) parseQuantity(Duration.builder(), "maxDuration", getJsonValue(jsonObject, "maxDuration", JsonObject.class), -1));
        builder.instruction(parseString("instruction", getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    private String parseString(String.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private String parseString(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseString(String.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private StructureDefinition parseStructureDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureDefinition.class, jsonObject);
        }
        StructureDefinition.Builder builder = StructureDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray keywordArray = getJsonArray(jsonObject, "keyword");
        if (keywordArray != null) {
            for (int i = 0; i < keywordArray.size(); i++) {
                builder.keyword(parseCoding("keyword", keywordArray.getJsonObject(i), i));
            }
        }
        builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", getJsonValue(jsonObject, "fhirVersion", JsonString.class), jsonObject.get("_fhirVersion"), -1));
        JsonArray mappingArray = getJsonArray(jsonObject, "mapping");
        if (mappingArray != null) {
            for (int i = 0; i < mappingArray.size(); i++) {
                builder.mapping(parseStructureDefinitionMapping("mapping", mappingArray.getJsonObject(i), i));
            }
        }
        builder.kind((StructureDefinitionKind) parseString(StructureDefinitionKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder._abstract(parseBoolean("abstract", getJsonValue(jsonObject, "abstract", JsonValue.class), jsonObject.get("_abstract"), -1));
        JsonArray contextArray = getJsonArray(jsonObject, "context");
        if (contextArray != null) {
            for (int i = 0; i < contextArray.size(); i++) {
                builder.context(parseStructureDefinitionContext("context", contextArray.getJsonObject(i), i));
            }
        }
        JsonArray contextInvariantArray = getJsonArray(jsonObject, "contextInvariant", true);
        if (contextInvariantArray != null) {
            JsonArray _contextInvariantArray = jsonObject.getJsonArray("_contextInvariant");
            for (int i = 0; i < contextInvariantArray.size(); i++) {
                builder.contextInvariant(parseString("contextInvariant", contextInvariantArray.get(i), getJsonValue(_contextInvariantArray, i), i));
            }
        }
        builder.type(parseUri("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.baseDefinition((Canonical) parseUri(Canonical.builder(), "baseDefinition", getJsonValue(jsonObject, "baseDefinition", JsonString.class), jsonObject.get("_baseDefinition"), -1));
        builder.derivation((TypeDerivationRule) parseString(TypeDerivationRule.builder(), "derivation", getJsonValue(jsonObject, "derivation", JsonString.class), jsonObject.get("_derivation"), -1));
        builder.snapshot(parseStructureDefinitionSnapshot("snapshot", getJsonValue(jsonObject, "snapshot", JsonObject.class), -1));
        builder.differential(parseStructureDefinitionDifferential("differential", getJsonValue(jsonObject, "differential", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Context parseStructureDefinitionContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureDefinition.Context.class, jsonObject);
        }
        StructureDefinition.Context.Builder builder = StructureDefinition.Context.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ExtensionContextType) parseString(ExtensionContextType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Differential parseStructureDefinitionDifferential(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureDefinition.Differential.class, jsonObject);
        }
        StructureDefinition.Differential.Builder builder = StructureDefinition.Differential.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray elementArray = getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                builder.element(parseElementDefinition("element", elementArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Mapping parseStructureDefinitionMapping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureDefinition.Mapping.class, jsonObject);
        }
        StructureDefinition.Mapping.Builder builder = StructureDefinition.Mapping.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identity((Id) parseString(Id.builder(), "identity", getJsonValue(jsonObject, "identity", JsonString.class), jsonObject.get("_identity"), -1));
        builder.uri(parseUri("uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    private StructureDefinition.Snapshot parseStructureDefinitionSnapshot(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureDefinition.Snapshot.class, jsonObject);
        }
        StructureDefinition.Snapshot.Builder builder = StructureDefinition.Snapshot.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray elementArray = getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            for (int i = 0; i < elementArray.size(); i++) {
                builder.element(parseElementDefinition("element", elementArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap parseStructureMap(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.class, jsonObject);
        }
        StructureMap.Builder builder = StructureMap.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray structureArray = getJsonArray(jsonObject, "structure");
        if (structureArray != null) {
            for (int i = 0; i < structureArray.size(); i++) {
                builder.structure(parseStructureMapStructure("structure", structureArray.getJsonObject(i), i));
            }
        }
        JsonArray importArray = getJsonArray(jsonObject, "import", true);
        if (importArray != null) {
            JsonArray _importArray = jsonObject.getJsonArray("_import");
            for (int i = 0; i < importArray.size(); i++) {
                builder._import((Canonical) parseUri(Canonical.builder(), "import", importArray.get(i), getJsonValue(_importArray, i), i));
            }
        }
        JsonArray groupArray = getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            for (int i = 0; i < groupArray.size(); i++) {
                builder.group(parseStructureMapGroup("group", groupArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group parseStructureMapGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.class, jsonObject);
        }
        StructureMap.Group.Builder builder = StructureMap.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Id) parseString(Id.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder._extends((Id) parseString(Id.builder(), "extends", getJsonValue(jsonObject, "extends", JsonString.class), jsonObject.get("_extends"), -1));
        builder.typeMode((StructureMapGroupTypeMode) parseString(StructureMapGroupTypeMode.builder(), "typeMode", getJsonValue(jsonObject, "typeMode", JsonString.class), jsonObject.get("_typeMode"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        JsonArray inputArray = getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                builder.input(parseStructureMapGroupInput("input", inputArray.getJsonObject(i), i));
            }
        }
        JsonArray ruleArray = getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                builder.rule(parseStructureMapGroupRule("rule", ruleArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Input parseStructureMapGroupInput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Input.class, jsonObject);
        }
        StructureMap.Group.Input.Builder builder = StructureMap.Group.Input.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Id) parseString(Id.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type(parseString("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.mode((StructureMapInputMode) parseString(StructureMapInputMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule parseStructureMapGroupRule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.class, jsonObject);
        }
        StructureMap.Group.Rule.Builder builder = StructureMap.Group.Rule.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Id) parseString(Id.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseStructureMapGroupRuleSource("source", sourceArray.getJsonObject(i), i));
            }
        }
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseStructureMapGroupRuleTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        JsonArray ruleArray = getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            for (int i = 0; i < ruleArray.size(); i++) {
                builder.rule(parseStructureMapGroupRule("rule", ruleArray.getJsonObject(i), i));
            }
        }
        JsonArray dependentArray = getJsonArray(jsonObject, "dependent");
        if (dependentArray != null) {
            for (int i = 0; i < dependentArray.size(); i++) {
                builder.dependent(parseStructureMapGroupRuleDependent("dependent", dependentArray.getJsonObject(i), i));
            }
        }
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Dependent parseStructureMapGroupRuleDependent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Dependent.class, jsonObject);
        }
        StructureMap.Group.Rule.Dependent.Builder builder = StructureMap.Group.Rule.Dependent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Id) parseString(Id.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray variableArray = getJsonArray(jsonObject, "variable", true);
        if (variableArray != null) {
            JsonArray _variableArray = jsonObject.getJsonArray("_variable");
            for (int i = 0; i < variableArray.size(); i++) {
                builder.variable(parseString("variable", variableArray.get(i), getJsonValue(_variableArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Source parseStructureMapGroupRuleSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Source.class, jsonObject);
        }
        StructureMap.Group.Rule.Source.Builder builder = StructureMap.Group.Rule.Source.builder();
        parseBackboneElement(builder, jsonObject);
        builder.context((Id) parseString(Id.builder(), "context", getJsonValue(jsonObject, "context", JsonString.class), jsonObject.get("_context"), -1));
        builder.min(parseInteger("min", getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.type(parseString("type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.defaultValue(parseChoiceElement("defaultValue", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        builder.element(parseString("element", getJsonValue(jsonObject, "element", JsonString.class), jsonObject.get("_element"), -1));
        builder.listMode((StructureMapSourceListMode) parseString(StructureMapSourceListMode.builder(), "listMode", getJsonValue(jsonObject, "listMode", JsonString.class), jsonObject.get("_listMode"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", getJsonValue(jsonObject, "variable", JsonString.class), jsonObject.get("_variable"), -1));
        builder.condition(parseString("condition", getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        builder.check(parseString("check", getJsonValue(jsonObject, "check", JsonString.class), jsonObject.get("_check"), -1));
        builder.logMessage(parseString("logMessage", getJsonValue(jsonObject, "logMessage", JsonString.class), jsonObject.get("_logMessage"), -1));
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Target parseStructureMapGroupRuleTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Target.class, jsonObject);
        }
        StructureMap.Group.Rule.Target.Builder builder = StructureMap.Group.Rule.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.context((Id) parseString(Id.builder(), "context", getJsonValue(jsonObject, "context", JsonString.class), jsonObject.get("_context"), -1));
        builder.contextType((StructureMapContextType) parseString(StructureMapContextType.builder(), "contextType", getJsonValue(jsonObject, "contextType", JsonString.class), jsonObject.get("_contextType"), -1));
        builder.element(parseString("element", getJsonValue(jsonObject, "element", JsonString.class), jsonObject.get("_element"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", getJsonValue(jsonObject, "variable", JsonString.class), jsonObject.get("_variable"), -1));
        JsonArray listModeArray = getJsonArray(jsonObject, "listMode", true);
        if (listModeArray != null) {
            JsonArray _listModeArray = jsonObject.getJsonArray("_listMode");
            for (int i = 0; i < listModeArray.size(); i++) {
                builder.listMode((StructureMapTargetListMode) parseString(StructureMapTargetListMode.builder(), "listMode", listModeArray.get(i), getJsonValue(_listModeArray, i), i));
            }
        }
        builder.listRuleId((Id) parseString(Id.builder(), "listRuleId", getJsonValue(jsonObject, "listRuleId", JsonString.class), jsonObject.get("_listRuleId"), -1));
        builder.transform((StructureMapTransform) parseString(StructureMapTransform.builder(), "transform", getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseStructureMapGroupRuleTargetParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private StructureMap.Group.Rule.Target.Parameter parseStructureMapGroupRuleTargetParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Group.Rule.Target.Parameter.class, jsonObject);
        }
        StructureMap.Group.Rule.Target.Parameter.Builder builder = StructureMap.Group.Rule.Target.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, Id.class, String.class, Boolean.class, Integer.class, Decimal.class));
        stackPop();
        return builder.build();
    }

    private StructureMap.Structure parseStructureMapStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(StructureMap.Structure.class, jsonObject);
        }
        StructureMap.Structure.Builder builder = StructureMap.Structure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.url((Canonical) parseUri(Canonical.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.mode((StructureMapModelMode) parseString(StructureMapModelMode.builder(), "mode", getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.alias(parseString("alias", getJsonValue(jsonObject, "alias", JsonString.class), jsonObject.get("_alias"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private Subscription parseSubscription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Subscription.class, jsonObject);
        }
        Subscription.Builder builder = Subscription.builder();
        parseDomainResource(builder, jsonObject);
        builder.status((SubscriptionStatus) parseString(SubscriptionStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactPoint("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.end(parseInstant("end", getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        builder.reason(parseString("reason", getJsonValue(jsonObject, "reason", JsonString.class), jsonObject.get("_reason"), -1));
        builder.criteria(parseString("criteria", getJsonValue(jsonObject, "criteria", JsonString.class), jsonObject.get("_criteria"), -1));
        builder.error(parseString("error", getJsonValue(jsonObject, "error", JsonString.class), jsonObject.get("_error"), -1));
        builder.channel(parseSubscriptionChannel("channel", getJsonValue(jsonObject, "channel", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Subscription.Channel parseSubscriptionChannel(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Subscription.Channel.class, jsonObject);
        }
        Subscription.Channel.Builder builder = Subscription.Channel.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((SubscriptionChannelType) parseString(SubscriptionChannelType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1));
        builder.payload((Code) parseString(Code.builder(), "payload", getJsonValue(jsonObject, "payload", JsonString.class), jsonObject.get("_payload"), -1));
        JsonArray headerArray = getJsonArray(jsonObject, "header", true);
        if (headerArray != null) {
            JsonArray _headerArray = jsonObject.getJsonArray("_header");
            for (int i = 0; i < headerArray.size(); i++) {
                builder.header(parseString("header", headerArray.get(i), getJsonValue(_headerArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Substance parseSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Substance.class, jsonObject);
        }
        Substance.Builder builder = Substance.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((FHIRSubstanceStatus) parseString(FHIRSubstanceStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            for (int i = 0; i < categoryArray.size(); i++) {
                builder.category(parseCodeableConcept("category", categoryArray.getJsonObject(i), i));
            }
        }
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray instanceArray = getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            for (int i = 0; i < instanceArray.size(); i++) {
                builder.instance(parseSubstanceInstance("instance", instanceArray.getJsonObject(i), i));
            }
        }
        JsonArray ingredientArray = getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            for (int i = 0; i < ingredientArray.size(); i++) {
                builder.ingredient(parseSubstanceIngredient("ingredient", ingredientArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Substance.Ingredient parseSubstanceIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Substance.Ingredient.class, jsonObject);
        }
        Substance.Ingredient.Builder builder = Substance.Ingredient.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity(parseRatio("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.substance(parseChoiceElement("substance", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private Substance.Instance parseSubstanceInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Substance.Instance.class, jsonObject);
        }
        Substance.Instance.Builder builder = Substance.Instance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.expiry(parseDateTime("expiry", getJsonValue(jsonObject, "expiry", JsonString.class), jsonObject.get("_expiry"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceAmount parseSubstanceAmount(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceAmount.class, jsonObject);
        }
        SubstanceAmount.Builder builder = SubstanceAmount.builder();
        parseBackboneElement(builder, jsonObject);
        builder.amount(parseChoiceElement("amount", jsonObject, Quantity.class, Range.class, String.class));
        builder.amountType(parseCodeableConcept("amountType", getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        builder.amountText(parseString("amountText", getJsonValue(jsonObject, "amountText", JsonString.class), jsonObject.get("_amountText"), -1));
        builder.referenceRange(parseSubstanceAmountReferenceRange("referenceRange", getJsonValue(jsonObject, "referenceRange", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceAmount.ReferenceRange parseSubstanceAmountReferenceRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceAmount.ReferenceRange.class, jsonObject);
        }
        SubstanceAmount.ReferenceRange.Builder builder = SubstanceAmount.ReferenceRange.builder();
        parseBackboneElement(builder, jsonObject);
        builder.lowLimit(parseQuantity("lowLimit", getJsonValue(jsonObject, "lowLimit", JsonObject.class), -1));
        builder.highLimit(parseQuantity("highLimit", getJsonValue(jsonObject, "highLimit", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceNucleicAcid parseSubstanceNucleicAcid(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceNucleicAcid.class, jsonObject);
        }
        SubstanceNucleicAcid.Builder builder = SubstanceNucleicAcid.builder();
        parseDomainResource(builder, jsonObject);
        builder.sequenceType(parseCodeableConcept("sequenceType", getJsonValue(jsonObject, "sequenceType", JsonObject.class), -1));
        builder.numberOfSubunits(parseInteger("numberOfSubunits", getJsonValue(jsonObject, "numberOfSubunits", JsonNumber.class), jsonObject.get("_numberOfSubunits"), -1));
        builder.areaOfHybridisation(parseString("areaOfHybridisation", getJsonValue(jsonObject, "areaOfHybridisation", JsonString.class), jsonObject.get("_areaOfHybridisation"), -1));
        builder.oligoNucleotideType(parseCodeableConcept("oligoNucleotideType", getJsonValue(jsonObject, "oligoNucleotideType", JsonObject.class), -1));
        JsonArray subunitArray = getJsonArray(jsonObject, "subunit");
        if (subunitArray != null) {
            for (int i = 0; i < subunitArray.size(); i++) {
                builder.subunit(parseSubstanceNucleicAcidSubunit("subunit", subunitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceNucleicAcid.Subunit parseSubstanceNucleicAcidSubunit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceNucleicAcid.Subunit.class, jsonObject);
        }
        SubstanceNucleicAcid.Subunit.Builder builder = SubstanceNucleicAcid.Subunit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.subunit(parseInteger("subunit", getJsonValue(jsonObject, "subunit", JsonNumber.class), jsonObject.get("_subunit"), -1));
        builder.sequence(parseString("sequence", getJsonValue(jsonObject, "sequence", JsonString.class), jsonObject.get("_sequence"), -1));
        builder.length(parseInteger("length", getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.sequenceAttachment(parseAttachment("sequenceAttachment", getJsonValue(jsonObject, "sequenceAttachment", JsonObject.class), -1));
        builder.fivePrime(parseCodeableConcept("fivePrime", getJsonValue(jsonObject, "fivePrime", JsonObject.class), -1));
        builder.threePrime(parseCodeableConcept("threePrime", getJsonValue(jsonObject, "threePrime", JsonObject.class), -1));
        JsonArray linkageArray = getJsonArray(jsonObject, "linkage");
        if (linkageArray != null) {
            for (int i = 0; i < linkageArray.size(); i++) {
                builder.linkage(parseSubstanceNucleicAcidSubunitLinkage("linkage", linkageArray.getJsonObject(i), i));
            }
        }
        JsonArray sugarArray = getJsonArray(jsonObject, "sugar");
        if (sugarArray != null) {
            for (int i = 0; i < sugarArray.size(); i++) {
                builder.sugar(parseSubstanceNucleicAcidSubunitSugar("sugar", sugarArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceNucleicAcid.Subunit.Linkage parseSubstanceNucleicAcidSubunitLinkage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceNucleicAcid.Subunit.Linkage.class, jsonObject);
        }
        SubstanceNucleicAcid.Subunit.Linkage.Builder builder = SubstanceNucleicAcid.Subunit.Linkage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.connectivity(parseString("connectivity", getJsonValue(jsonObject, "connectivity", JsonString.class), jsonObject.get("_connectivity"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.residueSite(parseString("residueSite", getJsonValue(jsonObject, "residueSite", JsonString.class), jsonObject.get("_residueSite"), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceNucleicAcid.Subunit.Sugar parseSubstanceNucleicAcidSubunitSugar(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceNucleicAcid.Subunit.Sugar.class, jsonObject);
        }
        SubstanceNucleicAcid.Subunit.Sugar.Builder builder = SubstanceNucleicAcid.Subunit.Sugar.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.residueSite(parseString("residueSite", getJsonValue(jsonObject, "residueSite", JsonString.class), jsonObject.get("_residueSite"), -1));
        stackPop();
        return builder.build();
    }

    private SubstancePolymer parseSubstancePolymer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.class, jsonObject);
        }
        SubstancePolymer.Builder builder = SubstancePolymer.builder();
        parseDomainResource(builder, jsonObject);
        builder.clazz(parseCodeableConcept("class", getJsonValue(jsonObject, "class", JsonObject.class), -1));
        builder.geometry(parseCodeableConcept("geometry", getJsonValue(jsonObject, "geometry", JsonObject.class), -1));
        JsonArray copolymerConnectivityArray = getJsonArray(jsonObject, "copolymerConnectivity");
        if (copolymerConnectivityArray != null) {
            for (int i = 0; i < copolymerConnectivityArray.size(); i++) {
                builder.copolymerConnectivity(parseCodeableConcept("copolymerConnectivity", copolymerConnectivityArray.getJsonObject(i), i));
            }
        }
        JsonArray modificationArray = getJsonArray(jsonObject, "modification", true);
        if (modificationArray != null) {
            JsonArray _modificationArray = jsonObject.getJsonArray("_modification");
            for (int i = 0; i < modificationArray.size(); i++) {
                builder.modification(parseString("modification", modificationArray.get(i), getJsonValue(_modificationArray, i), i));
            }
        }
        JsonArray monomerSetArray = getJsonArray(jsonObject, "monomerSet");
        if (monomerSetArray != null) {
            for (int i = 0; i < monomerSetArray.size(); i++) {
                builder.monomerSet(parseSubstancePolymerMonomerSet("monomerSet", monomerSetArray.getJsonObject(i), i));
            }
        }
        JsonArray repeatArray = getJsonArray(jsonObject, "repeat");
        if (repeatArray != null) {
            for (int i = 0; i < repeatArray.size(); i++) {
                builder.repeat(parseSubstancePolymerRepeat("repeat", repeatArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.MonomerSet parseSubstancePolymerMonomerSet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.MonomerSet.class, jsonObject);
        }
        SubstancePolymer.MonomerSet.Builder builder = SubstancePolymer.MonomerSet.builder();
        parseBackboneElement(builder, jsonObject);
        builder.ratioType(parseCodeableConcept("ratioType", getJsonValue(jsonObject, "ratioType", JsonObject.class), -1));
        JsonArray startingMaterialArray = getJsonArray(jsonObject, "startingMaterial");
        if (startingMaterialArray != null) {
            for (int i = 0; i < startingMaterialArray.size(); i++) {
                builder.startingMaterial(parseSubstancePolymerMonomerSetStartingMaterial("startingMaterial", startingMaterialArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.MonomerSet.StartingMaterial parseSubstancePolymerMonomerSetStartingMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.MonomerSet.StartingMaterial.class, jsonObject);
        }
        SubstancePolymer.MonomerSet.StartingMaterial.Builder builder = SubstancePolymer.MonomerSet.StartingMaterial.builder();
        parseBackboneElement(builder, jsonObject);
        builder.material(parseCodeableConcept("material", getJsonValue(jsonObject, "material", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.isDefining(parseBoolean("isDefining", getJsonValue(jsonObject, "isDefining", JsonValue.class), jsonObject.get("_isDefining"), -1));
        builder.amount(parseSubstanceAmount("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.Repeat parseSubstancePolymerRepeat(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.Repeat.class, jsonObject);
        }
        SubstancePolymer.Repeat.Builder builder = SubstancePolymer.Repeat.builder();
        parseBackboneElement(builder, jsonObject);
        builder.numberOfUnits(parseInteger("numberOfUnits", getJsonValue(jsonObject, "numberOfUnits", JsonNumber.class), jsonObject.get("_numberOfUnits"), -1));
        builder.averageMolecularFormula(parseString("averageMolecularFormula", getJsonValue(jsonObject, "averageMolecularFormula", JsonString.class), jsonObject.get("_averageMolecularFormula"), -1));
        builder.repeatUnitAmountType(parseCodeableConcept("repeatUnitAmountType", getJsonValue(jsonObject, "repeatUnitAmountType", JsonObject.class), -1));
        JsonArray repeatUnitArray = getJsonArray(jsonObject, "repeatUnit");
        if (repeatUnitArray != null) {
            for (int i = 0; i < repeatUnitArray.size(); i++) {
                builder.repeatUnit(parseSubstancePolymerRepeatRepeatUnit("repeatUnit", repeatUnitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.Repeat.RepeatUnit parseSubstancePolymerRepeatRepeatUnit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.Repeat.RepeatUnit.class, jsonObject);
        }
        SubstancePolymer.Repeat.RepeatUnit.Builder builder = SubstancePolymer.Repeat.RepeatUnit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.orientationOfPolymerisation(parseCodeableConcept("orientationOfPolymerisation", getJsonValue(jsonObject, "orientationOfPolymerisation", JsonObject.class), -1));
        builder.repeatUnit(parseString("repeatUnit", getJsonValue(jsonObject, "repeatUnit", JsonString.class), jsonObject.get("_repeatUnit"), -1));
        builder.amount(parseSubstanceAmount("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray degreeOfPolymerisationArray = getJsonArray(jsonObject, "degreeOfPolymerisation");
        if (degreeOfPolymerisationArray != null) {
            for (int i = 0; i < degreeOfPolymerisationArray.size(); i++) {
                builder.degreeOfPolymerisation(parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation("degreeOfPolymerisation", degreeOfPolymerisationArray.getJsonObject(i), i));
            }
        }
        JsonArray structuralRepresentationArray = getJsonArray(jsonObject, "structuralRepresentation");
        if (structuralRepresentationArray != null) {
            for (int i = 0; i < structuralRepresentationArray.size(); i++) {
                builder.structuralRepresentation(parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation("structuralRepresentation", structuralRepresentationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.class, jsonObject);
        }
        SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.degree(parseCodeableConcept("degree", getJsonValue(jsonObject, "degree", JsonObject.class), -1));
        builder.amount(parseSubstanceAmount("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.class, jsonObject);
        }
        SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.representation(parseString("representation", getJsonValue(jsonObject, "representation", JsonString.class), jsonObject.get("_representation"), -1));
        builder.attachment(parseAttachment("attachment", getJsonValue(jsonObject, "attachment", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceProtein parseSubstanceProtein(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceProtein.class, jsonObject);
        }
        SubstanceProtein.Builder builder = SubstanceProtein.builder();
        parseDomainResource(builder, jsonObject);
        builder.sequenceType(parseCodeableConcept("sequenceType", getJsonValue(jsonObject, "sequenceType", JsonObject.class), -1));
        builder.numberOfSubunits(parseInteger("numberOfSubunits", getJsonValue(jsonObject, "numberOfSubunits", JsonNumber.class), jsonObject.get("_numberOfSubunits"), -1));
        JsonArray disulfideLinkageArray = getJsonArray(jsonObject, "disulfideLinkage", true);
        if (disulfideLinkageArray != null) {
            JsonArray _disulfideLinkageArray = jsonObject.getJsonArray("_disulfideLinkage");
            for (int i = 0; i < disulfideLinkageArray.size(); i++) {
                builder.disulfideLinkage(parseString("disulfideLinkage", disulfideLinkageArray.get(i), getJsonValue(_disulfideLinkageArray, i), i));
            }
        }
        JsonArray subunitArray = getJsonArray(jsonObject, "subunit");
        if (subunitArray != null) {
            for (int i = 0; i < subunitArray.size(); i++) {
                builder.subunit(parseSubstanceProteinSubunit("subunit", subunitArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceProtein.Subunit parseSubstanceProteinSubunit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceProtein.Subunit.class, jsonObject);
        }
        SubstanceProtein.Subunit.Builder builder = SubstanceProtein.Subunit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.subunit(parseInteger("subunit", getJsonValue(jsonObject, "subunit", JsonNumber.class), jsonObject.get("_subunit"), -1));
        builder.sequence(parseString("sequence", getJsonValue(jsonObject, "sequence", JsonString.class), jsonObject.get("_sequence"), -1));
        builder.length(parseInteger("length", getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.sequenceAttachment(parseAttachment("sequenceAttachment", getJsonValue(jsonObject, "sequenceAttachment", JsonObject.class), -1));
        builder.nTerminalModificationId(parseIdentifier("nTerminalModificationId", getJsonValue(jsonObject, "nTerminalModificationId", JsonObject.class), -1));
        builder.nTerminalModification(parseString("nTerminalModification", getJsonValue(jsonObject, "nTerminalModification", JsonString.class), jsonObject.get("_nTerminalModification"), -1));
        builder.cTerminalModificationId(parseIdentifier("cTerminalModificationId", getJsonValue(jsonObject, "cTerminalModificationId", JsonObject.class), -1));
        builder.cTerminalModification(parseString("cTerminalModification", getJsonValue(jsonObject, "cTerminalModification", JsonString.class), jsonObject.get("_cTerminalModification"), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceReferenceInformation parseSubstanceReferenceInformation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceReferenceInformation.class, jsonObject);
        }
        SubstanceReferenceInformation.Builder builder = SubstanceReferenceInformation.builder();
        parseDomainResource(builder, jsonObject);
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray geneArray = getJsonArray(jsonObject, "gene");
        if (geneArray != null) {
            for (int i = 0; i < geneArray.size(); i++) {
                builder.gene(parseSubstanceReferenceInformationGene("gene", geneArray.getJsonObject(i), i));
            }
        }
        JsonArray geneElementArray = getJsonArray(jsonObject, "geneElement");
        if (geneElementArray != null) {
            for (int i = 0; i < geneElementArray.size(); i++) {
                builder.geneElement(parseSubstanceReferenceInformationGeneElement("geneElement", geneElementArray.getJsonObject(i), i));
            }
        }
        JsonArray classificationArray = getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            for (int i = 0; i < classificationArray.size(); i++) {
                builder.classification(parseSubstanceReferenceInformationClassification("classification", classificationArray.getJsonObject(i), i));
            }
        }
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseSubstanceReferenceInformationTarget("target", targetArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceReferenceInformation.Classification parseSubstanceReferenceInformationClassification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceReferenceInformation.Classification.class, jsonObject);
        }
        SubstanceReferenceInformation.Classification.Builder builder = SubstanceReferenceInformation.Classification.builder();
        parseBackboneElement(builder, jsonObject);
        builder.domain(parseCodeableConcept("domain", getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.classification(parseCodeableConcept("classification", getJsonValue(jsonObject, "classification", JsonObject.class), -1));
        JsonArray subtypeArray = getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            for (int i = 0; i < subtypeArray.size(); i++) {
                builder.subtype(parseCodeableConcept("subtype", subtypeArray.getJsonObject(i), i));
            }
        }
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceReferenceInformation.Gene parseSubstanceReferenceInformationGene(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceReferenceInformation.Gene.class, jsonObject);
        }
        SubstanceReferenceInformation.Gene.Builder builder = SubstanceReferenceInformation.Gene.builder();
        parseBackboneElement(builder, jsonObject);
        builder.geneSequenceOrigin(parseCodeableConcept("geneSequenceOrigin", getJsonValue(jsonObject, "geneSequenceOrigin", JsonObject.class), -1));
        builder.gene(parseCodeableConcept("gene", getJsonValue(jsonObject, "gene", JsonObject.class), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceReferenceInformation.GeneElement parseSubstanceReferenceInformationGeneElement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceReferenceInformation.GeneElement.class, jsonObject);
        }
        SubstanceReferenceInformation.GeneElement.Builder builder = SubstanceReferenceInformation.GeneElement.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.element(parseIdentifier("element", getJsonValue(jsonObject, "element", JsonObject.class), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceReferenceInformation.Target parseSubstanceReferenceInformationTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceReferenceInformation.Target.class, jsonObject);
        }
        SubstanceReferenceInformation.Target.Builder builder = SubstanceReferenceInformation.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.target(parseIdentifier("target", getJsonValue(jsonObject, "target", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.interaction(parseCodeableConcept("interaction", getJsonValue(jsonObject, "interaction", JsonObject.class), -1));
        builder.organism(parseCodeableConcept("organism", getJsonValue(jsonObject, "organism", JsonObject.class), -1));
        builder.organismType(parseCodeableConcept("organismType", getJsonValue(jsonObject, "organismType", JsonObject.class), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, Quantity.class, Range.class, String.class));
        builder.amountType(parseCodeableConcept("amountType", getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial parseSubstanceSourceMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.class, jsonObject);
        }
        SubstanceSourceMaterial.Builder builder = SubstanceSourceMaterial.builder();
        parseDomainResource(builder, jsonObject);
        builder.sourceMaterialClass(parseCodeableConcept("sourceMaterialClass", getJsonValue(jsonObject, "sourceMaterialClass", JsonObject.class), -1));
        builder.sourceMaterialType(parseCodeableConcept("sourceMaterialType", getJsonValue(jsonObject, "sourceMaterialType", JsonObject.class), -1));
        builder.sourceMaterialState(parseCodeableConcept("sourceMaterialState", getJsonValue(jsonObject, "sourceMaterialState", JsonObject.class), -1));
        builder.organismId(parseIdentifier("organismId", getJsonValue(jsonObject, "organismId", JsonObject.class), -1));
        builder.organismName(parseString("organismName", getJsonValue(jsonObject, "organismName", JsonString.class), jsonObject.get("_organismName"), -1));
        JsonArray parentSubstanceIdArray = getJsonArray(jsonObject, "parentSubstanceId");
        if (parentSubstanceIdArray != null) {
            for (int i = 0; i < parentSubstanceIdArray.size(); i++) {
                builder.parentSubstanceId(parseIdentifier("parentSubstanceId", parentSubstanceIdArray.getJsonObject(i), i));
            }
        }
        JsonArray parentSubstanceNameArray = getJsonArray(jsonObject, "parentSubstanceName", true);
        if (parentSubstanceNameArray != null) {
            JsonArray _parentSubstanceNameArray = jsonObject.getJsonArray("_parentSubstanceName");
            for (int i = 0; i < parentSubstanceNameArray.size(); i++) {
                builder.parentSubstanceName(parseString("parentSubstanceName", parentSubstanceNameArray.get(i), getJsonValue(_parentSubstanceNameArray, i), i));
            }
        }
        JsonArray countryOfOriginArray = getJsonArray(jsonObject, "countryOfOrigin");
        if (countryOfOriginArray != null) {
            for (int i = 0; i < countryOfOriginArray.size(); i++) {
                builder.countryOfOrigin(parseCodeableConcept("countryOfOrigin", countryOfOriginArray.getJsonObject(i), i));
            }
        }
        JsonArray geographicalLocationArray = getJsonArray(jsonObject, "geographicalLocation", true);
        if (geographicalLocationArray != null) {
            JsonArray _geographicalLocationArray = jsonObject.getJsonArray("_geographicalLocation");
            for (int i = 0; i < geographicalLocationArray.size(); i++) {
                builder.geographicalLocation(parseString("geographicalLocation", geographicalLocationArray.get(i), getJsonValue(_geographicalLocationArray, i), i));
            }
        }
        builder.developmentStage(parseCodeableConcept("developmentStage", getJsonValue(jsonObject, "developmentStage", JsonObject.class), -1));
        JsonArray fractionDescriptionArray = getJsonArray(jsonObject, "fractionDescription");
        if (fractionDescriptionArray != null) {
            for (int i = 0; i < fractionDescriptionArray.size(); i++) {
                builder.fractionDescription(parseSubstanceSourceMaterialFractionDescription("fractionDescription", fractionDescriptionArray.getJsonObject(i), i));
            }
        }
        builder.organism(parseSubstanceSourceMaterialOrganism("organism", getJsonValue(jsonObject, "organism", JsonObject.class), -1));
        JsonArray partDescriptionArray = getJsonArray(jsonObject, "partDescription");
        if (partDescriptionArray != null) {
            for (int i = 0; i < partDescriptionArray.size(); i++) {
                builder.partDescription(parseSubstanceSourceMaterialPartDescription("partDescription", partDescriptionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.FractionDescription parseSubstanceSourceMaterialFractionDescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.FractionDescription.class, jsonObject);
        }
        SubstanceSourceMaterial.FractionDescription.Builder builder = SubstanceSourceMaterial.FractionDescription.builder();
        parseBackboneElement(builder, jsonObject);
        builder.fraction(parseString("fraction", getJsonValue(jsonObject, "fraction", JsonString.class), jsonObject.get("_fraction"), -1));
        builder.materialType(parseCodeableConcept("materialType", getJsonValue(jsonObject, "materialType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.Organism parseSubstanceSourceMaterialOrganism(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.Organism.class, jsonObject);
        }
        SubstanceSourceMaterial.Organism.Builder builder = SubstanceSourceMaterial.Organism.builder();
        parseBackboneElement(builder, jsonObject);
        builder.family(parseCodeableConcept("family", getJsonValue(jsonObject, "family", JsonObject.class), -1));
        builder.genus(parseCodeableConcept("genus", getJsonValue(jsonObject, "genus", JsonObject.class), -1));
        builder.species(parseCodeableConcept("species", getJsonValue(jsonObject, "species", JsonObject.class), -1));
        builder.intraspecificType(parseCodeableConcept("intraspecificType", getJsonValue(jsonObject, "intraspecificType", JsonObject.class), -1));
        builder.intraspecificDescription(parseString("intraspecificDescription", getJsonValue(jsonObject, "intraspecificDescription", JsonString.class), jsonObject.get("_intraspecificDescription"), -1));
        JsonArray authorArray = getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            for (int i = 0; i < authorArray.size(); i++) {
                builder.author(parseSubstanceSourceMaterialOrganismAuthor("author", authorArray.getJsonObject(i), i));
            }
        }
        builder.hybrid(parseSubstanceSourceMaterialOrganismHybrid("hybrid", getJsonValue(jsonObject, "hybrid", JsonObject.class), -1));
        builder.organismGeneral(parseSubstanceSourceMaterialOrganismOrganismGeneral("organismGeneral", getJsonValue(jsonObject, "organismGeneral", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.Organism.Author parseSubstanceSourceMaterialOrganismAuthor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.Organism.Author.class, jsonObject);
        }
        SubstanceSourceMaterial.Organism.Author.Builder builder = SubstanceSourceMaterial.Organism.Author.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authorType(parseCodeableConcept("authorType", getJsonValue(jsonObject, "authorType", JsonObject.class), -1));
        builder.authorDescription(parseString("authorDescription", getJsonValue(jsonObject, "authorDescription", JsonString.class), jsonObject.get("_authorDescription"), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.Organism.Hybrid parseSubstanceSourceMaterialOrganismHybrid(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.Organism.Hybrid.class, jsonObject);
        }
        SubstanceSourceMaterial.Organism.Hybrid.Builder builder = SubstanceSourceMaterial.Organism.Hybrid.builder();
        parseBackboneElement(builder, jsonObject);
        builder.maternalOrganismId(parseString("maternalOrganismId", getJsonValue(jsonObject, "maternalOrganismId", JsonString.class), jsonObject.get("_maternalOrganismId"), -1));
        builder.maternalOrganismName(parseString("maternalOrganismName", getJsonValue(jsonObject, "maternalOrganismName", JsonString.class), jsonObject.get("_maternalOrganismName"), -1));
        builder.paternalOrganismId(parseString("paternalOrganismId", getJsonValue(jsonObject, "paternalOrganismId", JsonString.class), jsonObject.get("_paternalOrganismId"), -1));
        builder.paternalOrganismName(parseString("paternalOrganismName", getJsonValue(jsonObject, "paternalOrganismName", JsonString.class), jsonObject.get("_paternalOrganismName"), -1));
        builder.hybridType(parseCodeableConcept("hybridType", getJsonValue(jsonObject, "hybridType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.Organism.OrganismGeneral parseSubstanceSourceMaterialOrganismOrganismGeneral(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.Organism.OrganismGeneral.class, jsonObject);
        }
        SubstanceSourceMaterial.Organism.OrganismGeneral.Builder builder = SubstanceSourceMaterial.Organism.OrganismGeneral.builder();
        parseBackboneElement(builder, jsonObject);
        builder.kingdom(parseCodeableConcept("kingdom", getJsonValue(jsonObject, "kingdom", JsonObject.class), -1));
        builder.phylum(parseCodeableConcept("phylum", getJsonValue(jsonObject, "phylum", JsonObject.class), -1));
        builder.clazz(parseCodeableConcept("class", getJsonValue(jsonObject, "class", JsonObject.class), -1));
        builder.order(parseCodeableConcept("order", getJsonValue(jsonObject, "order", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSourceMaterial.PartDescription parseSubstanceSourceMaterialPartDescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSourceMaterial.PartDescription.class, jsonObject);
        }
        SubstanceSourceMaterial.PartDescription.Builder builder = SubstanceSourceMaterial.PartDescription.builder();
        parseBackboneElement(builder, jsonObject);
        builder.part(parseCodeableConcept("part", getJsonValue(jsonObject, "part", JsonObject.class), -1));
        builder.partLocation(parseCodeableConcept("partLocation", getJsonValue(jsonObject, "partLocation", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification parseSubstanceSpecification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.class, jsonObject);
        }
        SubstanceSpecification.Builder builder = SubstanceSpecification.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.domain(parseCodeableConcept("domain", getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray moietyArray = getJsonArray(jsonObject, "moiety");
        if (moietyArray != null) {
            for (int i = 0; i < moietyArray.size(); i++) {
                builder.moiety(parseSubstanceSpecificationMoiety("moiety", moietyArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property(parseSubstanceSpecificationProperty("property", propertyArray.getJsonObject(i), i));
            }
        }
        builder.referenceInformation(parseReference("referenceInformation", getJsonValue(jsonObject, "referenceInformation", JsonObject.class), -1));
        builder.structure(parseSubstanceSpecificationStructure("structure", getJsonValue(jsonObject, "structure", JsonObject.class), -1));
        JsonArray codeArray = getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            for (int i = 0; i < codeArray.size(); i++) {
                builder.code(parseSubstanceSpecificationCode("code", codeArray.getJsonObject(i), i));
            }
        }
        JsonArray nameArray = getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            for (int i = 0; i < nameArray.size(); i++) {
                builder.name(parseSubstanceSpecificationName("name", nameArray.getJsonObject(i), i));
            }
        }
        JsonArray molecularWeightArray = getJsonArray(jsonObject, "molecularWeight");
        if (molecularWeightArray != null) {
            for (int i = 0; i < molecularWeightArray.size(); i++) {
                builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", molecularWeightArray.getJsonObject(i), i));
            }
        }
        JsonArray relationshipArray = getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            for (int i = 0; i < relationshipArray.size(); i++) {
                builder.relationship(parseSubstanceSpecificationRelationship("relationship", relationshipArray.getJsonObject(i), i));
            }
        }
        builder.nucleicAcid(parseReference("nucleicAcid", getJsonValue(jsonObject, "nucleicAcid", JsonObject.class), -1));
        builder.polymer(parseReference("polymer", getJsonValue(jsonObject, "polymer", JsonObject.class), -1));
        builder.protein(parseReference("protein", getJsonValue(jsonObject, "protein", JsonObject.class), -1));
        builder.sourceMaterial(parseReference("sourceMaterial", getJsonValue(jsonObject, "sourceMaterial", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Code parseSubstanceSpecificationCode(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Code.class, jsonObject);
        }
        SubstanceSpecification.Code.Builder builder = SubstanceSpecification.Code.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.comment(parseString("comment", getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Moiety parseSubstanceSpecificationMoiety(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Moiety.class, jsonObject);
        }
        SubstanceSpecification.Moiety.Builder builder = SubstanceSpecification.Moiety.builder();
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.stereochemistry(parseCodeableConcept("stereochemistry", getJsonValue(jsonObject, "stereochemistry", JsonObject.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", getJsonValue(jsonObject, "opticalActivity", JsonObject.class), -1));
        builder.molecularFormula(parseString("molecularFormula", getJsonValue(jsonObject, "molecularFormula", JsonString.class), jsonObject.get("_molecularFormula"), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, Quantity.class, String.class));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Name parseSubstanceSpecificationName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Name.class, jsonObject);
        }
        SubstanceSpecification.Name.Builder builder = SubstanceSpecification.Name.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.preferred(parseBoolean("preferred", getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        JsonArray languageArray = getJsonArray(jsonObject, "language");
        if (languageArray != null) {
            for (int i = 0; i < languageArray.size(); i++) {
                builder.language(parseCodeableConcept("language", languageArray.getJsonObject(i), i));
            }
        }
        JsonArray domainArray = getJsonArray(jsonObject, "domain");
        if (domainArray != null) {
            for (int i = 0; i < domainArray.size(); i++) {
                builder.domain(parseCodeableConcept("domain", domainArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        JsonArray synonymArray = getJsonArray(jsonObject, "synonym");
        if (synonymArray != null) {
            for (int i = 0; i < synonymArray.size(); i++) {
                builder.synonym(parseSubstanceSpecificationName("synonym", synonymArray.getJsonObject(i), i));
            }
        }
        JsonArray translationArray = getJsonArray(jsonObject, "translation");
        if (translationArray != null) {
            for (int i = 0; i < translationArray.size(); i++) {
                builder.translation(parseSubstanceSpecificationName("translation", translationArray.getJsonObject(i), i));
            }
        }
        JsonArray officialArray = getJsonArray(jsonObject, "official");
        if (officialArray != null) {
            for (int i = 0; i < officialArray.size(); i++) {
                builder.official(parseSubstanceSpecificationNameOfficial("official", officialArray.getJsonObject(i), i));
            }
        }
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Name.Official parseSubstanceSpecificationNameOfficial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Name.Official.class, jsonObject);
        }
        SubstanceSpecification.Name.Official.Builder builder = SubstanceSpecification.Name.Official.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authority(parseCodeableConcept("authority", getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Property parseSubstanceSpecificationProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Property.class, jsonObject);
        }
        SubstanceSpecification.Property.Builder builder = SubstanceSpecification.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.parameters(parseString("parameters", getJsonValue(jsonObject, "parameters", JsonString.class), jsonObject.get("_parameters"), -1));
        builder.definingSubstance(parseChoiceElement("definingSubstance", jsonObject, Reference.class, CodeableConcept.class));
        builder.amount(parseChoiceElement("amount", jsonObject, Quantity.class, String.class));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Relationship parseSubstanceSpecificationRelationship(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Relationship.class, jsonObject);
        }
        SubstanceSpecification.Relationship.Builder builder = SubstanceSpecification.Relationship.builder();
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseChoiceElement("substance", jsonObject, Reference.class, CodeableConcept.class));
        builder.relationship(parseCodeableConcept("relationship", getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.isDefining(parseBoolean("isDefining", getJsonValue(jsonObject, "isDefining", JsonValue.class), jsonObject.get("_isDefining"), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, Quantity.class, Range.class, Ratio.class, String.class));
        builder.amountRatioLowLimit(parseRatio("amountRatioLowLimit", getJsonValue(jsonObject, "amountRatioLowLimit", JsonObject.class), -1));
        builder.amountType(parseCodeableConcept("amountType", getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Structure parseSubstanceSpecificationStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Structure.class, jsonObject);
        }
        SubstanceSpecification.Structure.Builder builder = SubstanceSpecification.Structure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.stereochemistry(parseCodeableConcept("stereochemistry", getJsonValue(jsonObject, "stereochemistry", JsonObject.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", getJsonValue(jsonObject, "opticalActivity", JsonObject.class), -1));
        builder.molecularFormula(parseString("molecularFormula", getJsonValue(jsonObject, "molecularFormula", JsonString.class), jsonObject.get("_molecularFormula"), -1));
        builder.molecularFormulaByMoiety(parseString("molecularFormulaByMoiety", getJsonValue(jsonObject, "molecularFormulaByMoiety", JsonString.class), jsonObject.get("_molecularFormulaByMoiety"), -1));
        JsonArray isotopeArray = getJsonArray(jsonObject, "isotope");
        if (isotopeArray != null) {
            for (int i = 0; i < isotopeArray.size(); i++) {
                builder.isotope(parseSubstanceSpecificationStructureIsotope("isotope", isotopeArray.getJsonObject(i), i));
            }
        }
        builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", getJsonValue(jsonObject, "molecularWeight", JsonObject.class), -1));
        JsonArray sourceArray = getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            for (int i = 0; i < sourceArray.size(); i++) {
                builder.source(parseReference("source", sourceArray.getJsonObject(i), i));
            }
        }
        JsonArray representationArray = getJsonArray(jsonObject, "representation");
        if (representationArray != null) {
            for (int i = 0; i < representationArray.size(); i++) {
                builder.representation(parseSubstanceSpecificationStructureRepresentation("representation", representationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Structure.Isotope parseSubstanceSpecificationStructureIsotope(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Structure.Isotope.class, jsonObject);
        }
        SubstanceSpecification.Structure.Isotope.Builder builder = SubstanceSpecification.Structure.Isotope.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseCodeableConcept("name", getJsonValue(jsonObject, "name", JsonObject.class), -1));
        builder.substitution(parseCodeableConcept("substitution", getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        builder.halfLife(parseQuantity("halfLife", getJsonValue(jsonObject, "halfLife", JsonObject.class), -1));
        builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", getJsonValue(jsonObject, "molecularWeight", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Structure.Isotope.MolecularWeight parseSubstanceSpecificationStructureIsotopeMolecularWeight(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Structure.Isotope.MolecularWeight.class, jsonObject);
        }
        SubstanceSpecification.Structure.Isotope.MolecularWeight.Builder builder = SubstanceSpecification.Structure.Isotope.MolecularWeight.builder();
        parseBackboneElement(builder, jsonObject);
        builder.method(parseCodeableConcept("method", getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.amount(parseQuantity("amount", getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SubstanceSpecification.Structure.Representation parseSubstanceSpecificationStructureRepresentation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SubstanceSpecification.Structure.Representation.class, jsonObject);
        }
        SubstanceSpecification.Structure.Representation.Builder builder = SubstanceSpecification.Structure.Representation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.representation(parseString("representation", getJsonValue(jsonObject, "representation", JsonString.class), jsonObject.get("_representation"), -1));
        builder.attachment(parseAttachment("attachment", getJsonValue(jsonObject, "attachment", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SupplyDelivery parseSupplyDelivery(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SupplyDelivery.class, jsonObject);
        }
        SupplyDelivery.Builder builder = SupplyDelivery.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((SupplyDeliveryStatus) parseString(SupplyDeliveryStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.suppliedItem(parseSupplyDeliverySuppliedItem("suppliedItem", getJsonValue(jsonObject, "suppliedItem", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        builder.supplier(parseReference("supplier", getJsonValue(jsonObject, "supplier", JsonObject.class), -1));
        builder.destination(parseReference("destination", getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        JsonArray receiverArray = getJsonArray(jsonObject, "receiver");
        if (receiverArray != null) {
            for (int i = 0; i < receiverArray.size(); i++) {
                builder.receiver(parseReference("receiver", receiverArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private SupplyDelivery.SuppliedItem parseSupplyDeliverySuppliedItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SupplyDelivery.SuppliedItem.class, jsonObject);
        }
        SupplyDelivery.SuppliedItem.Builder builder = SupplyDelivery.SuppliedItem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.item(parseChoiceElement("item", jsonObject, CodeableConcept.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private SupplyRequest parseSupplyRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SupplyRequest.class, jsonObject);
        }
        SupplyRequest.Builder builder = SupplyRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((SupplyRequestStatus) parseString(SupplyRequestStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.category(parseCodeableConcept("category", getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.item(parseChoiceElement("item", jsonObject, CodeableConcept.class, Reference.class));
        builder.quantity(parseQuantity("quantity", getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseSupplyRequestParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, DateTime.class, Period.class, Timing.class));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray supplierArray = getJsonArray(jsonObject, "supplier");
        if (supplierArray != null) {
            for (int i = 0; i < supplierArray.size(); i++) {
                builder.supplier(parseReference("supplier", supplierArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonCodeArray = getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            for (int i = 0; i < reasonCodeArray.size(); i++) {
                builder.reasonCode(parseCodeableConcept("reasonCode", reasonCodeArray.getJsonObject(i), i));
            }
        }
        JsonArray reasonReferenceArray = getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            for (int i = 0; i < reasonReferenceArray.size(); i++) {
                builder.reasonReference(parseReference("reasonReference", reasonReferenceArray.getJsonObject(i), i));
            }
        }
        builder.deliverFrom(parseReference("deliverFrom", getJsonValue(jsonObject, "deliverFrom", JsonObject.class), -1));
        builder.deliverTo(parseReference("deliverTo", getJsonValue(jsonObject, "deliverTo", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private SupplyRequest.Parameter parseSupplyRequestParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(SupplyRequest.Parameter.class, jsonObject);
        }
        SupplyRequest.Parameter.Builder builder = SupplyRequest.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, CodeableConcept.class, Quantity.class, Range.class, Boolean.class));
        stackPop();
        return builder.build();
    }

    private Task parseTask(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Task.class, jsonObject);
        }
        Task.Builder builder = Task.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", getJsonValue(jsonObject, "instantiatesCanonical", JsonString.class), jsonObject.get("_instantiatesCanonical"), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", getJsonValue(jsonObject, "instantiatesUri", JsonString.class), jsonObject.get("_instantiatesUri"), -1));
        JsonArray basedOnArray = getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            for (int i = 0; i < basedOnArray.size(); i++) {
                builder.basedOn(parseReference("basedOn", basedOnArray.getJsonObject(i), i));
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        JsonArray partOfArray = getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            for (int i = 0; i < partOfArray.size(); i++) {
                builder.partOf(parseReference("partOf", partOfArray.getJsonObject(i), i));
            }
        }
        builder.status((TaskStatus) parseString(TaskStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusReason(parseCodeableConcept("statusReason", getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.businessStatus(parseCodeableConcept("businessStatus", getJsonValue(jsonObject, "businessStatus", JsonObject.class), -1));
        builder.intent((TaskIntent) parseString(TaskIntent.builder(), "intent", getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.priority((TaskPriority) parseString(TaskPriority.builder(), "priority", getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.focus(parseReference("focus", getJsonValue(jsonObject, "focus", JsonObject.class), -1));
        builder._for(parseReference("for", getJsonValue(jsonObject, "for", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.executionPeriod(parsePeriod("executionPeriod", getJsonValue(jsonObject, "executionPeriod", JsonObject.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.lastModified(parseDateTime("lastModified", getJsonValue(jsonObject, "lastModified", JsonString.class), jsonObject.get("_lastModified"), -1));
        builder.requester(parseReference("requester", getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray performerTypeArray = getJsonArray(jsonObject, "performerType");
        if (performerTypeArray != null) {
            for (int i = 0; i < performerTypeArray.size(); i++) {
                builder.performerType(parseCodeableConcept("performerType", performerTypeArray.getJsonObject(i), i));
            }
        }
        builder.owner(parseReference("owner", getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        builder.location(parseReference("location", getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.reasonCode(parseCodeableConcept("reasonCode", getJsonValue(jsonObject, "reasonCode", JsonObject.class), -1));
        builder.reasonReference(parseReference("reasonReference", getJsonValue(jsonObject, "reasonReference", JsonObject.class), -1));
        JsonArray insuranceArray = getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            for (int i = 0; i < insuranceArray.size(); i++) {
                builder.insurance(parseReference("insurance", insuranceArray.getJsonObject(i), i));
            }
        }
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        JsonArray relevantHistoryArray = getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            for (int i = 0; i < relevantHistoryArray.size(); i++) {
                builder.relevantHistory(parseReference("relevantHistory", relevantHistoryArray.getJsonObject(i), i));
            }
        }
        builder.restriction(parseTaskRestriction("restriction", getJsonValue(jsonObject, "restriction", JsonObject.class), -1));
        JsonArray inputArray = getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            for (int i = 0; i < inputArray.size(); i++) {
                builder.input(parseTaskInput("input", inputArray.getJsonObject(i), i));
            }
        }
        JsonArray outputArray = getJsonArray(jsonObject, "output");
        if (outputArray != null) {
            for (int i = 0; i < outputArray.size(); i++) {
                builder.output(parseTaskOutput("output", outputArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private Task.Input parseTaskInput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Task.Input.class, jsonObject);
        }
        Task.Input.Builder builder = Task.Input.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private Task.Output parseTaskOutput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Task.Output.class, jsonObject);
        }
        Task.Output.Builder builder = Task.Output.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, Base64Binary.class, Boolean.class, Canonical.class, Code.class, Date.class, DateTime.class, Decimal.class, Id.class, Instant.class, Integer.class, Markdown.class, Oid.class, PositiveInt.class, String.class, Time.class, UnsignedInt.class, Uri.class, Url.class, Uuid.class, Address.class, Age.class, Annotation.class, Attachment.class, CodeableConcept.class, Coding.class, ContactPoint.class, Count.class, Distance.class, Duration.class, HumanName.class, Identifier.class, Money.class, Period.class, Quantity.class, Range.class, Ratio.class, Reference.class, SampledData.class, Signature.class, Timing.class, ContactDetail.class, Contributor.class, DataRequirement.class, Expression.class, ParameterDefinition.class, RelatedArtifact.class, TriggerDefinition.class, UsageContext.class, Dosage.class, Meta.class));
        stackPop();
        return builder.build();
    }

    private Task.Restriction parseTaskRestriction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Task.Restriction.class, jsonObject);
        }
        Task.Restriction.Builder builder = Task.Restriction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.repetitions((PositiveInt) parseInteger(PositiveInt.builder(), "repetitions", getJsonValue(jsonObject, "repetitions", JsonNumber.class), jsonObject.get("_repetitions"), -1));
        builder.period(parsePeriod("period", getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray recipientArray = getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            for (int i = 0; i < recipientArray.size(); i++) {
                builder.recipient(parseReference("recipient", recipientArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities parseTerminologyCapabilities(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.class, jsonObject);
        }
        TerminologyCapabilities.Builder builder = TerminologyCapabilities.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.software(parseTerminologyCapabilitiesSoftware("software", getJsonValue(jsonObject, "software", JsonObject.class), -1));
        builder.implementation(parseTerminologyCapabilitiesImplementation("implementation", getJsonValue(jsonObject, "implementation", JsonObject.class), -1));
        builder.lockedDate(parseBoolean("lockedDate", getJsonValue(jsonObject, "lockedDate", JsonValue.class), jsonObject.get("_lockedDate"), -1));
        JsonArray codeSystemArray = getJsonArray(jsonObject, "codeSystem");
        if (codeSystemArray != null) {
            for (int i = 0; i < codeSystemArray.size(); i++) {
                builder.codeSystem(parseTerminologyCapabilitiesCodeSystem("codeSystem", codeSystemArray.getJsonObject(i), i));
            }
        }
        builder.expansion(parseTerminologyCapabilitiesExpansion("expansion", getJsonValue(jsonObject, "expansion", JsonObject.class), -1));
        builder.codeSearch((CodeSearchSupport) parseString(CodeSearchSupport.builder(), "codeSearch", getJsonValue(jsonObject, "codeSearch", JsonString.class), jsonObject.get("_codeSearch"), -1));
        builder.validateCode(parseTerminologyCapabilitiesValidateCode("validateCode", getJsonValue(jsonObject, "validateCode", JsonObject.class), -1));
        builder.translation(parseTerminologyCapabilitiesTranslation("translation", getJsonValue(jsonObject, "translation", JsonObject.class), -1));
        builder.closure(parseTerminologyCapabilitiesClosure("closure", getJsonValue(jsonObject, "closure", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Closure parseTerminologyCapabilitiesClosure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Closure.class, jsonObject);
        }
        TerminologyCapabilities.Closure.Builder builder = TerminologyCapabilities.Closure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.translation(parseBoolean("translation", getJsonValue(jsonObject, "translation", JsonValue.class), jsonObject.get("_translation"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem parseTerminologyCapabilitiesCodeSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.class, jsonObject);
        }
        TerminologyCapabilities.CodeSystem.Builder builder = TerminologyCapabilities.CodeSystem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.uri((Canonical) parseUri(Canonical.builder(), "uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        JsonArray versionArray = getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            for (int i = 0; i < versionArray.size(); i++) {
                builder.version(parseTerminologyCapabilitiesCodeSystemVersion("version", versionArray.getJsonObject(i), i));
            }
        }
        builder.subsumption(parseBoolean("subsumption", getJsonValue(jsonObject, "subsumption", JsonValue.class), jsonObject.get("_subsumption"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem.Version parseTerminologyCapabilitiesCodeSystemVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.Version.class, jsonObject);
        }
        TerminologyCapabilities.CodeSystem.Version.Builder builder = TerminologyCapabilities.CodeSystem.Version.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseString("code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.isDefault(parseBoolean("isDefault", getJsonValue(jsonObject, "isDefault", JsonValue.class), jsonObject.get("_isDefault"), -1));
        builder.compositional(parseBoolean("compositional", getJsonValue(jsonObject, "compositional", JsonValue.class), jsonObject.get("_compositional"), -1));
        JsonArray languageArray = getJsonArray(jsonObject, "language", true);
        if (languageArray != null) {
            JsonArray _languageArray = jsonObject.getJsonArray("_language");
            for (int i = 0; i < languageArray.size(); i++) {
                builder.language((Code) parseString(Code.builder(), "language", languageArray.get(i), getJsonValue(_languageArray, i), i));
            }
        }
        JsonArray filterArray = getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                builder.filter(parseTerminologyCapabilitiesCodeSystemVersionFilter("filter", filterArray.getJsonObject(i), i));
            }
        }
        JsonArray propertyArray = getJsonArray(jsonObject, "property", true);
        if (propertyArray != null) {
            JsonArray _propertyArray = jsonObject.getJsonArray("_property");
            for (int i = 0; i < propertyArray.size(); i++) {
                builder.property((Code) parseString(Code.builder(), "property", propertyArray.get(i), getJsonValue(_propertyArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.CodeSystem.Version.Filter parseTerminologyCapabilitiesCodeSystemVersionFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.CodeSystem.Version.Filter.class, jsonObject);
        }
        TerminologyCapabilities.CodeSystem.Version.Filter.Builder builder = TerminologyCapabilities.CodeSystem.Version.Filter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        JsonArray opArray = getJsonArray(jsonObject, "op", true);
        if (opArray != null) {
            JsonArray _opArray = jsonObject.getJsonArray("_op");
            for (int i = 0; i < opArray.size(); i++) {
                builder.op((Code) parseString(Code.builder(), "op", opArray.get(i), getJsonValue(_opArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Expansion parseTerminologyCapabilitiesExpansion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Expansion.class, jsonObject);
        }
        TerminologyCapabilities.Expansion.Builder builder = TerminologyCapabilities.Expansion.builder();
        parseBackboneElement(builder, jsonObject);
        builder.hierarchical(parseBoolean("hierarchical", getJsonValue(jsonObject, "hierarchical", JsonValue.class), jsonObject.get("_hierarchical"), -1));
        builder.paging(parseBoolean("paging", getJsonValue(jsonObject, "paging", JsonValue.class), jsonObject.get("_paging"), -1));
        builder.incomplete(parseBoolean("incomplete", getJsonValue(jsonObject, "incomplete", JsonValue.class), jsonObject.get("_incomplete"), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseTerminologyCapabilitiesExpansionParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        builder.textFilter((Markdown) parseString(Markdown.builder(), "textFilter", getJsonValue(jsonObject, "textFilter", JsonString.class), jsonObject.get("_textFilter"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Expansion.Parameter parseTerminologyCapabilitiesExpansionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Expansion.Parameter.class, jsonObject);
        }
        TerminologyCapabilities.Expansion.Parameter.Builder builder = TerminologyCapabilities.Expansion.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name((Code) parseString(Code.builder(), "name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.documentation(parseString("documentation", getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Implementation parseTerminologyCapabilitiesImplementation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Implementation.class, jsonObject);
        }
        TerminologyCapabilities.Implementation.Builder builder = TerminologyCapabilities.Implementation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Software parseTerminologyCapabilitiesSoftware(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Software.class, jsonObject);
        }
        TerminologyCapabilities.Software.Builder builder = TerminologyCapabilities.Software.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.Translation parseTerminologyCapabilitiesTranslation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.Translation.class, jsonObject);
        }
        TerminologyCapabilities.Translation.Builder builder = TerminologyCapabilities.Translation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.needsMap(parseBoolean("needsMap", getJsonValue(jsonObject, "needsMap", JsonValue.class), jsonObject.get("_needsMap"), -1));
        stackPop();
        return builder.build();
    }

    private TerminologyCapabilities.ValidateCode parseTerminologyCapabilitiesValidateCode(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TerminologyCapabilities.ValidateCode.class, jsonObject);
        }
        TerminologyCapabilities.ValidateCode.Builder builder = TerminologyCapabilities.ValidateCode.builder();
        parseBackboneElement(builder, jsonObject);
        builder.translations(parseBoolean("translations", getJsonValue(jsonObject, "translations", JsonValue.class), jsonObject.get("_translations"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport parseTestReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.class, jsonObject);
        }
        TestReport.Builder builder = TestReport.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.status((TestReportStatus) parseString(TestReportStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.testScript(parseReference("testScript", getJsonValue(jsonObject, "testScript", JsonObject.class), -1));
        builder.result((TestReportResult) parseString(TestReportResult.builder(), "result", getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1));
        builder.score(parseDecimal("score", getJsonValue(jsonObject, "score", JsonNumber.class), jsonObject.get("_score"), -1));
        builder.tester(parseString("tester", getJsonValue(jsonObject, "tester", JsonString.class), jsonObject.get("_tester"), -1));
        builder.issued(parseDateTime("issued", getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray participantArray = getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            for (int i = 0; i < participantArray.size(); i++) {
                builder.participant(parseTestReportParticipant("participant", participantArray.getJsonObject(i), i));
            }
        }
        builder.setup(parseTestReportSetup("setup", getJsonValue(jsonObject, "setup", JsonObject.class), -1));
        JsonArray testArray = getJsonArray(jsonObject, "test");
        if (testArray != null) {
            for (int i = 0; i < testArray.size(); i++) {
                builder.test(parseTestReportTest("test", testArray.getJsonObject(i), i));
            }
        }
        builder.teardown(parseTestReportTeardown("teardown", getJsonValue(jsonObject, "teardown", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Participant parseTestReportParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Participant.class, jsonObject);
        }
        TestReport.Participant.Builder builder = TestReport.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((TestReportParticipantType) parseString(TestReportParticipantType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.uri(parseUri("uri", getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup parseTestReportSetup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Setup.class, jsonObject);
        }
        TestReport.Setup.Builder builder = TestReport.Setup.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestReportSetupAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action parseTestReportSetupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Setup.Action.class, jsonObject);
        }
        TestReport.Setup.Action.Builder builder = TestReport.Setup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action.Assert parseTestReportSetupActionAssert(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Setup.Action.Assert.class, jsonObject);
        }
        TestReport.Setup.Action.Assert.Builder builder = TestReport.Setup.Action.Assert.builder();
        parseBackboneElement(builder, jsonObject);
        builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1));
        builder.message((Markdown) parseString(Markdown.builder(), "message", getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1));
        builder.detail(parseString("detail", getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Setup.Action.Operation parseTestReportSetupActionOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Setup.Action.Operation.class, jsonObject);
        }
        TestReport.Setup.Action.Operation.Builder builder = TestReport.Setup.Action.Operation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1));
        builder.message((Markdown) parseString(Markdown.builder(), "message", getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1));
        builder.detail(parseUri("detail", getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Teardown parseTestReportTeardown(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Teardown.class, jsonObject);
        }
        TestReport.Teardown.Builder builder = TestReport.Teardown.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestReportTeardownAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Teardown.Action parseTestReportTeardownAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Teardown.Action.class, jsonObject);
        }
        TestReport.Teardown.Action.Builder builder = TestReport.Teardown.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestReport.Test parseTestReportTest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Test.class, jsonObject);
        }
        TestReport.Test.Builder builder = TestReport.Test.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestReportTestAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestReport.Test.Action parseTestReportTestAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestReport.Test.Action.class, jsonObject);
        }
        TestReport.Test.Action.Builder builder = TestReport.Test.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestReportSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript parseTestScript(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.class, jsonObject);
        }
        TestScript.Builder builder = TestScript.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.identifier(parseIdentifier("identifier", getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray originArray = getJsonArray(jsonObject, "origin");
        if (originArray != null) {
            for (int i = 0; i < originArray.size(); i++) {
                builder.origin(parseTestScriptOrigin("origin", originArray.getJsonObject(i), i));
            }
        }
        JsonArray destinationArray = getJsonArray(jsonObject, "destination");
        if (destinationArray != null) {
            for (int i = 0; i < destinationArray.size(); i++) {
                builder.destination(parseTestScriptDestination("destination", destinationArray.getJsonObject(i), i));
            }
        }
        builder.metadata(parseTestScriptMetadata("metadata", getJsonValue(jsonObject, "metadata", JsonObject.class), -1));
        JsonArray fixtureArray = getJsonArray(jsonObject, "fixture");
        if (fixtureArray != null) {
            for (int i = 0; i < fixtureArray.size(); i++) {
                builder.fixture(parseTestScriptFixture("fixture", fixtureArray.getJsonObject(i), i));
            }
        }
        JsonArray profileArray = getJsonArray(jsonObject, "profile");
        if (profileArray != null) {
            for (int i = 0; i < profileArray.size(); i++) {
                builder.profile(parseReference("profile", profileArray.getJsonObject(i), i));
            }
        }
        JsonArray variableArray = getJsonArray(jsonObject, "variable");
        if (variableArray != null) {
            for (int i = 0; i < variableArray.size(); i++) {
                builder.variable(parseTestScriptVariable("variable", variableArray.getJsonObject(i), i));
            }
        }
        builder.setup(parseTestScriptSetup("setup", getJsonValue(jsonObject, "setup", JsonObject.class), -1));
        JsonArray testArray = getJsonArray(jsonObject, "test");
        if (testArray != null) {
            for (int i = 0; i < testArray.size(); i++) {
                builder.test(parseTestScriptTest("test", testArray.getJsonObject(i), i));
            }
        }
        builder.teardown(parseTestScriptTeardown("teardown", getJsonValue(jsonObject, "teardown", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Destination parseTestScriptDestination(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Destination.class, jsonObject);
        }
        TestScript.Destination.Builder builder = TestScript.Destination.builder();
        parseBackboneElement(builder, jsonObject);
        builder.index(parseInteger("index", getJsonValue(jsonObject, "index", JsonNumber.class), jsonObject.get("_index"), -1));
        builder.profile(parseCoding("profile", getJsonValue(jsonObject, "profile", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Fixture parseTestScriptFixture(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Fixture.class, jsonObject);
        }
        TestScript.Fixture.Builder builder = TestScript.Fixture.builder();
        parseBackboneElement(builder, jsonObject);
        builder.autocreate(parseBoolean("autocreate", getJsonValue(jsonObject, "autocreate", JsonValue.class), jsonObject.get("_autocreate"), -1));
        builder.autodelete(parseBoolean("autodelete", getJsonValue(jsonObject, "autodelete", JsonValue.class), jsonObject.get("_autodelete"), -1));
        builder.resource(parseReference("resource", getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata parseTestScriptMetadata(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Metadata.class, jsonObject);
        }
        TestScript.Metadata.Builder builder = TestScript.Metadata.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray linkArray = getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseTestScriptMetadataLink("link", linkArray.getJsonObject(i), i));
            }
        }
        JsonArray capabilityArray = getJsonArray(jsonObject, "capability");
        if (capabilityArray != null) {
            for (int i = 0; i < capabilityArray.size(); i++) {
                builder.capability(parseTestScriptMetadataCapability("capability", capabilityArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata.Capability parseTestScriptMetadataCapability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Metadata.Capability.class, jsonObject);
        }
        TestScript.Metadata.Capability.Builder builder = TestScript.Metadata.Capability.builder();
        parseBackboneElement(builder, jsonObject);
        builder.required(parseBoolean("required", getJsonValue(jsonObject, "required", JsonValue.class), jsonObject.get("_required"), -1));
        builder.validated(parseBoolean("validated", getJsonValue(jsonObject, "validated", JsonValue.class), jsonObject.get("_validated"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray originArray = getJsonArray(jsonObject, "origin", true);
        if (originArray != null) {
            JsonArray _originArray = jsonObject.getJsonArray("_origin");
            for (int i = 0; i < originArray.size(); i++) {
                builder.origin(parseInteger("origin", originArray.get(i), getJsonValue(_originArray, i), i));
            }
        }
        builder.destination(parseInteger("destination", getJsonValue(jsonObject, "destination", JsonNumber.class), jsonObject.get("_destination"), -1));
        JsonArray linkArray = getJsonArray(jsonObject, "link", true);
        if (linkArray != null) {
            JsonArray _linkArray = jsonObject.getJsonArray("_link");
            for (int i = 0; i < linkArray.size(); i++) {
                builder.link(parseUri("link", linkArray.get(i), getJsonValue(_linkArray, i), i));
            }
        }
        builder.capabilities((Canonical) parseUri(Canonical.builder(), "capabilities", getJsonValue(jsonObject, "capabilities", JsonString.class), jsonObject.get("_capabilities"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Metadata.Link parseTestScriptMetadataLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Metadata.Link.class, jsonObject);
        }
        TestScript.Metadata.Link.Builder builder = TestScript.Metadata.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Origin parseTestScriptOrigin(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Origin.class, jsonObject);
        }
        TestScript.Origin.Builder builder = TestScript.Origin.builder();
        parseBackboneElement(builder, jsonObject);
        builder.index(parseInteger("index", getJsonValue(jsonObject, "index", JsonNumber.class), jsonObject.get("_index"), -1));
        builder.profile(parseCoding("profile", getJsonValue(jsonObject, "profile", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup parseTestScriptSetup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Setup.class, jsonObject);
        }
        TestScript.Setup.Builder builder = TestScript.Setup.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestScriptSetupAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action parseTestScriptSetupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Setup.Action.class, jsonObject);
        }
        TestScript.Setup.Action.Builder builder = TestScript.Setup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Assert parseTestScriptSetupActionAssert(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Assert.class, jsonObject);
        }
        TestScript.Setup.Action.Assert.Builder builder = TestScript.Setup.Action.Assert.builder();
        parseBackboneElement(builder, jsonObject);
        builder.label(parseString("label", getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.direction((AssertionDirectionType) parseString(AssertionDirectionType.builder(), "direction", getJsonValue(jsonObject, "direction", JsonString.class), jsonObject.get("_direction"), -1));
        builder.compareToSourceId(parseString("compareToSourceId", getJsonValue(jsonObject, "compareToSourceId", JsonString.class), jsonObject.get("_compareToSourceId"), -1));
        builder.compareToSourceExpression(parseString("compareToSourceExpression", getJsonValue(jsonObject, "compareToSourceExpression", JsonString.class), jsonObject.get("_compareToSourceExpression"), -1));
        builder.compareToSourcePath(parseString("compareToSourcePath", getJsonValue(jsonObject, "compareToSourcePath", JsonString.class), jsonObject.get("_compareToSourcePath"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.headerField(parseString("headerField", getJsonValue(jsonObject, "headerField", JsonString.class), jsonObject.get("_headerField"), -1));
        builder.minimumId(parseString("minimumId", getJsonValue(jsonObject, "minimumId", JsonString.class), jsonObject.get("_minimumId"), -1));
        builder.navigationLinks(parseBoolean("navigationLinks", getJsonValue(jsonObject, "navigationLinks", JsonValue.class), jsonObject.get("_navigationLinks"), -1));
        builder.operator((AssertionOperatorType) parseString(AssertionOperatorType.builder(), "operator", getJsonValue(jsonObject, "operator", JsonString.class), jsonObject.get("_operator"), -1));
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.requestMethod((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "requestMethod", getJsonValue(jsonObject, "requestMethod", JsonString.class), jsonObject.get("_requestMethod"), -1));
        builder.requestURL(parseString("requestURL", getJsonValue(jsonObject, "requestURL", JsonString.class), jsonObject.get("_requestURL"), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        builder.response((AssertionResponseTypes) parseString(AssertionResponseTypes.builder(), "response", getJsonValue(jsonObject, "response", JsonString.class), jsonObject.get("_response"), -1));
        builder.responseCode(parseString("responseCode", getJsonValue(jsonObject, "responseCode", JsonString.class), jsonObject.get("_responseCode"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        builder.validateProfileId((Id) parseString(Id.builder(), "validateProfileId", getJsonValue(jsonObject, "validateProfileId", JsonString.class), jsonObject.get("_validateProfileId"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.warningOnly(parseBoolean("warningOnly", getJsonValue(jsonObject, "warningOnly", JsonValue.class), jsonObject.get("_warningOnly"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Operation parseTestScriptSetupActionOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Operation.class, jsonObject);
        }
        TestScript.Setup.Action.Operation.Builder builder = TestScript.Setup.Action.Operation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCoding("type", getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        builder.label(parseString("label", getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.accept((Code) parseString(Code.builder(), "accept", getJsonValue(jsonObject, "accept", JsonString.class), jsonObject.get("_accept"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.destination(parseInteger("destination", getJsonValue(jsonObject, "destination", JsonNumber.class), jsonObject.get("_destination"), -1));
        builder.encodeRequestUrl(parseBoolean("encodeRequestUrl", getJsonValue(jsonObject, "encodeRequestUrl", JsonValue.class), jsonObject.get("_encodeRequestUrl"), -1));
        builder.method((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "method", getJsonValue(jsonObject, "method", JsonString.class), jsonObject.get("_method"), -1));
        builder.origin(parseInteger("origin", getJsonValue(jsonObject, "origin", JsonNumber.class), jsonObject.get("_origin"), -1));
        builder.params(parseString("params", getJsonValue(jsonObject, "params", JsonString.class), jsonObject.get("_params"), -1));
        JsonArray requestHeaderArray = getJsonArray(jsonObject, "requestHeader");
        if (requestHeaderArray != null) {
            for (int i = 0; i < requestHeaderArray.size(); i++) {
                builder.requestHeader(parseTestScriptSetupActionOperationRequestHeader("requestHeader", requestHeaderArray.getJsonObject(i), i));
            }
        }
        builder.requestId((Id) parseString(Id.builder(), "requestId", getJsonValue(jsonObject, "requestId", JsonString.class), jsonObject.get("_requestId"), -1));
        builder.responseId((Id) parseString(Id.builder(), "responseId", getJsonValue(jsonObject, "responseId", JsonString.class), jsonObject.get("_responseId"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        builder.targetId((Id) parseString(Id.builder(), "targetId", getJsonValue(jsonObject, "targetId", JsonString.class), jsonObject.get("_targetId"), -1));
        builder.url(parseString("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Setup.Action.Operation.RequestHeader parseTestScriptSetupActionOperationRequestHeader(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Setup.Action.Operation.RequestHeader.class, jsonObject);
        }
        TestScript.Setup.Action.Operation.RequestHeader.Builder builder = TestScript.Setup.Action.Operation.RequestHeader.builder();
        parseBackboneElement(builder, jsonObject);
        builder.field(parseString("field", getJsonValue(jsonObject, "field", JsonString.class), jsonObject.get("_field"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Teardown parseTestScriptTeardown(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Teardown.class, jsonObject);
        }
        TestScript.Teardown.Builder builder = TestScript.Teardown.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestScriptTeardownAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Teardown.Action parseTestScriptTeardownAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Teardown.Action.class, jsonObject);
        }
        TestScript.Teardown.Action.Builder builder = TestScript.Teardown.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Test parseTestScriptTest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Test.class, jsonObject);
        }
        TestScript.Test.Builder builder = TestScript.Test.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray actionArray = getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            for (int i = 0; i < actionArray.size(); i++) {
                builder.action(parseTestScriptTestAction("action", actionArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private TestScript.Test.Action parseTestScriptTestAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Test.Action.class, jsonObject);
        }
        TestScript.Test.Action.Builder builder = TestScript.Test.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestScriptSetupActionOperation("operation", getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private TestScript.Variable parseTestScriptVariable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TestScript.Variable.class, jsonObject);
        }
        TestScript.Variable.Builder builder = TestScript.Variable.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.defaultValue(parseString("defaultValue", getJsonValue(jsonObject, "defaultValue", JsonString.class), jsonObject.get("_defaultValue"), -1));
        builder.description(parseString("description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.expression(parseString("expression", getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.headerField(parseString("headerField", getJsonValue(jsonObject, "headerField", JsonString.class), jsonObject.get("_headerField"), -1));
        builder.hint(parseString("hint", getJsonValue(jsonObject, "hint", JsonString.class), jsonObject.get("_hint"), -1));
        builder.path(parseString("path", getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    private Time parseTime(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Time.Builder builder = Time.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Timing parseTiming(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Timing.class, jsonObject);
        }
        Timing.Builder builder = Timing.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray eventArray = getJsonArray(jsonObject, "event", true);
        if (eventArray != null) {
            JsonArray _eventArray = jsonObject.getJsonArray("_event");
            for (int i = 0; i < eventArray.size(); i++) {
                builder.event(parseDateTime("event", eventArray.get(i), getJsonValue(_eventArray, i), i));
            }
        }
        builder.repeat(parseTimingRepeat("repeat", getJsonValue(jsonObject, "repeat", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Timing.Repeat parseTimingRepeat(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(Timing.Repeat.class, jsonObject);
        }
        Timing.Repeat.Builder builder = Timing.Repeat.builder();
        parseBackboneElement(builder, jsonObject);
        builder.bounds(parseChoiceElement("bounds", jsonObject, Duration.class, Range.class, Period.class));
        builder.count((PositiveInt) parseInteger(PositiveInt.builder(), "count", getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.countMax((PositiveInt) parseInteger(PositiveInt.builder(), "countMax", getJsonValue(jsonObject, "countMax", JsonNumber.class), jsonObject.get("_countMax"), -1));
        builder.duration(parseDecimal("duration", getJsonValue(jsonObject, "duration", JsonNumber.class), jsonObject.get("_duration"), -1));
        builder.durationMax(parseDecimal("durationMax", getJsonValue(jsonObject, "durationMax", JsonNumber.class), jsonObject.get("_durationMax"), -1));
        builder.durationUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "durationUnit", getJsonValue(jsonObject, "durationUnit", JsonString.class), jsonObject.get("_durationUnit"), -1));
        builder.frequency((PositiveInt) parseInteger(PositiveInt.builder(), "frequency", getJsonValue(jsonObject, "frequency", JsonNumber.class), jsonObject.get("_frequency"), -1));
        builder.frequencyMax((PositiveInt) parseInteger(PositiveInt.builder(), "frequencyMax", getJsonValue(jsonObject, "frequencyMax", JsonNumber.class), jsonObject.get("_frequencyMax"), -1));
        builder.period(parseDecimal("period", getJsonValue(jsonObject, "period", JsonNumber.class), jsonObject.get("_period"), -1));
        builder.periodMax(parseDecimal("periodMax", getJsonValue(jsonObject, "periodMax", JsonNumber.class), jsonObject.get("_periodMax"), -1));
        builder.periodUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "periodUnit", getJsonValue(jsonObject, "periodUnit", JsonString.class), jsonObject.get("_periodUnit"), -1));
        JsonArray dayOfWeekArray = getJsonArray(jsonObject, "dayOfWeek", true);
        if (dayOfWeekArray != null) {
            JsonArray _dayOfWeekArray = jsonObject.getJsonArray("_dayOfWeek");
            for (int i = 0; i < dayOfWeekArray.size(); i++) {
                builder.dayOfWeek((DayOfWeek) parseString(DayOfWeek.builder(), "dayOfWeek", dayOfWeekArray.get(i), getJsonValue(_dayOfWeekArray, i), i));
            }
        }
        JsonArray timeOfDayArray = getJsonArray(jsonObject, "timeOfDay", true);
        if (timeOfDayArray != null) {
            JsonArray _timeOfDayArray = jsonObject.getJsonArray("_timeOfDay");
            for (int i = 0; i < timeOfDayArray.size(); i++) {
                builder.timeOfDay(parseTime("timeOfDay", timeOfDayArray.get(i), getJsonValue(_timeOfDayArray, i), i));
            }
        }
        JsonArray whenArray = getJsonArray(jsonObject, "when", true);
        if (whenArray != null) {
            JsonArray _whenArray = jsonObject.getJsonArray("_when");
            for (int i = 0; i < whenArray.size(); i++) {
                builder.when((EventTiming) parseString(EventTiming.builder(), "when", whenArray.get(i), getJsonValue(_whenArray, i), i));
            }
        }
        builder.offset((UnsignedInt) parseInteger(UnsignedInt.builder(), "offset", getJsonValue(jsonObject, "offset", JsonNumber.class), jsonObject.get("_offset"), -1));
        stackPop();
        return builder.build();
    }

    private TriggerDefinition parseTriggerDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(TriggerDefinition.class, jsonObject);
        }
        TriggerDefinition.Builder builder = TriggerDefinition.builder();
        parseElement(builder, jsonObject);
        builder.type((TriggerType) parseString(TriggerType.builder(), "type", getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, Timing.class, Reference.class, Date.class, DateTime.class));
        JsonArray dataArray = getJsonArray(jsonObject, "data");
        if (dataArray != null) {
            for (int i = 0; i < dataArray.size(); i++) {
                builder.data(parseDataRequirement("data", dataArray.getJsonObject(i), i));
            }
        }
        builder.condition(parseExpression("condition", getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private Uri parseUri(Uri.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private Uri parseUri(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseUri(Uri.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    private UsageContext parseUsageContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(UsageContext.class, jsonObject);
        }
        UsageContext.Builder builder = UsageContext.builder();
        parseElement(builder, jsonObject);
        builder.code(parseCoding("code", getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, CodeableConcept.class, Quantity.class, Range.class, Reference.class));
        stackPop();
        return builder.build();
    }

    private ValueSet parseValueSet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.class, jsonObject);
        }
        ValueSet.Builder builder = ValueSet.builder();
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.experimental(parseBoolean("experimental", getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            for (int i = 0; i < contactArray.size(); i++) {
                builder.contact(parseContactDetail("contact", contactArray.getJsonObject(i), i));
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            for (int i = 0; i < useContextArray.size(); i++) {
                builder.useContext(parseUsageContext("useContext", useContextArray.getJsonObject(i), i));
            }
        }
        JsonArray jurisdictionArray = getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            for (int i = 0; i < jurisdictionArray.size(); i++) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", jurisdictionArray.getJsonObject(i), i));
            }
        }
        builder.immutable(parseBoolean("immutable", getJsonValue(jsonObject, "immutable", JsonValue.class), jsonObject.get("_immutable"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.compose(parseValueSetCompose("compose", getJsonValue(jsonObject, "compose", JsonObject.class), -1));
        builder.expansion(parseValueSetExpansion("expansion", getJsonValue(jsonObject, "expansion", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose parseValueSetCompose(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Compose.class, jsonObject);
        }
        ValueSet.Compose.Builder builder = ValueSet.Compose.builder();
        parseBackboneElement(builder, jsonObject);
        builder.lockedDate(parseDate("lockedDate", getJsonValue(jsonObject, "lockedDate", JsonString.class), jsonObject.get("_lockedDate"), -1));
        builder.inactive(parseBoolean("inactive", getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        JsonArray includeArray = getJsonArray(jsonObject, "include");
        if (includeArray != null) {
            for (int i = 0; i < includeArray.size(); i++) {
                builder.include(parseValueSetComposeInclude("include", includeArray.getJsonObject(i), i));
            }
        }
        JsonArray excludeArray = getJsonArray(jsonObject, "exclude");
        if (excludeArray != null) {
            for (int i = 0; i < excludeArray.size(); i++) {
                builder.exclude(parseValueSetComposeInclude("exclude", excludeArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include parseValueSetComposeInclude(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.class, jsonObject);
        }
        ValueSet.Compose.Include.Builder builder = ValueSet.Compose.Include.builder();
        parseBackboneElement(builder, jsonObject);
        builder.system(parseUri("system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        JsonArray conceptArray = getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            for (int i = 0; i < conceptArray.size(); i++) {
                builder.concept(parseValueSetComposeIncludeConcept("concept", conceptArray.getJsonObject(i), i));
            }
        }
        JsonArray filterArray = getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            for (int i = 0; i < filterArray.size(); i++) {
                builder.filter(parseValueSetComposeIncludeFilter("filter", filterArray.getJsonObject(i), i));
            }
        }
        JsonArray valueSetArray = getJsonArray(jsonObject, "valueSet", true);
        if (valueSetArray != null) {
            JsonArray _valueSetArray = jsonObject.getJsonArray("_valueSet");
            for (int i = 0; i < valueSetArray.size(); i++) {
                builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", valueSetArray.get(i), getJsonValue(_valueSetArray, i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Concept parseValueSetComposeIncludeConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Concept.class, jsonObject);
        }
        ValueSet.Compose.Include.Concept.Builder builder = ValueSet.Compose.Include.Concept.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray designationArray = getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", designationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Concept.Designation parseValueSetComposeIncludeConceptDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Concept.Designation.class, jsonObject);
        }
        ValueSet.Compose.Include.Concept.Designation.Builder builder = ValueSet.Compose.Include.Concept.Designation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.language((Code) parseString(Code.builder(), "language", getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.use(parseCoding("use", getJsonValue(jsonObject, "use", JsonObject.class), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Compose.Include.Filter parseValueSetComposeIncludeFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Compose.Include.Filter.class, jsonObject);
        }
        ValueSet.Compose.Include.Filter.Builder builder = ValueSet.Compose.Include.Filter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.property((Code) parseString(Code.builder(), "property", getJsonValue(jsonObject, "property", JsonString.class), jsonObject.get("_property"), -1));
        builder.op((FilterOperator) parseString(FilterOperator.builder(), "op", getJsonValue(jsonObject, "op", JsonString.class), jsonObject.get("_op"), -1));
        builder.value(parseString("value", getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion parseValueSetExpansion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Expansion.class, jsonObject);
        }
        ValueSet.Expansion.Builder builder = ValueSet.Expansion.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseUri("identifier", getJsonValue(jsonObject, "identifier", JsonString.class), jsonObject.get("_identifier"), -1));
        builder.timestamp(parseDateTime("timestamp", getJsonValue(jsonObject, "timestamp", JsonString.class), jsonObject.get("_timestamp"), -1));
        builder.total(parseInteger("total", getJsonValue(jsonObject, "total", JsonNumber.class), jsonObject.get("_total"), -1));
        builder.offset(parseInteger("offset", getJsonValue(jsonObject, "offset", JsonNumber.class), jsonObject.get("_offset"), -1));
        JsonArray parameterArray = getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            for (int i = 0; i < parameterArray.size(); i++) {
                builder.parameter(parseValueSetExpansionParameter("parameter", parameterArray.getJsonObject(i), i));
            }
        }
        JsonArray containsArray = getJsonArray(jsonObject, "contains");
        if (containsArray != null) {
            for (int i = 0; i < containsArray.size(); i++) {
                builder.contains(parseValueSetExpansionContains("contains", containsArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion.Contains parseValueSetExpansionContains(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Expansion.Contains.class, jsonObject);
        }
        ValueSet.Expansion.Contains.Builder builder = ValueSet.Expansion.Contains.builder();
        parseBackboneElement(builder, jsonObject);
        builder.system(parseUri("system", getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder._abstract(parseBoolean("abstract", getJsonValue(jsonObject, "abstract", JsonValue.class), jsonObject.get("_abstract"), -1));
        builder.inactive(parseBoolean("inactive", getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        builder.version(parseString("version", getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray designationArray = getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            for (int i = 0; i < designationArray.size(); i++) {
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", designationArray.getJsonObject(i), i));
            }
        }
        JsonArray containsArray = getJsonArray(jsonObject, "contains");
        if (containsArray != null) {
            for (int i = 0; i < containsArray.size(); i++) {
                builder.contains(parseValueSetExpansionContains("contains", containsArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private ValueSet.Expansion.Parameter parseValueSetExpansionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(ValueSet.Expansion.Parameter.class, jsonObject);
        }
        ValueSet.Expansion.Parameter.Builder builder = ValueSet.Expansion.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.value(parseChoiceElement("value", jsonObject, String.class, Boolean.class, Integer.class, Decimal.class, Uri.class, Code.class, DateTime.class));
        stackPop();
        return builder.build();
    }

    private VerificationResult parseVerificationResult(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VerificationResult.class, jsonObject);
        }
        VerificationResult.Builder builder = VerificationResult.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray targetArray = getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            for (int i = 0; i < targetArray.size(); i++) {
                builder.target(parseReference("target", targetArray.getJsonObject(i), i));
            }
        }
        JsonArray targetLocationArray = getJsonArray(jsonObject, "targetLocation", true);
        if (targetLocationArray != null) {
            JsonArray _targetLocationArray = jsonObject.getJsonArray("_targetLocation");
            for (int i = 0; i < targetLocationArray.size(); i++) {
                builder.targetLocation(parseString("targetLocation", targetLocationArray.get(i), getJsonValue(_targetLocationArray, i), i));
            }
        }
        builder.need(parseCodeableConcept("need", getJsonValue(jsonObject, "need", JsonObject.class), -1));
        builder.status((Status) parseString(Status.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.statusDate(parseDateTime("statusDate", getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.validationType(parseCodeableConcept("validationType", getJsonValue(jsonObject, "validationType", JsonObject.class), -1));
        JsonArray validationProcessArray = getJsonArray(jsonObject, "validationProcess");
        if (validationProcessArray != null) {
            for (int i = 0; i < validationProcessArray.size(); i++) {
                builder.validationProcess(parseCodeableConcept("validationProcess", validationProcessArray.getJsonObject(i), i));
            }
        }
        builder.frequency(parseTiming("frequency", getJsonValue(jsonObject, "frequency", JsonObject.class), -1));
        builder.lastPerformed(parseDateTime("lastPerformed", getJsonValue(jsonObject, "lastPerformed", JsonString.class), jsonObject.get("_lastPerformed"), -1));
        builder.nextScheduled(parseDate("nextScheduled", getJsonValue(jsonObject, "nextScheduled", JsonString.class), jsonObject.get("_nextScheduled"), -1));
        builder.failureAction(parseCodeableConcept("failureAction", getJsonValue(jsonObject, "failureAction", JsonObject.class), -1));
        JsonArray primarySourceArray = getJsonArray(jsonObject, "primarySource");
        if (primarySourceArray != null) {
            for (int i = 0; i < primarySourceArray.size(); i++) {
                builder.primarySource(parseVerificationResultPrimarySource("primarySource", primarySourceArray.getJsonObject(i), i));
            }
        }
        builder.attestation(parseVerificationResultAttestation("attestation", getJsonValue(jsonObject, "attestation", JsonObject.class), -1));
        JsonArray validatorArray = getJsonArray(jsonObject, "validator");
        if (validatorArray != null) {
            for (int i = 0; i < validatorArray.size(); i++) {
                builder.validator(parseVerificationResultValidator("validator", validatorArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VerificationResult.Attestation parseVerificationResultAttestation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VerificationResult.Attestation.class, jsonObject);
        }
        VerificationResult.Attestation.Builder builder = VerificationResult.Attestation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.who(parseReference("who", getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.communicationMethod(parseCodeableConcept("communicationMethod", getJsonValue(jsonObject, "communicationMethod", JsonObject.class), -1));
        builder.date(parseDate("date", getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.sourceIdentityCertificate(parseString("sourceIdentityCertificate", getJsonValue(jsonObject, "sourceIdentityCertificate", JsonString.class), jsonObject.get("_sourceIdentityCertificate"), -1));
        builder.proxyIdentityCertificate(parseString("proxyIdentityCertificate", getJsonValue(jsonObject, "proxyIdentityCertificate", JsonString.class), jsonObject.get("_proxyIdentityCertificate"), -1));
        builder.proxySignature(parseSignature("proxySignature", getJsonValue(jsonObject, "proxySignature", JsonObject.class), -1));
        builder.sourceSignature(parseSignature("sourceSignature", getJsonValue(jsonObject, "sourceSignature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private VerificationResult.PrimarySource parseVerificationResultPrimarySource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VerificationResult.PrimarySource.class, jsonObject);
        }
        VerificationResult.PrimarySource.Builder builder = VerificationResult.PrimarySource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.who(parseReference("who", getJsonValue(jsonObject, "who", JsonObject.class), -1));
        JsonArray typeArray = getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            for (int i = 0; i < typeArray.size(); i++) {
                builder.type(parseCodeableConcept("type", typeArray.getJsonObject(i), i));
            }
        }
        JsonArray communicationMethodArray = getJsonArray(jsonObject, "communicationMethod");
        if (communicationMethodArray != null) {
            for (int i = 0; i < communicationMethodArray.size(); i++) {
                builder.communicationMethod(parseCodeableConcept("communicationMethod", communicationMethodArray.getJsonObject(i), i));
            }
        }
        builder.validationStatus(parseCodeableConcept("validationStatus", getJsonValue(jsonObject, "validationStatus", JsonObject.class), -1));
        builder.validationDate(parseDateTime("validationDate", getJsonValue(jsonObject, "validationDate", JsonString.class), jsonObject.get("_validationDate"), -1));
        builder.canPushUpdates(parseCodeableConcept("canPushUpdates", getJsonValue(jsonObject, "canPushUpdates", JsonObject.class), -1));
        JsonArray pushTypeAvailableArray = getJsonArray(jsonObject, "pushTypeAvailable");
        if (pushTypeAvailableArray != null) {
            for (int i = 0; i < pushTypeAvailableArray.size(); i++) {
                builder.pushTypeAvailable(parseCodeableConcept("pushTypeAvailable", pushTypeAvailableArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VerificationResult.Validator parseVerificationResultValidator(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VerificationResult.Validator.class, jsonObject);
        }
        VerificationResult.Validator.Builder builder = VerificationResult.Validator.builder();
        parseBackboneElement(builder, jsonObject);
        builder.organization(parseReference("organization", getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.identityCertificate(parseString("identityCertificate", getJsonValue(jsonObject, "identityCertificate", JsonString.class), jsonObject.get("_identityCertificate"), -1));
        builder.attestationSignature(parseSignature("attestationSignature", getJsonValue(jsonObject, "attestationSignature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    private VisionPrescription parseVisionPrescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VisionPrescription.class, jsonObject);
        }
        VisionPrescription.Builder builder = VisionPrescription.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            for (int i = 0; i < identifierArray.size(); i++) {
                builder.identifier(parseIdentifier("identifier", identifierArray.getJsonObject(i), i));
            }
        }
        builder.status((VisionStatus) parseString(VisionStatus.builder(), "status", getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.created(parseDateTime("created", getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.patient(parseReference("patient", getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.dateWritten(parseDateTime("dateWritten", getJsonValue(jsonObject, "dateWritten", JsonString.class), jsonObject.get("_dateWritten"), -1));
        builder.prescriber(parseReference("prescriber", getJsonValue(jsonObject, "prescriber", JsonObject.class), -1));
        JsonArray lensSpecificationArray = getJsonArray(jsonObject, "lensSpecification");
        if (lensSpecificationArray != null) {
            for (int i = 0; i < lensSpecificationArray.size(); i++) {
                builder.lensSpecification(parseVisionPrescriptionLensSpecification("lensSpecification", lensSpecificationArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VisionPrescription.LensSpecification parseVisionPrescriptionLensSpecification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VisionPrescription.LensSpecification.class, jsonObject);
        }
        VisionPrescription.LensSpecification.Builder builder = VisionPrescription.LensSpecification.builder();
        parseBackboneElement(builder, jsonObject);
        builder.product(parseCodeableConcept("product", getJsonValue(jsonObject, "product", JsonObject.class), -1));
        builder.eye((VisionEyes) parseString(VisionEyes.builder(), "eye", getJsonValue(jsonObject, "eye", JsonString.class), jsonObject.get("_eye"), -1));
        builder.sphere(parseDecimal("sphere", getJsonValue(jsonObject, "sphere", JsonNumber.class), jsonObject.get("_sphere"), -1));
        builder.cylinder(parseDecimal("cylinder", getJsonValue(jsonObject, "cylinder", JsonNumber.class), jsonObject.get("_cylinder"), -1));
        builder.axis(parseInteger("axis", getJsonValue(jsonObject, "axis", JsonNumber.class), jsonObject.get("_axis"), -1));
        JsonArray prismArray = getJsonArray(jsonObject, "prism");
        if (prismArray != null) {
            for (int i = 0; i < prismArray.size(); i++) {
                builder.prism(parseVisionPrescriptionLensSpecificationPrism("prism", prismArray.getJsonObject(i), i));
            }
        }
        builder.add(parseDecimal("add", getJsonValue(jsonObject, "add", JsonNumber.class), jsonObject.get("_add"), -1));
        builder.power(parseDecimal("power", getJsonValue(jsonObject, "power", JsonNumber.class), jsonObject.get("_power"), -1));
        builder.backCurve(parseDecimal("backCurve", getJsonValue(jsonObject, "backCurve", JsonNumber.class), jsonObject.get("_backCurve"), -1));
        builder.diameter(parseDecimal("diameter", getJsonValue(jsonObject, "diameter", JsonNumber.class), jsonObject.get("_diameter"), -1));
        builder.duration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "duration", getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        builder.color(parseString("color", getJsonValue(jsonObject, "color", JsonString.class), jsonObject.get("_color"), -1));
        builder.brand(parseString("brand", getJsonValue(jsonObject, "brand", JsonString.class), jsonObject.get("_brand"), -1));
        JsonArray noteArray = getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            for (int i = 0; i < noteArray.size(); i++) {
                builder.note(parseAnnotation("note", noteArray.getJsonObject(i), i));
            }
        }
        stackPop();
        return builder.build();
    }

    private VisionPrescription.LensSpecification.Prism parseVisionPrescriptionLensSpecificationPrism(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
            checkForUnrecognizedElements(VisionPrescription.LensSpecification.Prism.class, jsonObject);
        }
        VisionPrescription.LensSpecification.Prism.Builder builder = VisionPrescription.LensSpecification.Prism.builder();
        parseBackboneElement(builder, jsonObject);
        builder.amount(parseDecimal("amount", getJsonValue(jsonObject, "amount", JsonNumber.class), jsonObject.get("_amount"), -1));
        builder.base((VisionBase) parseString(VisionBase.builder(), "base", getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1));
        stackPop();
        return builder.build();
    }

    private Xhtml parseXhtml(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Xhtml.Builder builder = Xhtml.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            if (getPropertyOrDefault(FHIRParser.PROPERTY_IGNORE_UNRECOGNIZED_ELEMENTS, java.lang.Boolean.FALSE, java.lang.Boolean.class) == false) {
                checkForUnrecognizedElements(Element.class, jsonObject);
            }
            parseElement(builder, jsonObject);
        } else if (_jsonValue != null && (_jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: OBJECT but found: " + _jsonValue.getValueType() + " for element: _" + elementName);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        } else if (jsonValue != null && (jsonValue.getValueType() != JsonValue.ValueType.NULL || elementIndex == -1)) {
            throw new IllegalArgumentException("Expected: STRING but found: " + jsonValue.getValueType() + " for element: " + elementName);
        }
        stackPop();
        return builder.build();
    }

    private void stackPush(java.lang.String elementName, int elementIndex) {
        if (elementIndex != -1) {
            stack.push(elementName + "[" + elementIndex + "]");
        } else {
            stack.push(elementName);
        }
        if (DEBUG) {
            System.out.println(getPath());
        }
    }

    private void stackPop() {
        stack.pop();
    }

    private Element parseChoiceElement(java.lang.String name, JsonObject jsonObject, Class<?>... choiceTypes) {
        if (jsonObject == null) {
            return null;
        }

        java.lang.String elementName = null;
        java.lang.String _elementName = null;
        Class<?> elementType = null;

        for (Class<?> choiceType : choiceTypes) {
            java.lang.String key = getChoiceElementName(name, choiceType);
            if (jsonObject.containsKey(key)) {
                if (elementName != null) {
                    throw new IllegalArgumentException("Only one choice element key of the form: " + name + "[x] is allowed");
                }
                elementName = key;
                elementType = choiceType;
            }

            java.lang.String _key = "_" + key;
            if (jsonObject.containsKey(_key)) {
                if (_elementName != null) {
                    throw new IllegalArgumentException("Only one choice element key of the form: _" + name + "[x] is allowed");
                }
                _elementName = _key;
                if (elementType == null) {
                    elementType = choiceType;
                }
            }
        }

        if (elementName != null && _elementName != null && !_elementName.endsWith(elementName)) {
            throw new IllegalArgumentException("Choice element keys: " + elementName + " and " + _elementName + " are not consistent");
        }

        JsonValue jsonValue = null;
        if (elementName != null) {
            jsonValue = jsonObject.get(elementName);
        }

        JsonValue _jsonValue = null;
        if (_elementName != null) {
            _jsonValue = jsonObject.get(_elementName);
        }

        if (elementType != null) {
            switch (elementType.getSimpleName()) {
            case "Base64Binary":
                return parseBase64Binary(elementName, jsonValue, _jsonValue, -1);
            case "Boolean":
                return parseBoolean(elementName, jsonValue, _jsonValue, -1);
            case "Canonical":
                return parseUri(Canonical.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Code":
                return parseString(Code.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Date":
                return parseDate(elementName, jsonValue, _jsonValue, -1);
            case "DateTime":
                return parseDateTime(elementName, jsonValue, _jsonValue, -1);
            case "Decimal":
                return parseDecimal(elementName, jsonValue, _jsonValue, -1);
            case "Id":
                return parseString(Id.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Instant":
                return parseInstant(elementName, jsonValue, _jsonValue, -1);
            case "Integer":
                return parseInteger(elementName, jsonValue, _jsonValue, -1);
            case "Markdown":
                return parseString(Markdown.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Oid":
                return parseUri(Oid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "PositiveInt":
                return parseInteger(PositiveInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "String":
                return parseString(elementName, jsonValue, _jsonValue, -1);
            case "Time":
                return parseTime(elementName, jsonValue, _jsonValue, -1);
            case "UnsignedInt":
                return parseInteger(UnsignedInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uri":
                return parseUri(elementName, jsonValue, _jsonValue, -1);
            case "Url":
                return parseUri(Url.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uuid":
                return parseUri(Uuid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Address":
                return parseAddress(elementName, (JsonObject) jsonValue, -1);
            case "Age":
                return parseQuantity(Age.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Annotation":
                return parseAnnotation(elementName, (JsonObject) jsonValue, -1);
            case "Attachment":
                return parseAttachment(elementName, (JsonObject) jsonValue, -1);
            case "CodeableConcept":
                return parseCodeableConcept(elementName, (JsonObject) jsonValue, -1);
            case "Coding":
                return parseCoding(elementName, (JsonObject) jsonValue, -1);
            case "ContactPoint":
                return parseContactPoint(elementName, (JsonObject) jsonValue, -1);
            case "Count":
                return parseQuantity(Count.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Distance":
                return parseQuantity(Distance.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Duration":
                return parseQuantity(Duration.builder(), elementName, (JsonObject) jsonValue, -1);
            case "HumanName":
                return parseHumanName(elementName, (JsonObject) jsonValue, -1);
            case "Identifier":
                return parseIdentifier(elementName, (JsonObject) jsonValue, -1);
            case "Money":
                return parseMoney(elementName, (JsonObject) jsonValue, -1);
            case "MoneyQuantity":
                return parseQuantity(MoneyQuantity.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Period":
                return parsePeriod(elementName, (JsonObject) jsonValue, -1);
            case "Quantity":
                return parseQuantity(elementName, (JsonObject) jsonValue, -1);
            case "Range":
                return parseRange(elementName, (JsonObject) jsonValue, -1);
            case "Ratio":
                return parseRatio(elementName, (JsonObject) jsonValue, -1);
            case "Reference":
                return parseReference(elementName, (JsonObject) jsonValue, -1);
            case "SampledData":
                return parseSampledData(elementName, (JsonObject) jsonValue, -1);
            case "SimpleQuantity":
                return parseQuantity(SimpleQuantity.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Signature":
                return parseSignature(elementName, (JsonObject) jsonValue, -1);
            case "Timing":
                return parseTiming(elementName, (JsonObject) jsonValue, -1);
            case "ContactDetail":
                return parseContactDetail(elementName, (JsonObject) jsonValue, -1);
            case "Contributor":
                return parseContributor(elementName, (JsonObject) jsonValue, -1);
            case "DataRequirement":
                return parseDataRequirement(elementName, (JsonObject) jsonValue, -1);
            case "Expression":
                return parseExpression(elementName, (JsonObject) jsonValue, -1);
            case "ParameterDefinition":
                return parseParameterDefinition(elementName, (JsonObject) jsonValue, -1);
            case "RelatedArtifact":
                return parseRelatedArtifact(elementName, (JsonObject) jsonValue, -1);
            case "TriggerDefinition":
                return parseTriggerDefinition(elementName, (JsonObject) jsonValue, -1);
            case "UsageContext":
                return parseUsageContext(elementName, (JsonObject) jsonValue, -1);
            case "Dosage":
                return parseDosage(elementName, (JsonObject) jsonValue, -1);
            }
        }

        return null;
    }

    private java.lang.String getPath() {
        StringJoiner joiner = new StringJoiner(".");
        for (java.lang.String s : stack) {
            joiner.add(s);
        }
        return joiner.toString();
    }

    private java.lang.String parseJavaString(java.lang.String elementName, JsonString jsonString, int elementIndex) {
        if (jsonString == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        java.lang.String javaString = jsonString.getString();
        stackPop();
        return javaString;
    }
}
