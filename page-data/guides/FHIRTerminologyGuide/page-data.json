{"componentChunkName":"component---src-pages-guides-fhir-terminology-guide-md","path":"/guides/FHIRTerminologyGuide/","result":{"pageContext":{"frontmatter":{"slug":"/FHIR/guides/FHIRTerminologyGuide/","title":"FHIR Terminology Guide","date":"2021-04-23"},"relativePagePath":"/guides/FHIRTerminologyGuide.md","titleType":"append","MdxNode":{"id":"4d76b6a2-d64a-5978-bf6f-1deb5f75949e","children":[],"parent":"520e141e-d721-58ca-bada-16eda7d6d05b","internal":{"content":"---\nslug:  \"/FHIR/guides/FHIRTerminologyGuide/\"\ntitle: \"FHIR Terminology Guide\"\ndate:  \"2021-04-23\"\n---\n\n## Overview\n\nThe IBM FHIR Server Terminology module ([fhir-term](https://github.com/IBM/FHIR/tree/main/fhir-term)) provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using `CodeSystem`, `ValueSet`, and `ConceptMap` resources that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)).\n\n## FHIR Terminology Service Diagram\n\n![fhir-term-service-diagram.png](fhir-term-service-diagram.png)\n\n## FHIR Terminology Service Provider Interface (SPI)\n\nThe FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `closure`, `getConcept`, `getConcepts`, `hasConcept`, `hasConcepts`, `isSupported` and `subsumes`:\n\n```java\npublic interface FHIRTermServiceProvider {\n    Set<Concept> closure(CodeSystem codeSystem, Code code);\n    Map<Code, Set<Concept>> closure(CodeSystem codeSystem, Set<Code> codes);\n    Concept getConcept(CodeSystem codeSystem, Code code);\n    Set<Concept> getConcepts(CodeSystem codeSystem);\n    <R> Set<R> getConcepts(CodeSystem codeSystem, Function<Concept, ? extends R> function);\n    Set<Concept> getConcepts(CodeSystem codeSystem, List<Filter> filters);\n    <R> Set<R> getConcepts(CodeSystem codeSystem, List<Filter> filters, Function<Concept, ? extends R> function);\n    boolean hasConcept(CodeSystem codeSystem, Code code);\n    boolean hasConcepts(CodeSystem codeSystem, Set<Code> codes);\n    boolean isSupported(CodeSystem codeSystem);\n    boolean subsumes(CodeSystem codeSystem, Code codeA, Code codeB);\n}\n```\n\nNOTE: `closure(CodeSystem, Set)`, `getConcepts(CodeSystem, Function)`, `getConcepts(CodeSystem, List, Function)` and `hasConcepts(CodeSystem, Set)` all have default implementations in the `FHIRTermServiceProvider` interface.\n\n## Registry Terminology Service Provider Implementation\n\nThe default implementation of `FHIRTermServiceProvider` ([RegistryTermServiceProvider](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/RegistryTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)). It supports `CodeSystem` resources with *complete* content (`CodeSystem.content = 'complete'`) and `ValueSet` resources that reference `CodeSystem` resources that have complete content.\n\n## FHIR Terminology Service Singleton Facade\n\nThe FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a list of `FHIRTermServiceProvider` instances from the ServiceLoader and includes an instance of the `RegistryTermServiceProvider`. Client code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n\n```java\nValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\nCoding coding = Coding.builder()\n        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n        .version(string(\"1.0.0\"))\n        .code(Code.of(\"a\")\n        .display(string(\"concept a\")\n        .build();\nValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n```\n\nThe `expand `, `lookup`, `validateCode` (CodeSystem), `validateCode` (ValueSet), and `translate` methods support the passing of optional parameters (e.g. `ExpansionParameters`, `LookupParameters`, etc.). Many of the methods also return an \"outcome\" object. These \"parameter\" and \"outcome\" objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: [http://hl7.org/fhir/terminology-module.html](http://hl7.org/fhir/terminology-module.html).\n\nThe \"parameter\" objects can be created from a `Parameters` resource:\n\n```java\nParameters parameters = ...;\nExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n```\n\nThe \"outcome\" objects can be converted to a Parameters resource:\n\n```java\nLookupOutcome outcome = ...;\nParameters parameters = outcome.toParameters();\n```\n\nNOTE: The current implementation of `FHIRTermService` does not support optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n\n## FHIR Server Terminology Extended Operations\n\nThe FHIR terminology operations module ([fhir-operation-term](https://github.com/IBM/FHIR/tree/main/operation/fhir-operation-term)) connects the FHIR Server REST layer to the FHIR terminology module via the operations framework. This module implements the terminology operations as defined in the FHIR terminology service specification [http://hl7.org/fhir/terminology-service.html](http://hl7.org/fhir/terminology-service.html). One exception is the `$closure` operation. The `$closure` operation is experimental and does not support versioning or replay. This means that the `$closure` operation will always return the set of closure table entries for the given input concepts and does not store client state.\n\n## FHIRPath Terminology Functions\n\nThe FHIRPath module ([fhir-path](https://github.com/IBM/FHIR/tree/main/fhir-path)) has been updated to support implementations of the draft FHIRPath terminology function specification: [http://hl7.org/fhir/fhirpath.html#txapi](http://hl7.org/fhir/fhirpath.html#txapi). Support for the following functions (accessed through the `%terminologies` constant) has been implemented:\n\n```\n%terminologies.expand(valueSet, params) : ValueSet\n%terminologies.lookup(coded, params) : Parameters\n%terminologies.validateVS(valueSet, coded, params) : Parameters\n%terminologies.validateCS(codeSystem, coded, params) : Parameters\n%terminologies.subsumes(system, coded1, coded2, params) : code\n%terminologies.translate(conceptMap, code, params) : Parameters\n```\n\nHere is the same example from above but going through the FHIRPath evaluator:\n\n```java\nCoding coding = Coding.builder()\n        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n        .version(string(\"1.0.0\"))\n        .code(Code.of(\"a\")\n        .display(string(\"concept a\")\n        .build();\nCollection<FHIRPathNode> initialContext = singleton(FHIRPathElementNode.elementNode(coding));\nFHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\nCollection<FHIRPathNode> result = evaluator.evaluate(\"%terminologies.validateCode('http://ibm.com/fhir/ValueSet/vs1', %context)\");\n\n```\n\nAdditionally, the FHIRPath functions `subsumedBy` and `subsumes` have been implemented per: [http://hl7.org/fhir/fhirpath.html#functions](http://hl7.org/fhir/fhirpath.html#functions)\n\n## Graph Terminology Service Provider Implementation (experimental)\n\nThe FHIR term graph module [fhir-term-graph](https://github.com/IBM/FHIR/tree/main/fhir-term-graph) provides an implementation of `FHIRTermServiceProvider` that is backed by a graph database ([JanusGraph](https://janusgraph.org)). The module also contains term graph loaders for SNOMED-CT Release Format 2 (RF2) files (SnomedTermGraphLoader), UMLS Rich Release Format (RRF) files (UMLSTermGraphLoader), and FHIR CodeSystem resources (CodeSystemTermGraphLoader). Graph term service providers may be enabled / configured through the `fhir-server-config.json` file per the configuration properties specified in the [FHIR Server User's Guide](https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference).\n\nExample configurations:\n\n``` json\n            \"graphTermServiceProviders\": [{\n                \"__comment\": \"Configuration for Berkeley DB Java Edition + Lucene\",\n                \"enabled\": false,\n                \"configuration\": {\n                    \"storage.backend\": \"berkeleyje\",\n                    \"storage.directory\": \"data/graph\",\n                    \"index.search.backend\": \"lucene\",\n                    \"index.search.hostname\": \"data/searchindex\",\n                    \"storage.read-only\": true,\n                    \"query.batch\": true,\n                    \"query.batch-property-prefetch\": true,\n                    \"query.fast-property\": true\n                }\n            },{\n                \"__comment\": \"Configuration for Apache Cassandra + ElasticSearch\",\n                \"enabled\": true,\n                \"timeLimit\": 10000,\n                \"configuration\": {\n                    \"storage.backend\": \"cql\",\n                    \"storage.hostname\": \"127.0.0.1\",\n                    \"index.search.backend\": \"elasticsearch\",\n                    \"index.search.hostname\": \"127.0.0.1:9200\",\n                    \"storage.read-only\": true,\n                    \"query.batch\": true,\n                    \"query.batch-property-prefetch\": true,\n                    \"query.fast-property\": true\n                }\n            }],\n```\n\n## Remote Terminology Service Provider Implementation (experimental)\n\nThe FHIR term remote module [fhir-term-remote](https://github.com/IBM/FHIR/tree/main/fhir-term-remote) provides an implementation of `FHIRTermServiceProvider` that connects to an external service using a REST client to access code system content. The external service must implement the FHIR REST terminology APIs documented [here](http://hl7.org/fhir/terminology-service.html). Remote term service providers may be enabled / configured through the `fhir-server-config.json` file per the configuration properties specified in the [FHIR Server User's Guide](https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference).\n\nExample configurations:\n\n\n``` json\n            \"remoteTermServiceProviders\": [{\n                \"__comment\": \"Configuration for public SNOMED-CT endpoint\",\n                \"enabled\": true,\n                \"base\": \"https://snowstorm-fhir.snomedtools.org/fhir\",\n                \"supports\": [{\n                    \"system\": \"http://snomed.info/sct\"\n                }]\n            },{\n                \"__comment\": \"Configuration for public LOINC endpoint\",\n                \"enabled\": true,\n                \"base\": \"https://fhir.loinc.org\",\n                \"basicAuth\": {\n                    \"username\": \"loincUsername\",\n                    \"password\": \"loincPassword\"\n                \n                },\n                \"supports\": [{\n                    \"system\": \"http://loinc.org\"\n                }]\n            }]\n```","type":"Mdx","contentDigest":"65fdf7fbca00933115e8805611ed29e7","counter":117,"owner":"gatsby-plugin-mdx","fieldOwners":{"slug":"gatsby-plugin-slug"}},"frontmatter":{"title":"FHIR Terminology Guide","slug":"/FHIR/guides/FHIRTerminologyGuide/","date":"2021-04-23"},"exports":{},"rawBody":"---\nslug:  \"/FHIR/guides/FHIRTerminologyGuide/\"\ntitle: \"FHIR Terminology Guide\"\ndate:  \"2021-04-23\"\n---\n\n## Overview\n\nThe IBM FHIR Server Terminology module ([fhir-term](https://github.com/IBM/FHIR/tree/main/fhir-term)) provides a FHIR terminology service provider interface (SPI) and a default implementation that implements terminology services using `CodeSystem`, `ValueSet`, and `ConceptMap` resources that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)).\n\n## FHIR Terminology Service Diagram\n\n![fhir-term-service-diagram.png](fhir-term-service-diagram.png)\n\n## FHIR Terminology Service Provider Interface (SPI)\n\nThe FHIR Terminology Service Provider interface provides a mechanism for implementers to provide terminology capabilities via the Java ServiceLoader. The interface includes method signatures for `closure`, `getConcept`, `getConcepts`, `hasConcept`, `hasConcepts`, `isSupported` and `subsumes`:\n\n```java\npublic interface FHIRTermServiceProvider {\n    Set<Concept> closure(CodeSystem codeSystem, Code code);\n    Map<Code, Set<Concept>> closure(CodeSystem codeSystem, Set<Code> codes);\n    Concept getConcept(CodeSystem codeSystem, Code code);\n    Set<Concept> getConcepts(CodeSystem codeSystem);\n    <R> Set<R> getConcepts(CodeSystem codeSystem, Function<Concept, ? extends R> function);\n    Set<Concept> getConcepts(CodeSystem codeSystem, List<Filter> filters);\n    <R> Set<R> getConcepts(CodeSystem codeSystem, List<Filter> filters, Function<Concept, ? extends R> function);\n    boolean hasConcept(CodeSystem codeSystem, Code code);\n    boolean hasConcepts(CodeSystem codeSystem, Set<Code> codes);\n    boolean isSupported(CodeSystem codeSystem);\n    boolean subsumes(CodeSystem codeSystem, Code codeA, Code codeB);\n}\n```\n\nNOTE: `closure(CodeSystem, Set)`, `getConcepts(CodeSystem, Function)`, `getConcepts(CodeSystem, List, Function)` and `hasConcepts(CodeSystem, Set)` all have default implementations in the `FHIRTermServiceProvider` interface.\n\n## Registry Terminology Service Provider Implementation\n\nThe default implementation of `FHIRTermServiceProvider` ([RegistryTermServiceProvider](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/provider/RegistryTermServiceProvider.java)) leverages terminology resources (`CodeSystem`, `ValueSet`, and `ConceptMap`) that have been made available through the FHIR registry module ([fhir-registry](https://github.com/IBM/FHIR/tree/main/fhir-registry)). It supports `CodeSystem` resources with *complete* content (`CodeSystem.content = 'complete'`) and `ValueSet` resources that reference `CodeSystem` resources that have complete content.\n\n## FHIR Terminology Service Singleton Facade\n\nThe FHIR Terminology Service Singleton facade ([FHIRTermService](https://github.com/IBM/FHIR/blob/main/fhir-term/src/main/java/com/ibm/fhir/term/service/FHIRTermService.java)) loads a list of `FHIRTermServiceProvider` instances from the ServiceLoader and includes an instance of the `RegistryTermServiceProvider`. Client code (Java) that requires terminology capabilities should access them via the `FHIRTermService` singleton facade. Here is an example:\n\n```java\nValueSet valueSet = ValueSetSupport.getValueSet(\"http://ibm.com/fhir/ValueSet/vs1\");\nCoding coding = Coding.builder()\n        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n        .version(string(\"1.0.0\"))\n        .code(Code.of(\"a\")\n        .display(string(\"concept a\")\n        .build();\nValidationOutcome outcome = FHIRTermService.getInstance().validateCode(valueSet, coding);\n```\n\nThe `expand `, `lookup`, `validateCode` (CodeSystem), `validateCode` (ValueSet), and `translate` methods support the passing of optional parameters (e.g. `ExpansionParameters`, `LookupParameters`, etc.). Many of the methods also return an \"outcome\" object. These \"parameter\" and \"outcome\" objects are modeled after the input/output parameters specified in the terminology operations from the FHIR Terminology module: [http://hl7.org/fhir/terminology-module.html](http://hl7.org/fhir/terminology-module.html).\n\nThe \"parameter\" objects can be created from a `Parameters` resource:\n\n```java\nParameters parameters = ...;\nExpansionParameters expansionParameters = ExpansionParameters.from(parameters);\n```\n\nThe \"outcome\" objects can be converted to a Parameters resource:\n\n```java\nLookupOutcome outcome = ...;\nParameters parameters = outcome.toParameters();\n```\n\nNOTE: The current implementation of `FHIRTermService` does not support optional parameters (e.g. `ExpansionParameters`, `TranslationParameters`, `ValidationParameters`, etc.).\n\n## FHIR Server Terminology Extended Operations\n\nThe FHIR terminology operations module ([fhir-operation-term](https://github.com/IBM/FHIR/tree/main/operation/fhir-operation-term)) connects the FHIR Server REST layer to the FHIR terminology module via the operations framework. This module implements the terminology operations as defined in the FHIR terminology service specification [http://hl7.org/fhir/terminology-service.html](http://hl7.org/fhir/terminology-service.html). One exception is the `$closure` operation. The `$closure` operation is experimental and does not support versioning or replay. This means that the `$closure` operation will always return the set of closure table entries for the given input concepts and does not store client state.\n\n## FHIRPath Terminology Functions\n\nThe FHIRPath module ([fhir-path](https://github.com/IBM/FHIR/tree/main/fhir-path)) has been updated to support implementations of the draft FHIRPath terminology function specification: [http://hl7.org/fhir/fhirpath.html#txapi](http://hl7.org/fhir/fhirpath.html#txapi). Support for the following functions (accessed through the `%terminologies` constant) has been implemented:\n\n```\n%terminologies.expand(valueSet, params) : ValueSet\n%terminologies.lookup(coded, params) : Parameters\n%terminologies.validateVS(valueSet, coded, params) : Parameters\n%terminologies.validateCS(codeSystem, coded, params) : Parameters\n%terminologies.subsumes(system, coded1, coded2, params) : code\n%terminologies.translate(conceptMap, code, params) : Parameters\n```\n\nHere is the same example from above but going through the FHIRPath evaluator:\n\n```java\nCoding coding = Coding.builder()\n        .system(Uri.of(\"http://ibm.com/fhir/CodeSystem/cs1\"))\n        .version(string(\"1.0.0\"))\n        .code(Code.of(\"a\")\n        .display(string(\"concept a\")\n        .build();\nCollection<FHIRPathNode> initialContext = singleton(FHIRPathElementNode.elementNode(coding));\nFHIRPathEvaluator evaluator = FHIRPathEvaluator.evaluator();\nCollection<FHIRPathNode> result = evaluator.evaluate(\"%terminologies.validateCode('http://ibm.com/fhir/ValueSet/vs1', %context)\");\n\n```\n\nAdditionally, the FHIRPath functions `subsumedBy` and `subsumes` have been implemented per: [http://hl7.org/fhir/fhirpath.html#functions](http://hl7.org/fhir/fhirpath.html#functions)\n\n## Graph Terminology Service Provider Implementation (experimental)\n\nThe FHIR term graph module [fhir-term-graph](https://github.com/IBM/FHIR/tree/main/fhir-term-graph) provides an implementation of `FHIRTermServiceProvider` that is backed by a graph database ([JanusGraph](https://janusgraph.org)). The module also contains term graph loaders for SNOMED-CT Release Format 2 (RF2) files (SnomedTermGraphLoader), UMLS Rich Release Format (RRF) files (UMLSTermGraphLoader), and FHIR CodeSystem resources (CodeSystemTermGraphLoader). Graph term service providers may be enabled / configured through the `fhir-server-config.json` file per the configuration properties specified in the [FHIR Server User's Guide](https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference).\n\nExample configurations:\n\n``` json\n            \"graphTermServiceProviders\": [{\n                \"__comment\": \"Configuration for Berkeley DB Java Edition + Lucene\",\n                \"enabled\": false,\n                \"configuration\": {\n                    \"storage.backend\": \"berkeleyje\",\n                    \"storage.directory\": \"data/graph\",\n                    \"index.search.backend\": \"lucene\",\n                    \"index.search.hostname\": \"data/searchindex\",\n                    \"storage.read-only\": true,\n                    \"query.batch\": true,\n                    \"query.batch-property-prefetch\": true,\n                    \"query.fast-property\": true\n                }\n            },{\n                \"__comment\": \"Configuration for Apache Cassandra + ElasticSearch\",\n                \"enabled\": true,\n                \"timeLimit\": 10000,\n                \"configuration\": {\n                    \"storage.backend\": \"cql\",\n                    \"storage.hostname\": \"127.0.0.1\",\n                    \"index.search.backend\": \"elasticsearch\",\n                    \"index.search.hostname\": \"127.0.0.1:9200\",\n                    \"storage.read-only\": true,\n                    \"query.batch\": true,\n                    \"query.batch-property-prefetch\": true,\n                    \"query.fast-property\": true\n                }\n            }],\n```\n\n## Remote Terminology Service Provider Implementation (experimental)\n\nThe FHIR term remote module [fhir-term-remote](https://github.com/IBM/FHIR/tree/main/fhir-term-remote) provides an implementation of `FHIRTermServiceProvider` that connects to an external service using a REST client to access code system content. The external service must implement the FHIR REST terminology APIs documented [here](http://hl7.org/fhir/terminology-service.html). Remote term service providers may be enabled / configured through the `fhir-server-config.json` file per the configuration properties specified in the [FHIR Server User's Guide](https://ibm.github.io/FHIR/guides/FHIRServerUsersGuide#51-configuration-properties-reference).\n\nExample configurations:\n\n\n``` json\n            \"remoteTermServiceProviders\": [{\n                \"__comment\": \"Configuration for public SNOMED-CT endpoint\",\n                \"enabled\": true,\n                \"base\": \"https://snowstorm-fhir.snomedtools.org/fhir\",\n                \"supports\": [{\n                    \"system\": \"http://snomed.info/sct\"\n                }]\n            },{\n                \"__comment\": \"Configuration for public LOINC endpoint\",\n                \"enabled\": true,\n                \"base\": \"https://fhir.loinc.org\",\n                \"basicAuth\": {\n                    \"username\": \"loincUsername\",\n                    \"password\": \"loincPassword\"\n                \n                },\n                \"supports\": [{\n                    \"system\": \"http://loinc.org\"\n                }]\n            }]\n```","fileAbsolutePath":"/home/runner/work/FHIR/FHIR/fhir/docs/src/pages/guides/FHIRTerminologyGuide.md","fields":{"slug":"//FHIR/guides/FHIRTerminologyGuide/"}}}},"staticQueryHashes":["1364590287","2102389209","2102389209","227138135","227138135","2456312558","2746626797","2746626797","3018647132","3018647132","3906363820","3906363820","768070550"]}